<?xml version="1.0" encoding="utf-8"?>

<topic id="b1c2cd1c-1022-42ba-840e-aff488a4f498"
       revisionNumber="1">
    <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
                                 xmlns:xlink="http://www.w3.org/1999/xlink">

        <introduction />

        <section address="Purpose">
            <title>Purpose</title>
            <content>
                <para>
                    A
                    <codeEntityReference qualifyHint="false">T:RI.Framework.Services.Bootstrapper</codeEntityReference>
                    is used to load all the actual decoupling services during scene load (using Unitys
                    <legacyItalic>Awake()</legacyItalic>
                    ).
                </para>
            </content>
        </section>

        <section address="Usage">
            <title>Usage</title>
            <content>
                <para>
                    The bootstrapper is added to a
                    <legacyItalic>GameObject</legacyItalic>
                    using drag-and-drop from
                    <legacyItalic>RI.Framework.Unity.dll</legacyItalic>
                    :
                </para>
                <mediaLink>
                    <image xlink:href="BootstrapperDragDrop" />
                </mediaLink>
                <para>
                    Alternatively, it can also be done in code by adding the bootstrapper as a component to a
                    <legacyItalic>GameObject</legacyItalic>
                    :
                </para>
                <code language="cs">
                    <![CDATA[
GameObject go = new GameObject();
go.AddComponent<Bootstrapper>();
                    ]]>
                </code>
                <para>
                    After the scene load, the bootstrapper can be seen in the list of objects:
                </para>
                <mediaLink>
                    <image xlink:href="BootstrapperObject" />
                </mediaLink>
                <para>
                    Note that the bootstrapper is only required once as it is persistent over all scenes (using Unitys
                    <legacyItalic>DontDestroyOnLoad()</legacyItalic>
                    ).
                </para>
            </content>
        </section>

        <section address="Omit">
            <title>Omit</title>
            <content>
                <para>
                    You do not need the bootstrapper.
                    You can use each decoupling service as its own independent standalone service (e.g. if you only want/need one of them).
                    However, you would have to do all the setup and wiring yourself.
                    The other decoupling service descriptions explain how to use them as independent standalone services.
                </para>
                <para>
                    As an alternative, you can disable certain decoupling features using the bootstrapper options (see below).
                </para>
            </content>
        </section>

        <section address="Inherit">
            <title>Inherit</title>
            <content>
                <para>
                    You can create your own class which inherits from the bootstrapper for customization.
                    This allows you to override most of the bootstrappers default behaviour.
                    See the documentation of the bootstrapper type for more information about its default behaviour.
                </para>
                <para>
                    For example, you could override
                    <legacyItalic>ConfigureContainer()</legacyItalic>
                    to add custom catalogs to the composition container:
                </para>
                <code language="cs">
                    <![CDATA[
protected override void ConfigureContainer ()
{
    base.ConfigureContainer();
    this.Container.AddCatalog(new TypeCatalog(typeof(SomeType), typeof(AnotherType)));
}
                    ]]>
                </code>
            </content>
        </section>

        <section address="Options">
            <title>Options</title>
            <content>
                <para>
                    The bootstrapper provides a few options:
                </para>
                <mediaLink>
                    <image xlink:href="BootstrapperOptions" />
                </mediaLink>
                <para>
                    These options can be helpful if you do want to use the bootstrapper but not all of the decoupling services or if you want to use your own implementation of a service.
                    The only decoupling service always required and created by the bootstrapper is the composition container.
                </para>
                <para>
                    The available options are:
                </para>
                <list class="bullet">
                    <listItem>
                        <para>
                            <legacyBold>Logging Service</legacyBold>
                            : Disabled by default.
                            Creates the logging service (
                            <codeEntityReference qualifyHint="false">T:RI.Framework.Services.Logging.LogService</codeEntityReference>
                            ) if enabled.
                            It is used internally by the framework for logging and therefore can be used to enable/disable all log output generated by the framework.
                            It is disabled by default to not spam your logs as especially the composition container can generate an excessive amount of log messages.
                        </para>
                    </listItem>
                    <listItem>
                        <para>
                            <legacyBold>Module Service</legacyBold>
                            : Enabled by default.
                            Creates the module service (
                            <codeEntityReference qualifyHint="false">T:RI.Framework.Services.Modularization.ModuleService</codeEntityReference>
                            ) if enabled.
                        </para>
                    </listItem>
                    <listItem>
                        <para>
                            <legacyBold>Module Initialization</legacyBold>
                            : Enabled by default.
                            If enabled and the module service is available, the bootstrapper will automatically initialize all available modules.
                        </para>
                    </listItem>
                    <listItem>
                        <para>
                            <legacyBold>Module Unloading</legacyBold>
                            : Enabled by default.
                            If enabled and the module service is available, the bootstrapper will automatically unload all modules during shutdown.
                        </para>
                    </listItem>
                    <listItem>
                        <para>
                            <legacyBold>Dispatcher Service</legacyBold>
                            : Enabled by default.
                            Creates the dispatcher service (
                            <codeEntityReference qualifyHint="false">T:RI.Framework.Services.Dispatcher.DispatcherService</codeEntityReference>
                            ) if enabled.
                        </para>
                    </listItem>
                    <listItem>
                        <para>
                            <legacyBold>Scripting Catalog</legacyBold>
                            : Enabled by default.
                            Adds a
                            <codeEntityReference qualifyHint="false">T:RI.Framework.Composition.Catalogs.ScriptingCatalog</codeEntityReference>
                            to the composition container.
                        </para>
                    </listItem>
                    <listItem>
                        <para>
                            <legacyBold>Service Locator Binding</legacyBold>
                            : Enabled by default.
                            Binds the
                            <codeEntityReference qualifyHint="false">T:RI.Framework.Services.ServiceLocator</codeEntityReference>
                            to the composition container.
                        </para>
                    </listItem>
                </list>
            </content>
        </section>

        <relatedTopics />

    </developerConceptualDocument>
</topic>