<?xml version="1.0" encoding="utf-8"?>

<topic id="381cc397-dd59-4d41-b1fd-7017cb7e1dd8"
       revisionNumber="1">
    <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
                                 xmlns:xlink="http://www.w3.org/1999/xlink">

        <introduction>
            <autoOutline />
        </introduction>

        <section address="Purpose">
            <title>Purpose</title>
            <content>
                <para>
                    <codeEntityReference qualifyHint="false">T:RI.Framework.Services.Modularization.ModuleService</codeEntityReference>
                    is used to implement and manage modules.
                    Modules are very similar to singletons as they are instantiated and started once and then used throughout the game.
                    Typical examples for modules are &quot;Controllers&quot; or &quot;Managers&quot; (e.g. PlayerController, EnemyManager, etc.) or globally available services and functionality in general.
                </para>
            </content>
        </section>

        <section address="Usage">
            <title>Usage</title>
            <content>
                <para>
                    To implement a module, simply add a class to your project which inherits from
                    <codeEntityReference qualifyHint="false">T:RI.Framework.Services.Modularization.MonoModule</codeEntityReference>
                    :
                </para>
                <code language="cs">
                    <![CDATA[
using RI.Framework.Services;
using RI.Framework.Services.Modularization;


public class EnemyManager : MonoModule
{
    protected override void Initialize ()
    {
        base.Initialize();
        
        // called when the module is initialized (e.g. when the bootstrapper starts)
    }
  
    protected override void Unload ()
    {
        base.Unload();
    
        // called when the module is unloaded (e.g. when the game ends)
    }
}
          ]]>
                </code>
            </content>
        </section>

        <section address="HowItWorks">
            <title>How it works</title>
            <content>
                <para>
                    The bootstrapper will create the module service which in turn will discover, instantiate, and initialize all modules (using a composition container as described in the next section).
                </para>
                <para>
                    <codeEntityReference qualifyHint="false">T:RI.Framework.Services.Modularization.MonoModule</codeEntityReference>
                    inherits from <legacyItalic>MonoBehaviour</legacyItalic> so a module can use all Unity features as usual.
                    A <legacyItalic>GameObject</legacyItalic> is created for each module automatically.
                </para>
                <para>
                    One thing was not yet explicitly addressed: Why use modules instead of regular
                    <legacyItalic>MonoBehaviour</legacyItalic>s attached to <legacyItalic>GameObject</legacyItalic>s?
                    The three reasons are: Modules are singletons, go through the composition container (making them exportable/importable), and are automatically instantiated and initialized by the module service during bootstrapping (compared to other exported types which are only instantiated when retrieved from the composition container).
                </para>
            </content>
        </section>

        <section address="StandaloneUse">
            <title>Standalone use</title>
            <content>
                <para>
                    You can use the
                    <codeEntityReference qualifyHint="false">T:RI.Framework.Services.Modularization.ModuleService</codeEntityReference>
                    as a standalone service.
                    Just create an instance:
                </para>
                <code language="cs">
                    <![CDATA[
ModuleService moduleService = new ModuleService();
                            ]]>
                </code>
            </content>
        </section>

        <section address="MultipleInstances">
            <title>Multiple instances</title>
            <content>
                <para>
                    It is also possible to create multiple independent instances of
                    <codeEntityReference qualifyHint="false">T:RI.Framework.Services.Modularization.ModuleService</codeEntityReference>
                    .
                </para>
            </content>
        </section>

        <section address="DependencyOnCompositionContainer">
            <title>Dependency on CompositionContainer</title>
            <content>
                <para>
                    The
                    <codeEntityReference qualifyHint="false">T:RI.Framework.Services.Modularization.ModuleService</codeEntityReference>
                    has an import property to import all implementations of
                    <codeEntityReference qualifyHint="false">T:RI.Framework.Services.Modularization.IModule</codeEntityReference>
                    .
                    It also implements
                    <codeEntityReference qualifyHint="false">T:RI.Framework.Composition.Model.IImporting</codeEntityReference>
                    , making it aware when the imported
                    <codeEntityReference qualifyHint="false">T:RI.Framework.Services.Modularization.IModule</codeEntityReference>
                    s were updated/recomposed.
                    Therefore, it is not necessary to add the modules explicitly as they are automatically discovered by the
                    <codeEntityReference qualifyHint="false">T:RI.Framework.Composition.CompositionContainer</codeEntityReference>
                    and imported into
                    <codeEntityReference qualifyHint="false">T:RI.Framework.Services.Modularization.ModuleService</codeEntityReference>
                    .
                </para>
                <para>
                    If
                    <codeEntityReference qualifyHint="false">T:RI.Framework.Services.Modularization.ModuleService</codeEntityReference>
                    is not contained in a
                    <codeEntityReference qualifyHint="false">T:RI.Framework.Composition.CompositionContainer</codeEntityReference>
                    , the modules must be manually added and removed using
                    <codeEntityReference qualifyHint="false">M:RI.Framework.Services.Modularization.ModuleService.AddModule(RI.Framework.Services.Modularization.IModule)</codeEntityReference>
                    and
                    <codeEntityReference qualifyHint="false">M:RI.Framework.Services.Modularization.ModuleService.RemoveModule(RI.Framework.Services.Modularization.IModule)</codeEntityReference>
                    .
                </para>
                <para>
                    It is possible to use both importing and explicit add/remove but you cannot explicitly remove a module which is imported.
                    The behaviour is undefined if a module is imported and explicitly added.
                </para>
            </content>
        </section>

        <section address="ModuleImplementation">
            <title>Module implementation</title>
            <content>
                <para>
                    There are two base implementations for modules which implement
                    <codeEntityReference qualifyHint="false">T:RI.Framework.Services.Modularization.IModule</codeEntityReference>
                    :
                    <codeEntityReference qualifyHint="false">T:RI.Framework.Services.Modularization.MonoModule</codeEntityReference>
                    and
                    <codeEntityReference qualifyHint="false">T:RI.Framework.Services.Modularization.Module</codeEntityReference>
                    .
                    You can use one of these base classes to implement your modules or implement
                    <codeEntityReference qualifyHint="false">T:RI.Framework.Services.Modularization.IModule</codeEntityReference>
                    directly.
                </para>
                <para>
                    <codeEntityReference qualifyHint="false">T:RI.Framework.Services.Modularization.MonoModule</codeEntityReference>
                    is used for modules which also need to be a <legacyItalic>MonoBehaviour</legacyItalic>.
                    When such modules are instantiated, a <legacyItalic>GameObject</legacyItalic> is automatically created to which the module instance is attached (one
                    <legacyItalic>GameObject</legacyItalic> per module).
                </para>
                <para>
                    <codeEntityReference qualifyHint="false">T:RI.Framework.Services.Modularization.Module</codeEntityReference>
                    is used for modules which do not require to be a <legacyItalic>MonoBehaviour</legacyItalic>
                    .
                </para>
            </content>
        </section>

        <section address="InitializationAndUnloading">
            <title>Initialization and unloading</title>
            <content>
                <para>
                    The initialization and unloading of modules should be managed by the module service.
                    Do not call
                    <codeEntityReference qualifyHint="false">M:RI.Framework.Services.Modularization.IModule.Initialize</codeEntityReference>
                    or
                    <codeEntityReference qualifyHint="false">M:RI.Framework.Services.Modularization.IModule.Unload</codeEntityReference>
                    on a module directly.
                </para>
                <para>
                    The module service knows whether a module is initialized or not through its
                    <codeEntityReference qualifyHint="false">P:RI.Framework.Services.Modularization.IModule.IsInitialized</codeEntityReference>
                    property.
                    At a certain point during startup, the modules are going to be initialized (e.g. when the bootstrapper calls
                    <codeEntityReference qualifyHint="false">M:RI.Framework.Services.Modularization.ModuleService.Initialize</codeEntityReference>
                    ).
                    This will initialize all modules which are known to the module service at this point in time.
                    If a module is added later, the added module is also initialized immediately after it was added (but only if the other modules were previously initialized).
                </para>
                <para>
                    The same applies for unloading in a somewhat reversed fashion:
                    At a certain point during shutdown, the modules are going to be unloaded (e.g. when the bootstrapper calls
                    <codeEntityReference qualifyHint="false">M:RI.Framework.Services.Modularization.ModuleService.Unload</codeEntityReference>
                    ).
                    This will unload all modules which are known to the module service at this point in time.
                    If a module was removed earlier, the removed module was already unloaded during removal.
                </para>
                <para>
                    This mechanism ensures that modules are always properly initialized and unloaded, regardless when they were added/removed.
                </para>
            </content>
        </section>

        <relatedTopics />

    </developerConceptualDocument>
</topic>