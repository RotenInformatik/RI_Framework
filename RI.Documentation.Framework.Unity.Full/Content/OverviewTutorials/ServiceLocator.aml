<?xml version="1.0" encoding="utf-8"?>

<topic id="51398a91-3652-46f9-b034-44e6fd6ab428"
       revisionNumber="1">
    <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
                                 xmlns:xlink="http://www.w3.org/1999/xlink">

        <introduction />

        <section address="Purpose">
            <title>Purpose</title>
            <content>
                <para>
                    The
                    <codeEntityReference qualifyHint="false">T:RI.Framework.Services.ServiceLocator</codeEntityReference>
                    lets you use the decoupling features from anywhere.
                    It provides global access to the composition container.
                </para>
            </content>
        </section>

        <section address="Usage">
            <title>Usage</title>
            <content>
                <para>
                    To use the service locator, simply specify the type you need an instance of (similar to explicitly retrieving an instance from a composition container):
                </para>
                <code language="cs">
                    <![CDATA[
GameManager gm = ServiceLocator.GetInstance<GameManager>();
                    ]]>
                </code>
                <para>
                    This works also for multiple instances of a type:
                </para>
                <code language="cs">
                    <![CDATA[
using RI.Framework.Composition;
using RI.Framework.Composition.Model;
using RI.Framework.Services;
using RI.Framework.Services.Modularization;


public interface IEnemyAI
{
}


public sealed class SmartEnemyAI : IEnemyAI
{
}


public sealed class DumbEnemyAI : IEnemyAI
{
}


public sealed class EnemyManager : MonoModule
{
    public IEnemyAI[] EnemyAIs;
  
    protected override void Initialize ()
    {
        base.Initialize();
        
        this.EnemyAIs = ServiceLocator.GetInstances<IEnemyAI>();
    }
}
                    ]]>
                </code>
            </content>
        </section>

        <section address="Performance">
            <title>Performance</title>
            <content>
                <para>
                    Be aware that using the service locator is considerably slower than property-based importing.
                    Property-based importing performs resolving of the instances only once (except in cases of recomposition).
                    The service locator however performs resolving each time it is used.
                </para>
            </content>
        </section>

        <relatedTopics />

    </developerConceptualDocument>
</topic>