<?xml version="1.0" encoding="utf-8"?>

<topic id="5ad1a46e-e56a-4c33-90dc-f3ca2e7a56a6"
       revisionNumber="1">
    <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
                                 xmlns:xlink="http://www.w3.org/1999/xlink">

        <introduction />

        <section address="Purpose">
            <title>Purpose</title>
            <content>
                <para>
                    <codeEntityReference qualifyHint="false">T:RI.Framework.Services.Dispatcher.DispatcherService</codeEntityReference>
                    is used to send and receive messages.
                    Sending and receiving messages is very simple: Any object which has access to the dispatcher service (e.g. by using property-based importing or through the service locator) can send and receive messages.
                </para>
            </content>
        </section>

        <section address="Usage">
            <title>Usage</title>
            <content>
                <para>
                    To receive a message of a specified type, a receiver needs to be registered:
                </para>
                <code language="cs">
                    <![CDATA[
using RI.Framework.Services;
using RI.Framework.Services.Dispatcher;
using RI.Framework.Services.Modularization;


public sealed class KillEvent
{
}


public sealed class GameRules : MonoModule
{
    [Import]
    public DispatcherService Dispatcher { get; set; }
  
    private void OnKill(KillEvent killEvent)
    {
        // process kill event
    }

    protected override void Initialize ()
    {
        base.Initialize();
        
        // register OnKill to receive all messages of type KillEvent
        this.Dispatcher.RegisterReceiver<KillEvent>(this.OnKill);
    }
}
                    ]]>
                </code>
                <para>
                    A message is sent by broadcasting it to all its registered receivers:
                </para>
                <code language="cs">
                    <![CDATA[
using RI.Framework.Services;
using RI.Framework.Services.Dispatcher;
using RI.Framework.Services.Modularization;


public sealed class KillEvent
{
}


public sealed class EnemyManager : MonoModule
{
    [Import]
    public DispatcherService Dispatcher { get; set; }

    void Update ()
    {
        // ...
        
        if(enemyIsKilled)
        {
            // broadcast a message of type KillEvent to all registered KillEvent receivers
            this.Dispatcher.Broadcast(new KillEvent());
        }
    }
}
                    ]]>
                </code>
            </content>
        </section>

        <section address="HowItWorks">
            <title>How it works</title>
            <content>
                <para>
                    The messaging system is type-based.
                    It means that a message of a certain type is received by each receiver which registered for that message type.
                    Any class type can be used as a message.
                </para>
                <para>
                    Messages can be sent from any thread but are delivered to the receivers in Unitys main/foreground thread.
                    This makes the dispatcher service a good tool for asynchronous cross-thread interaction or, for example, to deliver events and results from a background thread to the main/foreground thread.
                </para>
                <para>
                    Messages are delivered asynchronously.
                    It means that the messages are not immediately delivered to the respective receivers when sent.
                    Instead, the messages are put into a queue and are delivered from there during certain points in time of a frame cycle.
                    The only exception to this is when the priority <legacyItalic>Now</legacyItalic> is used, which will deliver the message immediately and from the thread which does the sending.
                </para>
                <para>
                    Each message has a
                    <codeEntityReference qualifyHint="false">T:RI.Framework.Services.Dispatcher.DispatcherPriority</codeEntityReference>
                    which defines at which point in time during a frame cycle the message is delivered.
                </para>
            </content>
        </section>

        <section address="StandaloneUse">
            <title>Standalone use</title>
            <content>
                <para>
                    You can use the dispatcher service as a standalone service.
                    Just create an instance:
                </para>
                <code language="cs">
                    <![CDATA[
DispatcherService dispatcher = new DispatcherService();
                    ]]>
                </code>
            </content>
        </section>

        <section address="MultipleInstances">
            <title>Multiple instances</title>
            <content>
                <para>
                    It is also possible to create multiple independent instances of the dispatcher service.
                </para>
            </content>
        </section>

        <relatedTopics />

    </developerConceptualDocument>
</topic>