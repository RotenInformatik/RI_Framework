<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RI.Framework.Unity</name>
    </assembly>
    <members>
        <member name="T:RI.Framework.Collections.Specialized.PrefabPool">
            <summary>
                Implements a pool which creates items by instantiating from a prefab.
            </summary>
            <remarks>
                <para>
                    The prefab can be any <c> GameObject </c>.
                    <c> Object.Instantiate() </c> is used to create new items from the prefab.
                    When a free item is removed from the pool, <c> Object.Destroy() </c> is used to dispose the item.
                </para>
                <para>
                    The prefab itself is never used as an item or taken from the pool respectively, it is only used for instantiation.
                </para>
                <para>
                    This pool implementation supports <see cref="T:RI.Framework.Collections.ObjectModel.IPoolAware" />.
                    See <see cref="T:RI.Framework.Collections.ObjectModel.PoolBase`1" /> for more details.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Collections.Specialized.PrefabPool.#ctor(UnityEngine.GameObject)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Collections.Specialized.PrefabPool" />.
            </summary>
            <param name="prefab"> The prefab the items of this pool are instantiated from. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="prefab" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.Specialized.PrefabPool.#ctor(UnityEngine.GameObject,System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Collections.Specialized.PrefabPool" />.
            </summary>
            <param name="prefab"> The prefab the items of this pool are instantiated from. </param>
            <param name="count"> The amount of initial free items in the pool. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="prefab" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="count" /> is less than zero. </exception>
        </member>
        <member name="P:RI.Framework.Collections.Specialized.PrefabPool.AutoActivate">
            <summary>
                Gets or sets whether the items are activated when taken.
            </summary>
            <value>
                true if the items are activated when taken, false otherwise.
            </value>
            <remarks>
                <para>
                    The default value is false.
                </para>
                <para>
                    <c> GameObject.SetActive() </c> is used for activation.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Framework.Collections.Specialized.PrefabPool.AutoDeactivate">
            <summary>
                Gets or sets whether the items are deactivated when returned.
            </summary>
            <value>
                true if the items are deactivated when taken, false otherwise.
            </value>
            <remarks>
                <para>
                    The default value is false.
                </para>
                <para>
                    <c> GameObject.SetActive() </c> is used for deactivation.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Framework.Collections.Specialized.PrefabPool.Prefab">
            <summary>
                The original prefab from which all the items of this pool are instantiated from.
            </summary>
            <value>
                The original prefab as specified during construction of this instance.
            </value>
            <remarks>
                <note type="important">
                    Be careful when manipulating the prefab.
                    Already instantiated items are not affected, only items made after the manipulation.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Framework.Collections.Specialized.PrefabPool.Create">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Collections.Specialized.PrefabPool.OnRemoved(UnityEngine.GameObject)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Collections.Specialized.PrefabPool.OnReturned(UnityEngine.GameObject)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Collections.Specialized.PrefabPool.OnTaking(UnityEngine.GameObject)">
            <inheritdoc />
        </member>
        <member name="T:RI.Framework.Collections.Specialized.ClonePool`1">
            <summary>
                Implements a pool which creates items by cloning from a prototype.
            </summary>
            <typeparam name="T"> The type of objects which can be stored and recycled by the pool. </typeparam>
            <remarks>
                <para>
                    The prototype can be any object which implements <see cref="T:System.ICloneable" /> or <see cref="T:RI.Framework.Utilities.ObjectModel.ICloneable`1" />.
                    <see cref="M:System.ICloneable.Clone" /> is used to create new items from the prototype.
                </para>
                <para>
                    The prototype itself is never used as an item or taken from the pool respectively, it is only used for cloning.
                </para>
                <para>
                    This pool implementation supports <see cref="T:RI.Framework.Collections.ObjectModel.IPoolAware" />.
                    See <see cref="T:RI.Framework.Collections.ObjectModel.PoolBase`1" /> for more details.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Collections.Specialized.ClonePool`1.#ctor(`0)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Collections.Specialized.ClonePool`1" />.
            </summary>
            <param name="prototype"> The prototype object the items of this pool are cloned from. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="prototype" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.Specialized.ClonePool`1.#ctor(`0,System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Collections.Specialized.ClonePool`1" />.
            </summary>
            <param name="prototype"> The prototype object the items of this pool are cloned from. </param>
            <param name="count"> The amount of initial free items in the pool. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="prototype" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="count" /> is less than zero. </exception>
        </member>
        <member name="P:RI.Framework.Collections.Specialized.ClonePool`1.Prototype">
            <summary>
                Gets the original prototype from which all the items of this pool are cloned from.
            </summary>
            <value>
                The original prototype from which all the items of this pool are cloned from.
            </value>
            <remarks>
                <note type="important">
                    Be careful when manipulating the prototype.
                    Already cloned items are not affected, only items made after the manipulation.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Framework.Collections.Specialized.ClonePool`1.Create">
            <inheritdoc />
        </member>
        <member name="T:RI.Framework.Collections.Specialized.NamespaceDoc">
            <summary>
                Contains specialized collection types.
            </summary>
        </member>
        <member name="T:RI.Framework.Collections.Comparison.CollectionComparer`1">
            <summary>
                Implements an <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> for comparing collections and their elements.
            </summary>
            <typeparam name="T"> The type of the elements in the collections being compared for equality. </typeparam>
            <remarks>
                <note type="note">
                    Two collections are considered equal if they contain the same number of elements and each element in one collection has an equal element in the other collection.
                    The collections themselves are not compared for equality, only their elements.
                </note>
                <note type="important">
                    Therefore, this implementation of <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> is only intended for equality comparison of elements of collections.
                    It should not be used in scenarios where hash values of the collections themselves are used, e.g. used as a hash provider for the collections when storing the collections in another collection (e.g. storing collections in a <see cref="T:System.Collections.Generic.HashSet`1" />).
                </note>
            </remarks>
            <example>
                <para>
                    The following example shows how a <see cref="T:RI.Framework.Collections.Comparison.CollectionComparer`1" /> can be used to compare two collections containing strings:
                </para>
                <code language="cs">
            <![CDATA[
            // create some collections of strings we want to compare
            var upperCaseAscending  = new List<string>    { "ANDREW", "BOB", "CHARLES" };
            var lowerCaseDescending = new List<string>    { "charles", "bob", "andrew" };
            var mixedCase           = new HashSet<string> { "Andrew", "Charles", "Bob" };
            
            // create collection comparer with case-insensitive string comparison
            var comparer = new CollectionComparer<string>(StringComparer.OrdinalIgnoreCase);
            
            comparer.Equals(upperCaseAscending, lowerCaseDescending); // returns "false"
            comparer.Equals(upperCaseAscending, mixedCase);           // undefined, HashSet<T> does not guarantee the order its elements are enumerated
            comparer.Equals(lowerCaseDescending, mixedCase);          // undefined, HashSet<T> does not guarantee the order its elements are enumerated
            
            // create collection comparer with case-insensitive string comparison and ignore order
            comparer = new CollectionComparer<string>(CollectionComparerFlags.IgnoreOrder, StringComparer.OrdinalIgnoreCase);
            
            comparer.Equals(upperCaseAscending, lowerCaseDescending); // returns "true"
            comparer.Equals(upperCaseAscending, mixedCase);           // returns "true"
            comparer.Equals(lowerCaseDescending, mixedCase);          // returns "true"
            ]]>
            </code>
            </example>
        </member>
        <member name="P:RI.Framework.Collections.Comparison.CollectionComparer`1.Default">
            <summary>
                Provides default collection comparison behaviour: Element equality comparison is based on the type of <typeparamref name="T" /> (using <see cref="T:System.Collections.Generic.EqualityComparer`1" />.<see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />) -and- order of elements matters.
            </summary>
            <value>
                The collection comparer.
            </value>
        </member>
        <member name="P:RI.Framework.Collections.Comparison.CollectionComparer`1.DefaultIgnoreOrder">
            <summary>
                Provides default collection comparison behaviour: Element equality comparison is based on the type of <typeparamref name="T" /> (using <see cref="T:System.Collections.Generic.EqualityComparer`1" />.<see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />) -and- order of elements is ignored.
            </summary>
            <value>
                The collection comparer.
            </value>
        </member>
        <member name="P:RI.Framework.Collections.Comparison.CollectionComparer`1.ReferenceEquality">
            <summary>
                Provides specialized collection comparison behaviour: Only elements of the same reference are equal (using <see cref="T:System.Object" />.<see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)" />) -and- order of elements matters.
            </summary>
            <value>
                The collection comparer.
            </value>
        </member>
        <member name="P:RI.Framework.Collections.Comparison.CollectionComparer`1.ReferenceEqualityIgnoreOrder">
            <summary>
                Provides specialized collection comparison behaviour: Only elements of the same reference are equal (using <see cref="T:System.Object" />.<see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)" />) -and- order of elements is ignored.
            </summary>
            <value>
                The collection comparer.
            </value>
        </member>
        <member name="M:RI.Framework.Collections.Comparison.CollectionComparer`1.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Collections.Comparison.CollectionComparer`1" />.
            </summary>
            <remarks>
                <para>
                    <see cref="T:RI.Framework.Collections.Comparison.CollectionComparerFlags" />.<see cref="F:RI.Framework.Collections.Comparison.CollectionComparerFlags.None" /> is used as comparison options.
                </para>
                <para>
                    Equality of elements is compared using the default equality comparer for the type of <typeparamref name="T" />, using <see cref="T:System.Collections.Generic.EqualityComparer`1" />.<see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Collections.Comparison.CollectionComparer`1.#ctor(RI.Framework.Collections.Comparison.CollectionComparerFlags)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Collections.Comparison.CollectionComparer`1" />.
            </summary>
            <param name="options"> The used comparison options. </param>
            <remarks>
                <para>
                    Equality of elements is compared using the default equality comparer for the type of <typeparamref name="T" />, using <see cref="T:System.Collections.Generic.EqualityComparer`1" />.<see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Collections.Comparison.CollectionComparer`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Collections.Comparison.CollectionComparer`1" />.
            </summary>
            <param name="comparer"> The equality comparer used to compare elements for equality. Can be null to use the default equality comparer (<see cref="T:System.Collections.Generic.EqualityComparer`1" />.<see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />). </param>
            <remarks>
                <para>
                    <see cref="T:RI.Framework.Collections.Comparison.CollectionComparerFlags" />.<see cref="F:RI.Framework.Collections.Comparison.CollectionComparerFlags.None" /> is used as comparison options.
                </para>
                <para>
                    Equality of elements is compared using the specified equality comparer.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentException"> <paramref name="comparer" /> is not null and <see cref="T:RI.Framework.Collections.Comparison.CollectionComparerFlags" />.<see cref="F:RI.Framework.Collections.Comparison.CollectionComparerFlags.ReferenceEquality" /> is specifiead as comparison options. </exception>
        </member>
        <member name="M:RI.Framework.Collections.Comparison.CollectionComparer`1.#ctor(System.Func{`0,`0,System.Boolean})">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Collections.Comparison.CollectionComparer`1" />.
            </summary>
            <param name="comparer"> The function used to compare elements for equality. Can be null to use the default equality comparer (<see cref="T:System.Collections.Generic.EqualityComparer`1" />.<see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />). </param>
            <remarks>
                <para>
                    <see cref="T:RI.Framework.Collections.Comparison.CollectionComparerFlags" />.<see cref="F:RI.Framework.Collections.Comparison.CollectionComparerFlags.None" /> is used as comparison options.
                </para>
                <para>
                    Equality of elements is compared using the specified function.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentException"> <paramref name="comparer" /> is not null and <see cref="T:RI.Framework.Collections.Comparison.CollectionComparerFlags" />.<see cref="F:RI.Framework.Collections.Comparison.CollectionComparerFlags.ReferenceEquality" /> is specifiead as comparison options. </exception>
        </member>
        <member name="M:RI.Framework.Collections.Comparison.CollectionComparer`1.#ctor(RI.Framework.Collections.Comparison.CollectionComparerFlags,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Collections.Comparison.CollectionComparer`1" />.
            </summary>
            <param name="options"> The used comparison options. </param>
            <param name="comparer"> The equality comparer used to compare elements for equality. Can be null to use the default equality comparer (<see cref="T:System.Collections.Generic.EqualityComparer`1" />.<see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />) or when reference equality is used (<see cref="T:RI.Framework.Collections.Comparison.CollectionComparerFlags" />.<see cref="F:RI.Framework.Collections.Comparison.CollectionComparerFlags.ReferenceEquality" /> with <paramref name="options" />). </param>
            <remarks>
                <para>
                    Equality of elements is compared using the specified equality comparer.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentException"> <paramref name="comparer" /> is not null and <see cref="T:RI.Framework.Collections.Comparison.CollectionComparerFlags" />.<see cref="F:RI.Framework.Collections.Comparison.CollectionComparerFlags.ReferenceEquality" /> is specifiead as comparison options. </exception>
        </member>
        <member name="M:RI.Framework.Collections.Comparison.CollectionComparer`1.#ctor(RI.Framework.Collections.Comparison.CollectionComparerFlags,System.Func{`0,`0,System.Boolean})">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Collections.Comparison.CollectionComparer`1" />.
            </summary>
            <param name="options"> The used comparison options. </param>
            <param name="comparer"> The function used to compare elements for equality. Can be null to use the default equality comparer (<see cref="T:System.Collections.Generic.EqualityComparer`1" />.<see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />) or when reference equality is used (<see cref="T:RI.Framework.Collections.Comparison.CollectionComparerFlags" />.<see cref="F:RI.Framework.Collections.Comparison.CollectionComparerFlags.ReferenceEquality" /> with <paramref name="options" />). </param>
            <remarks>
                <para>
                    Equality of elements is compared using the specified function.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentException"> <paramref name="comparer" /> is not null and <see cref="T:RI.Framework.Collections.Comparison.CollectionComparerFlags" />.<see cref="F:RI.Framework.Collections.Comparison.CollectionComparerFlags.ReferenceEquality" /> is specifiead as comparison options. </exception>
        </member>
        <member name="P:RI.Framework.Collections.Comparison.CollectionComparer`1.Comparer">
            <summary>
                Gets the used function which compares elements for equality.
            </summary>
            <value>
                The used function which compares elements for equality.
            </value>
            <remarks>
                <para>
                    This delegate always points to the function which eventually does the comparison between two elements of the collections being compared.
                    If <see cref="T:RI.Framework.Collections.Comparison.CollectionComparer`1" /> is constructed using an <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> or is using default equality comparison (using <see cref="T:System.Collections.Generic.EqualityComparer`1" />.<see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />), the delegate points to the <see cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)" /> method of that equality comparer.
                    If <see cref="T:RI.Framework.Collections.Comparison.CollectionComparer`1" /> is constructed using comparison function, the delegate points to that function.
                    If the <see cref="T:RI.Framework.Collections.Comparison.CollectionComparer`1" /> uses reference equality, the delegate points to an anonymous function which encapsulates <see cref="T:System.Object" />.<see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)" />.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Framework.Collections.Comparison.CollectionComparer`1.Options">
            <summary>
                Gets the used comparison options.
            </summary>
            <value>
                The used comparison options.
            </value>
        </member>
        <member name="M:RI.Framework.Collections.Comparison.CollectionComparer`1.Equals(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Determines whether two specified collections, or their elements respectively, are considered equal.
            </summary>
            <param name="x"> The first collection to compare with <paramref name="y" />. </param>
            <param name="y"> The second collection to compare with <paramref name="x" />. </param>
            <returns>
                true if the collections are considered equal, false otherwise.
                true is returned if both <paramref name="x" /> and <paramref name="y" /> are null.
                false is returned if only one of <paramref name="x" /> and <paramref name="y" /> is null.
            </returns>
            <remarks>
                <para>
                    <paramref name="x" /> and <paramref name="y" /> are each enumerated exactly once.
                    <paramref name="x" /> and <paramref name="y" /> are not enumerated if both are the same reference or either one is null.
                </para>
                <para>
                    This is a O(n*m) operation if order is ignored or a O(n+m) operation if order is not ignored, where n is the number of elements in <paramref name="x" /> and m is the number of elements in <paramref name="y" />.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Collections.Comparison.CollectionComparer`1.System#Collections#Generic#IEqualityComparer{System#Collections#Generic#IEnumerable{T}}#GetHashCode(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Determines the hash value of a specified collection.
            </summary>
            <param name="obj"> The collection. </param>
            <returns>
                The hash value of the collection.
            </returns>
            <remarks>
                <note type="important">
                    The hash value is not based on the elements in the collection but on the collection itself (the collections own <see cref="M:System.Object.GetHashCode" /> method is used).
                </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="obj" /> is null. </exception>
        </member>
        <member name="T:RI.Framework.Collections.Comparison.CollectionComparerFlags">
            <summary>
                Specifies comparison options when using <see cref="T:RI.Framework.Collections.Comparison.CollectionComparer`1" /> to compare two collections.
            </summary>
        </member>
        <member name="F:RI.Framework.Collections.Comparison.CollectionComparerFlags.None">
            <summary>
                No options.
            </summary>
        </member>
        <member name="F:RI.Framework.Collections.Comparison.CollectionComparerFlags.IgnoreOrder">
            <summary>
                Two collections are also considered equal if their elements are equal but in different orders.
            </summary>
        </member>
        <member name="F:RI.Framework.Collections.Comparison.CollectionComparerFlags.ReferenceEquality">
            <summary>
                Two collections are only considered equal if their elements are of the same reference, regardless of the elements own behaviour regarding equality.
            </summary>
        </member>
        <member name="T:RI.Framework.Collections.Comparison.NamespaceDoc">
            <summary>
                Contains utilities for customized comparing of collections.
            </summary>
        </member>
        <member name="T:RI.Framework.Collections.Generic.IWarehouse`1">
            <summary>
                Defines a generic interface for &quot;warehouses&quot; which can be used to efficiently store very large amounts of items.
            </summary>
            <typeparam name="T"> The type of items stored in the warehouse. </typeparam>
            <remarks>
                <para>
                    A warehouse uses bays to store the items.
                    One item is stored in one bay and one bay is used to store one item.
                    <see cref="P:RI.Framework.Collections.Generic.IWarehouse`1.Storage" /> is the array which contains all the bays.
                </para>
                <para>
                    Each bay is identified by a number, provided and used by <see cref="M:RI.Framework.Collections.Generic.IWarehouse`1.Reserve" /> and <see cref="M:RI.Framework.Collections.Generic.IWarehouse`1.Release(System.Int32)" />.
                    That number can be used to directly access the bays by using it as an index for the <see cref="P:RI.Framework.Collections.Generic.IWarehouse`1.Storage" /> array.
                    Zero is always used as an equivalent of &quot;invalid&quot; or &quot;null&quot; (sorry to all C/C++ developers who now have nightmares about <c> #define NULL (0) </c>).
                </para>
                <para>
                    This allows to use <see cref="T:System.Int32" />s instead of object references for the items, effectively containing the object references to the <see cref="T:RI.Framework.Collections.Generic.Warehouse`1" />.
                    It also allows to provide a very efficient way to allocate and deallocate storage for items.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Framework.Collections.Generic.IWarehouse`1.Free">
            <summary>
                Gets the amount of free bays.
            </summary>
            <value>
                The amount of free bays.
            </value>
        </member>
        <member name="P:RI.Framework.Collections.Generic.IWarehouse`1.Size">
            <summary>
                Gets the total amount of bays.
            </summary>
            <value>
                The total amount of bays.
            </value>
        </member>
        <member name="P:RI.Framework.Collections.Generic.IWarehouse`1.Storage">
            <summary>
                Gets the array containing all the bays.
            </summary>
            <value>
                The array containing all the bays.
            </value>
            <remarks>
                <note type="important">
                    Do not use the length of the array to determine the total amount of bays, always use the <see cref="P:RI.Framework.Collections.Generic.IWarehouse`1.Size" /> property.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Framework.Collections.Generic.IWarehouse`1.Release(System.Int32)">
            <summary>
                Releases a bay.
            </summary>
            <param name="bay"> The bay to be released. </param>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="bay" /> is either less than one or larger than the storage size. </exception>
        </member>
        <member name="M:RI.Framework.Collections.Generic.IWarehouse`1.Reserve">
            <summary>
                Determines and reserves the next free bay.
            </summary>
            <returns>
                The next free bay or zero if no more free bays are available.
            </returns>
        </member>
        <member name="T:RI.Framework.Collections.Generic.Warehouse`1">
            <summary>
                Implements a simple warehouse.
            </summary>
            <typeparam name="T"> The type of items stored in the warehouse. </typeparam>
            <remarks>
                <para>
                    A <see cref="T:RI.Framework.Collections.Generic.Warehouse`1" /> only manages the bays and provides the storage.
                    The items themselves must be managed by whatever uses the <see cref="T:RI.Framework.Collections.Generic.Warehouse`1" />.
                    <see cref="T:RI.Framework.Collections.Generic.Warehouse`1" /> never touches the contents of <see cref="P:RI.Framework.Collections.Generic.Warehouse`1.Storage" />.
                </para>
            </remarks>
            <example>
                <para>
                    The following example shows how a <see cref="T:RI.Framework.Collections.Generic.Warehouse`1" /> can be used to store items:
                </para>
                <code language="cs">
            <![CDATA[
            // create a new warehouse and get its storage
            var warehouse = new Warehouse<MyObject>(100000);
            var storage = warehouse.Storage;
            
            // reserve a bay
            var bay = warehouse.Reserve();
            
            // store an item in the bay
            storage[bay] = new MyObject();
            
            //...do something with the warehouse and its bays wherever and as long as necessary...
            
            //release the bay when it is no longer used
            warehouse.Release(bay);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:RI.Framework.Collections.Generic.Warehouse`1.#ctor(System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Collections.Generic.Warehouse`1" />.
            </summary>
            <param name="size"> The total amount of bays. </param>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="size" /> is less than one. </exception>
        </member>
        <member name="P:RI.Framework.Collections.Generic.Warehouse`1.Free">
            <inheritdoc />
        </member>
        <member name="P:RI.Framework.Collections.Generic.Warehouse`1.Size">
            <inheritdoc />
        </member>
        <member name="P:RI.Framework.Collections.Generic.Warehouse`1.Storage">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Collections.Generic.Warehouse`1.Release(System.Int32)">
            <inheritdoc />
            <remarks>
                <para>
                    This is a O(1) operation.
                </para>
                <note type="important">
                    For performance reasons, <see cref="M:RI.Framework.Collections.Generic.Warehouse`1.Release(System.Int32)" /> does not check whether a bay was already released.
                    If a bay is released which is already released, unpredictable behaviour occurs.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Framework.Collections.Generic.Warehouse`1.Reserve">
            <inheritdoc />
            <remarks>
                <para>
                    This is a O(1) operation.
                </para>
            </remarks>
        </member>
        <member name="T:RI.Framework.Collections.Generic.NamespaceDoc">
            <summary>
                Contains generic collection types.
            </summary>
        </member>
        <member name="T:RI.Framework.Collections.HashSetExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.Collections.Generic.HashSet`1" /> type.
            </summary>
        </member>
        <member name="M:RI.Framework.Collections.HashSetExtensions.AddRange``1(System.Collections.Generic.HashSet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Adds multiple items to a hash set.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="hashSet" />. </typeparam>
            <param name="hashSet"> The hash set. </param>
            <param name="items"> The sequence of items to add to the hash set. </param>
            <returns>
                The number of items added to the hash set.
            </returns>
            <remarks>
                <para>
                    <paramref name="items" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="hashSet" /> or <paramref name="items" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.HashSetExtensions.RemoveRange``1(System.Collections.Generic.HashSet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Removes multiple items from a hash set.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="hashSet" />. </typeparam>
            <param name="hashSet"> The hash set. </param>
            <param name="items"> The sequence of items to remove from the hash set. </param>
            <returns>
                The number of items removed from the hash set.
            </returns>
            <remarks>
                <para>
                    <paramref name="items" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="hashSet" /> or <paramref name="items" /> is null. </exception>
        </member>
        <member name="T:RI.Framework.Collections.ICollectionExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.Collections.Generic.ICollection`1" /> type and its implementations.
            </summary>
        </member>
        <member name="M:RI.Framework.Collections.ICollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Adds multiple items to a collection.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="collection" />. </typeparam>
            <param name="collection"> The collection. </param>
            <param name="items"> The sequence of items to add to the collection. </param>
            <returns>
                The number of items added to the collection.
            </returns>
            <remarks>
                <para>
                    <paramref name="items" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="collection" /> or <paramref name="items" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.ICollectionExtensions.AsCollection``1(System.Collections.Generic.ICollection{``0})">
            <summary>
                Converts any instance implementing <see cref="T:System.Collections.Generic.ICollection`1" /> to an explicit <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="collection" />. </typeparam>
            <param name="collection"> The instance implementing <see cref="T:System.Collections.Generic.ICollection`1" />. </param>
            <returns>
                The instance as explicit <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
            <remarks>
                <para>
                    A conversion to an explicit <see cref="T:System.Collections.Generic.ICollection`1" /> can be useful in cases where the utility/extension methods of <see cref="T:System.Collections.Generic.ICollection`1" /> shall be used instead of the ones implemented by the instance itself.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="collection" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.ICollectionExtensions.RemoveAll``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
                Removes all occurences of an item from a collection.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="collection" />. </typeparam>
            <param name="collection"> The collection. </param>
            <param name="item"> The item to remove from the collection. </param>
            <returns>
                The number of items removed from the collection.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="collection" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.ICollectionExtensions.RemoveAllRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Removes all occurences of multiple items from a collection.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="collection" />. </typeparam>
            <param name="collection"> The collection. </param>
            <param name="items"> The sequence of items to remove from the collection. </param>
            <returns>
                The number of items removed from the collection.
            </returns>
            <remarks>
                <para>
                    <paramref name="items" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="collection" /> or <paramref name="items" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.ICollectionExtensions.RemoveRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Removes multiple items from a collection.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="collection" />. </typeparam>
            <param name="collection"> The collection. </param>
            <param name="items"> The sequence of items to remove from the collection. </param>
            <returns>
                The number of items removed from the collection.
            </returns>
            <remarks>
                <para>
                    <paramref name="items" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="collection" /> or <paramref name="items" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.ICollectionExtensions.RemoveWhere``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean})">
            <summary>
                Removes all items which satisfy a condition from a collection.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="collection" />. </typeparam>
            <param name="collection"> The collection. </param>
            <param name="condition"> The function which tests each item for a condition, providing the item itself. </param>
            <returns>
                The list of removed items.
                The list is empty if no elements were removed.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="collection" /> or <paramref name="condition" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.ICollectionExtensions.RemoveWhere``1(System.Collections.Generic.ICollection{``0},System.Func{System.Int32,``0,System.Boolean})">
            <summary>
                Removes all items which satisfy a condition from a collection.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="collection" />. </typeparam>
            <param name="collection"> The collection. </param>
            <param name="condition"> The function which tests each item for a condition, providing the items index and the item itself. </param>
            <returns>
                The list of removed items.
                The list is empty if no elements were removed.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="collection" /> or <paramref name="condition" /> is null. </exception>
        </member>
        <member name="T:RI.Framework.Collections.IDictionaryExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.Collections.Generic.IDictionary`2" /> type and its implementations.
            </summary>
        </member>
        <member name="M:RI.Framework.Collections.IDictionaryExtensions.AddOrReplace``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
                Adds a new value to or replaces an existing value in a dictionary, based on the specified key.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <param name="key"> The key corresponding to the value to add or replace. </param>
            <param name="value"> The value to add or replace. </param>
            <returns>
                true if the key did not already exist in the dictionary and was added, false if the key already existed and the existing value was overwritten.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IDictionaryExtensions.AsDictionary``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
                Converts any instance implementing <see cref="T:System.Collections.Generic.IDictionary`2" /> to an explicit <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The instance implementing <see cref="T:System.Collections.Generic.IDictionary`2" />. </param>
            <returns>
                The instance as explicit <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </returns>
            <remarks>
                <para>
                    A conversion to an explicit <see cref="T:System.Collections.Generic.IDictionary`2" /> can be useful in cases where the utility/extension methods of <see cref="T:System.Collections.Generic.IDictionary`2" /> shall be used instead of the ones implemented by the instance itself.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IDictionaryExtensions.ContainsKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Determines whether a dictionary contains a specified key.
                Comparison is done using the specified equality comparer.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <param name="key"> The key to find in the dictionary. </param>
            <param name="comparer"> The equality comparer used to compare the specified key and the keys in the dictionary to look for a match. </param>
            <returns>
                true if the dictionary contains the key, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IDictionaryExtensions.ContainsKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``0,System.Boolean})">
            <summary>
                Determines whether a dictionary contains a specified key.
                Comparison is done using the specified function.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <param name="key"> The key to find in the dictionary. </param>
            <param name="comparer"> The function used to compare the specified key and the keys in the dictionary to look for a match. </param>
            <returns>
                true if the dictionary contains the key, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IDictionaryExtensions.ContainsValue``2(System.Collections.Generic.IDictionary{``0,``1},``1)">
            <summary>
                Determines whether a dictionary contains a specified value.
                Comparison is done using the default equality comparison.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <param name="value"> The value to find in the dictionary. </param>
            <returns>
                true if the dictionary contains the value at least once, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IDictionaryExtensions.ContainsValue``2(System.Collections.Generic.IDictionary{``0,``1},``1,System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
                Determines whether a dictionary contains a specified value.
                Comparison is done using the specified equality comparer.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <param name="value"> The value to find in the dictionary. </param>
            <param name="comparer"> The equality comparer used to compare the specified key and the keys in the dictionary to look for a match. </param>
            <returns>
                true if the dictionary contains the value at least once, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IDictionaryExtensions.ContainsValue``2(System.Collections.Generic.IDictionary{``0,``1},``1,System.Func{``1,``1,System.Boolean})">
            <summary>
                Determines whether a dictionary contains a specified value.
                Comparison is done using the specified function.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <param name="value"> The value to find in the dictionary. </param>
            <param name="comparer"> The function used to compare the specified key and the keys in the dictionary to look for a match. </param>
            <returns>
                true if the dictionary contains the value at least once, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IDictionaryExtensions.GetKeys``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
                Gets all keys of a dictionary.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <returns>
                The list which contains all the keys of the dictionary.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IDictionaryExtensions.GetKeys``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},System.Boolean})">
            <summary>
                Gets all keys of a dictionary where the key-value-pair satisfy a specified condition.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <param name="condition"> The function which tests each key-value-pair for a condition. </param>
            <returns>
                The list which contains all the keys of the dictionary where the corresponding key-value-pair satisfied the specified condition.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> or <paramref name="condition" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IDictionaryExtensions.GetValues``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
                Gets all values of a dictionary.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <returns>
                The list which contains all the values of the dictionary.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IDictionaryExtensions.GetValues``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},System.Boolean})">
            <summary>
                Gets all values of a dictionary where the key-value-pair satisfy a specified condition.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <param name="condition"> The function which tests each key-value-pair for a condition. </param>
            <returns>
                The list which contains all the values of the dictionary where the corresponding key-value-pair satisfied the specified condition.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> or <paramref name="condition" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IDictionaryExtensions.RemoveRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Removes multiple key-value-pairs based on multiple keys from a dictionary.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <param name="keys"> The sequence of keys to remove from the dictionary. </param>
            <returns>
                The number of key-value-pairs removed from the dictionary.
            </returns>
            <remarks>
                <para>
                    <paramref name="keys" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> or <paramref name="keys" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IDictionaryExtensions.RemoveWhere``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},System.Boolean})">
            <summary>
                Removes all key-value-pairs from a dictionary which satisfy a specified condition.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <param name="condition"> The function which tests each key-value-pair for a condition. </param>
            <returns>
                The list of key-value-pairs removed from the dictionary.
                The list is empty if no key-value-pairs were removed.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> or <paramref name="condition" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IDictionaryExtensions.Transform``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},``1})">
            <summary>
                Transforms the value of each key-value-pair in a dictionary according to a specified transform function.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <param name="transform"> The transform function which determines a new value for each key-value-pair in the dictionary. </param>
            <returns>
                The number of transformed key-value-pairs.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> or <paramref name="transform" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IDictionaryExtensions.TryAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
                Adds a new value to a dictionary if the specified key does not already exist in the dictionary.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <param name="key"> The key to add. </param>
            <param name="value"> The value to add. </param>
            <returns>
                true if the key did not already exist in the dictionary and was added, false if the key already existed and the existing value was not overwritten.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> is null. </exception>
        </member>
        <member name="T:RI.Framework.Collections.IEnumerableExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.Collections.Generic.IEnumerable`1" /> type and its implementations.
            </summary>
            <remarks>
                <para>
                    <note type="important">
                        The complexity stated for the operations provided by this class are under the assumption that enumerating an <see cref="T:System.Collections.Generic.IEnumerable`1" /> has a complexity of O(n) where n is the number of elements in the sequence.
                    </note>
                    <note type="note">
                        These utility/extension methods provide a LINQ replacement which is AOT-compatible and uses non-deferred execution.
                    </note>
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Determines whether all elements of a sequence satisfy a specified condition.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="condition"> The function which tests each element for a condition, providing the element itself. </param>
            <returns>
                true if all elements satisfy the condition, false otherwise.
                The return value is false if the sequence contains no elements.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated only once and only up to the element which first does not satisfy the condition.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="condition" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32,``0,System.Boolean})">
            <summary>
                Determines whether all elements of a sequence satisfy a specified condition.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="condition"> The function which tests each element for a condition, providing the elements index and the element itself. </param>
            <returns>
                true if all elements satisfy the condition, false otherwise.
                The return value is false if the sequence contains no elements.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated only once and only up to the element which first does not satisfy the condition.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="condition" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.All``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
                Determines whether a sequence consists of only the specified element.
                Comparison is done using the default equality comparison.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="item"> The element the sequence should only consist of. </param>
            <returns>
                true if the sequence consists only of the specified element, false otherwise.
                The return value is false if the sequence contains no elements.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated only once and only up to the element which first does not match the specified element.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.All``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Determines whether a sequence consists of only the specified element.
                Comparison is done using the specified equality comparer.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="item"> The element the sequence should only consist of. </param>
            <param name="comparer"> The equality comparer used to compare the specified element and the elements in the sequence to look for a match. </param>
            <returns>
                true if the sequence consists only of the specified element, false otherwise.
                The return value is false if the sequence contains no elements.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated only once and only up to the element which first does not match the specified element.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.All``1(System.Collections.Generic.IEnumerable{``0},``0,System.Func{``0,``0,System.Boolean})">
            <summary>
                Determines whether a sequence consists of only the specified element.
                Comparison is done using the specified function.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="item"> The element the sequence should only consist of. </param>
            <param name="comparer"> The function used to compare the specified element and the elements in the sequence to look for a match. </param>
            <returns>
                true if the sequence consists only of the specified element, false otherwise.
                The return value is false if the sequence contains no elements.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated only once and only up to the element which first does not match the specified element.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Any``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Determines whether a sequence has any elements.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <returns>
                true if the sequence contains one or more elements, false otherwise.
            </returns>
            <remarks>
                <para>
                    This is a O(1) operation.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated only once and only up to the first element.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Determines whether a sequence has any elements which satisfy a specified condition.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="condition"> The function which tests each element for a condition, providing the element itself. </param>
            <returns>
                true if the sequence contains one or more elements which satisfy the condition, false otherwise.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated only once and only up to the first element which satisfies the condition.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="condition" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32,``0,System.Boolean})">
            <summary>
                Determines whether a sequence has any elements which satisfy a specified condition.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="condition"> The function which tests each element for a condition, providing the elements index and the element itself. </param>
            <returns>
                true if the sequence contains one or more elements which satisfy the condition, false otherwise.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated only once and only up to the first element which satisfies the condition.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="condition" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Any``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Determines whether a sequence has any elements at a specified index.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="index"> The index at which an element is expected. </param>
            <returns>
                true if the sequence contains an element at the specified index, false otherwise.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated only once and only up to the specified index.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="index" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Converts any instance implementing <see cref="T:System.Collections.Generic.IEnumerable`1" /> to an explicit <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The instance implementing <see cref="T:System.Collections.Generic.IEnumerable`1" />. </param>
            <returns>
                The instance as explicit <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </returns>
            <remarks>
                <para>
                    A conversion to an explicit <see cref="T:System.Collections.Generic.IEnumerable`1" /> can be useful in cases where the utility/extension methods of <see cref="T:System.Collections.Generic.IEnumerable`1" /> shall be used instead of the ones implemented by the instance itself.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Cast``1(System.Collections.IEnumerable)">
            <summary>
                Hard-casts each element of a sequence into a new list.
                An exception is thrown if an element is incompatible to the target type and cannot be converted.
            </summary>
            <typeparam name="T"> The target type the elements are casted into. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <returns>
                The list which contains the casted elements in the order they were enumerated.
                The list is empty if the sequence contains no elements.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> is null. </exception>
            <exception cref="T:System.InvalidCastException"> At least one element cannot be casted into <typeparamref name="T" />. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Concatenates all elements of two sequences into a new list.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="first" /> and <paramref name="second" />. </typeparam>
            <param name="first"> The first sequence (whose elements appear at the beginning of the resulting list). </param>
            <param name="second"> The second sequence (whose elements appear at the end of the resulting list). </param>
            <returns>
                The list which contains all the elements of both sequences in the order they were enumerated.
                The list is empty if both sequences are empty.
            </returns>
            <remarks>
                <para>
                    This is a O(n+m) operation where n is the number of elements in <paramref name="first" /> and m is the number of elements in <paramref name="second" />.
                </para>
                <para>
                    <paramref name="first" /> and <paramref name="second" /> are each enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="first" /> or <paramref name="second" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
                Determines whether a sequence contains a specified element.
                Comparison is done using the default equality comparison.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="item"> The element to find in the sequence. </param>
            <returns>
                true if the sequence contains the item at least once, false otherwise.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated only once and only up to the element which first matches the specified element.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Determines whether a sequence contains a specified element.
                Comparison is done using the specified equality comparer.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="item"> The element to find in the sequence. </param>
            <param name="comparer"> The equality comparer used to compare the specified element and the elements in the sequence to look for a match. </param>
            <returns>
                true if the sequence contains the element at least once, false otherwise.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated only once and only up to the element which first matches the specified element.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Func{``0,``0,System.Boolean})">
            <summary>
                Determines whether a sequence contains a specified element.
                Comparison is done using the specified function.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="item"> The element to find in the sequence. </param>
            <param name="comparer"> The function used to compare the specified element and the elements in the sequence to look for a match. </param>
            <returns>
                true if the sequence contains the element at least once, false otherwise.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated only once and only up to the element which first matches the specified element.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Count``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Determines how many elements are in a sequence.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <returns>
                The amount of elements in the sequence.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once .
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Determines how many elements in a sequence satisfy a specified condition.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="condition"> The function which tests each element for a condition, providing the element itself. </param>
            <returns>
                The amount of elements in the sequence which satisfy the condition.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once .
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="condition" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32,``0,System.Boolean})">
            <summary>
                Determines how many elements in a sequence satisfy a specified condition.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="condition"> The function which tests each element for a condition, providing the elements index and the element itself. </param>
            <returns>
                The amount of elements in the sequence which satisfy the condition.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once .
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="condition" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Count``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Determines how many elements are located at and after a specified index.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="index"> The index at which counting begins. </param>
            <returns>
                The amount of elements in the sequence starting at the specified index.
                The return value is zero if the specified index is outside the length of the sequence.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once .
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="index" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Converts a sequence to a set, removing all duplicates.
                Comparison is done using the default equality comparison.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <returns>
                The set containing the elements of the sequence without duplicates.
                The set is empty if the sequence is empty.
            </returns>
            <remarks>
                <para>
                    This is a O(n^2) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Converts a sequence to a set, removing all duplicates.
                Comparison is done using the specified equality comparer.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="comparer"> The equality comparer used to compare the elements in the sequence to look for duplicates. </param>
            <returns>
                The set containing the elements of the sequence without duplicates.
                The set is empty if the sequence is empty.
            </returns>
            <remarks>
                <para>
                    This is a O(n^2) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
                Converts a sequence to a set, removing all duplicates.
                Comparison is done using the specified function.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="comparer"> The function used to compare the elements in the sequence to look for duplicates. </param>
            <returns>
                The set containing the elements of the sequence without duplicates.
                The set is empty if the sequence is empty.
            </returns>
            <remarks>
                <para>
                    This is a O(n^2) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Gets the element at a specified index in a sequence.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="index"> The index of the required element. </param>
            <returns>
                The element at the specified index.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated only once and only up to the specified index.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="index" /> is less than zero. </exception>
            <exception cref="T:System.InvalidOperationException"> The specified index is outside the length of the sequence. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Gets the element at a specified index in a sequence or the default value if the index does not exist.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="index"> The index of the required element. </param>
            <returns>
                The element at the specified index.
                If the specified index does not exist, the default value for <typeparamref name="T" /> is returned.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated only once and only up to the specified index.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="index" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0)">
            <summary>
                Gets the element at a specified index in a sequence or a default value if the index does not exist.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="index"> The index of the required element. </param>
            <param name="defaultValue"> The default value to return if the specified index does not exist. </param>
            <returns>
                The element at the specified index.
                If the specified index does not exist, the value of <paramref name="defaultValue" /> is returned.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated only once and only up to the specified index.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="index" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Converts a sequence to a set which only contains elements not existing in another sequence.
                Comparison is done using the default equality comparison.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="excluded"> The sequence whose elements are to be removed from the resulting set. </param>
            <returns>
                The set which contains all elements from <paramref name="enumerable" /> which are not in <paramref name="excluded" />.
                The set is empty if <paramref name="enumerable" /> is empty or all its elements are also in <paramref name="excluded" />.
            </returns>
            <remarks>
                <para>
                    This is a O(n*m) operation where n is the number of elements in <paramref name="enumerable" /> and m is the number of elements in <paramref name="excluded" />.
                </para>
                <para>
                    <paramref name="enumerable" /> and <paramref name="excluded" /> are each enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="excluded" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Converts a sequence to a set which only contains elements not existing in another sequence.
                Comparison is done using the specified equality comparer.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="excluded"> The sequence whose elements are to be removed from the resulting set. </param>
            <param name="comparer"> The equality comparer used to compare the elements in the sequences to look for matches. </param>
            <returns>
                The set which contains all elements from <paramref name="enumerable" /> which are not in <paramref name="excluded" />.
                The set is empty if <paramref name="enumerable" /> is empty or all its elements are also in <paramref name="excluded" />.
            </returns>
            <remarks>
                <para>
                    This is a O(n*m) operation where n is the number of elements in <paramref name="enumerable" /> and m is the number of elements in <paramref name="excluded" />.
                </para>
                <para>
                    <paramref name="enumerable" /> and <paramref name="excluded" /> are each enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" />, <paramref name="excluded" />, or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
                Converts a sequence to a set which only contains elements not existing in another sequence.
                Comparison is done using the specified function.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="excluded"> The sequence whose elements are to be removed from the resulting set. </param>
            <param name="comparer"> The function used to compare the elements in the sequences to look for matches. </param>
            <returns>
                The set which contains all elements from <paramref name="enumerable" /> which are not in <paramref name="excluded" />.
                The set is empty if <paramref name="enumerable" /> is empty or all its elements are also in <paramref name="excluded" />.
            </returns>
            <remarks>
                <para>
                    This is a O(n*m) operation where n is the number of elements in <paramref name="enumerable" /> and m is the number of elements in <paramref name="excluded" />.
                </para>
                <para>
                    <paramref name="enumerable" /> and <paramref name="excluded" /> are each enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" />, <paramref name="excluded" />, or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Exclusive``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Converts two sequences to a set which only contains elements which are not in both sequences.
                Comparison is done using the default equality comparison.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="first" /> and <paramref name="second" />. </typeparam>
            <param name="first"> The first sequence whose elements are only added to the resulting set if they are not in <paramref name="second" />. </param>
            <param name="second"> The second sequence whose elements are only added to the resulting set if they are not in <paramref name="first" />. </param>
            <returns>
                The set which contains all elements from both <paramref name="first" /> and <paramref name="second" /> which only are in either one of them but not both.
                The set is empty if both sequences are empty or if they only contain elements which are in both sequences.
            </returns>
            <remarks>
                <para>
                    This is a O(n*m) operation where n is the number of elements in <paramref name="first" /> and m is the number of elements in <paramref name="second" />.
                </para>
                <para>
                    <paramref name="first" /> and <paramref name="second" /> are each enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="first" /> or <paramref name="second" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Exclusive``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Converts two sequences to a set which only contains elements which are not in both sequences.
                Comparison is done using the specified equality comparer.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="first" /> and <paramref name="second" />. </typeparam>
            <param name="first"> The first sequence whose elements are only added to the resulting set if they are not in <paramref name="second" />. </param>
            <param name="second"> The second sequence whose elements are only added to the resulting set if they are not in <paramref name="first" />. </param>
            <param name="comparer"> The equality comparer used to compare the elements in the sequences to look for matches. </param>
            <returns>
                The set which contains all elements from both <paramref name="first" /> and <paramref name="second" /> which only are in either one of them but not both.
                The set is empty if both sequences are empty or if they only contain elements which are in both sequences.
            </returns>
            <remarks>
                <para>
                    This is a O(n*m) operation where n is the number of elements in <paramref name="first" /> and m is the number of elements in <paramref name="second" />.
                </para>
                <para>
                    <paramref name="first" /> and <paramref name="second" /> are each enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="first" />, <paramref name="second" />, or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Exclusive``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
                Converts two sequences to a set which only contains elements which are not in both sequences.
                Comparison is done using the specified function.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="first" /> and <paramref name="second" />. </typeparam>
            <param name="first"> The first sequence whose elements are only added to the resulting set if they are not in <paramref name="second" />. </param>
            <param name="second"> The second sequence whose elements are only added to the resulting set if they are not in <paramref name="first" />. </param>
            <param name="comparer"> The function used to compare the elements in the sequences to look for matches. </param>
            <returns>
                The set which contains all elements from both <paramref name="first" /> and <paramref name="second" /> which only are in either one of them but not both.
                The set is empty if both sequences are empty or if they only contain elements which are in both sequences.
            </returns>
            <remarks>
                <para>
                    This is a O(n*m) operation where n is the number of elements in <paramref name="first" /> and m is the number of elements in <paramref name="second" />.
                </para>
                <para>
                    <paramref name="first" /> and <paramref name="second" /> are each enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="first" />, <paramref name="second" />, or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.First``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Gets the first element of a sequence.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <returns>
                The first element in the sequence.
            </returns>
            <remarks>
                <para>
                    This is a O(1) operation.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated only once and only up to the first element.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> The sequence is empty and thus cannot provide a first element. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Gets the first element of a sequence which satisfies a specified condition.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="condition"> The function which tests each element for a condition, providing the element itself. </param>
            <returns>
                The first element in the sequence which satisfies the specified condition.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated only once and only up to the first element which satisfies the condition.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="condition" /> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> The sequence does not contain any element which satisfies the specified condition and thus cannot provide a first element. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32,``0,System.Boolean})">
            <summary>
                Gets the first element of a sequence which satisfies a specified condition.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="condition"> The function which tests each element for a condition, providing the elements index and the element itself. </param>
            <returns>
                The first element in the sequence which satisfies the specified condition.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated only once and only up to the first element which satisfies the condition.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="condition" /> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> The sequence does not contain any element which satisfies the specified condition and thus cannot provide a first element. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Gets the first element of a sequence or the default value if the sequence is empty.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <returns>
                The first element of the sequence.
                If the sequence is empty, the default value for <typeparamref name="T" /> is returned.
            </returns>
            <remarks>
                <para>
                    This is a O(1) operation.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated only once and only up to the first element.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
                Gets the first element of a sequence or a default value if the sequence is empty.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="defaultValue"> The default value to return if the sequence is empty. </param>
            <returns>
                The first element of the sequence.
                If the sequence is empty, the value of <paramref name="defaultValue" /> is returned.
            </returns>
            <remarks>
                <para>
                    This is a O(1) operation.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated only once and only up to the first element.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Gets the first element of a sequence which satisfies a specified condition or the default value if the sequence is empty.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="condition"> The function which tests each element for a condition, providing the element itself. </param>
            <returns>
                The first element of the sequence which satisfies the specified condition.
                If no element satisfies the specified condition, the default value for <typeparamref name="T" /> is returned.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated only once and only up to the first element which satisfies the condition.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="condition" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32,``0,System.Boolean})">
            <summary>
                Gets the first element of a sequence which satisfies a specified condition or the default value if the sequence is empty.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="condition"> The function which tests each element for a condition, providing the elements index and the element itself. </param>
            <returns>
                The first element of the sequence which satisfies the specified condition.
                If no element satisfies the specified condition, the default value for <typeparamref name="T" /> is returned.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated only once and only up to the first element which satisfies the condition.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="condition" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0,System.Func{``0,System.Boolean})">
            <summary>
                Gets the first element of a sequence which satisfies a specified condition or a default value if the sequence is empty.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="defaultValue"> The default value to return if the sequence does not contain any element which satisfies the specified condition. </param>
            <param name="condition"> The function which tests each element for a condition, providing the element itself. </param>
            <returns>
                The first element of the sequence which satisfies the specified condition.
                If no element satisfies the specified condition, the value of <paramref name="defaultValue" /> is returned.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated only once and only up to the first element which satisfies the condition.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="condition" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0,System.Func{System.Int32,``0,System.Boolean})">
            <summary>
                Gets the first element of a sequence which satisfies a specified condition or a default value if the sequence is empty.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="defaultValue"> The default value to return if the sequence does not contain any element which satisfies the specified condition. </param>
            <param name="condition"> The function which tests each element for a condition, providing the elements index and the element itself. </param>
            <returns>
                The first element of the sequence which satisfies the specified condition.
                If no element satisfies the specified condition, the value of <paramref name="defaultValue" /> is returned.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated only once and only up to the first element which satisfies the condition.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="condition" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
                Executes a specified action on each element of a sequence.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="action"> The action to execute for each element, providing the element itself. </param>
            <returns>
                The number of processed elements.
                Zero if the sequence is empty.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="action" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{System.Int32,``0})">
            <summary>
                Executes a specified action on each element of a sequence.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="action"> The action to execute for each element, providing the elements index and the element itself. </param>
            <returns>
                The number of processed elements.
                Zero if the sequence is empty.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="action" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Converts two sequences to a set which only contains elements which are in both sequences.
                Comparison is done using the default equality comparison.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="first" /> and <paramref name="second" />. </typeparam>
            <param name="first"> The first sequence whose elements are only added to the resulting set if they are also in <paramref name="second" />. </param>
            <param name="second"> The second sequence whose elements are only added to the resulting set if they are also in <paramref name="first" />. </param>
            <returns>
                The set which contains all elements from both <paramref name="first" /> and <paramref name="second" /> which are in both.
                The set is empty if one or both sequences are empty or if they only contain elements which are not in both sequences.
            </returns>
            <remarks>
                <para>
                    This is a O(n*m) operation where n is the number of elements in <paramref name="first" /> and m is the number of elements in <paramref name="second" />.
                </para>
                <para>
                    <paramref name="first" /> and <paramref name="second" /> are each enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="first" /> or <paramref name="second" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Converts two sequences to a set which only contains elements which are in both sequences.
                Comparison is done using the specified equality comparer.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="first" /> and <paramref name="second" />. </typeparam>
            <param name="first"> The first sequence whose elements are only added to the resulting set if they are also in <paramref name="second" />. </param>
            <param name="second"> The second sequence whose elements are only added to the resulting set if they are also in <paramref name="first" />. </param>
            <param name="comparer"> The equality comparer used to compare the elements in the sequences to look for matches. </param>
            <returns>
                The set which contains all elements from both <paramref name="first" /> and <paramref name="second" /> which are in both.
                The set is empty if one or both sequences are empty or if they only contain elements which are not in both sequences.
            </returns>
            <remarks>
                <para>
                    This is a O(n*m) operation where n is the number of elements in <paramref name="first" /> and m is the number of elements in <paramref name="second" />.
                </para>
                <para>
                    <paramref name="first" /> and <paramref name="second" /> are each enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="first" />, <paramref name="second" />, or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
                Converts two sequences to a set which only contains elements which are in both sequences.
                Comparison is done using the specified function.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="first" /> and <paramref name="second" />. </typeparam>
            <param name="first"> The first sequence whose elements are only added to the resulting set if they are also in <paramref name="second" />. </param>
            <param name="second"> The second sequence whose elements are only added to the resulting set if they are also in <paramref name="first" />. </param>
            <param name="comparer"> The function used to compare the elements in the sequences to look for matches. </param>
            <returns>
                The set which contains all elements from both <paramref name="first" /> and <paramref name="second" /> which are in both.
                The set is empty if one or both sequences are empty or if they only contain elements which are not in both sequences.
            </returns>
            <remarks>
                <para>
                    This is a O(n*m) operation where n is the number of elements in <paramref name="first" /> and m is the number of elements in <paramref name="second" />.
                </para>
                <para>
                    <paramref name="first" /> and <paramref name="second" /> are each enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="first" />, <paramref name="second" />, or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Last``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Gets the last element of a sequence.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <returns>
                The last element in the sequence.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> The sequence is empty and thus cannot provide a last element. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Gets the last element of a sequence which satisfies a specified condition.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="condition"> The function which tests each element for a condition, providing the element itself. </param>
            <returns>
                The last element in the sequence which satisfies the specified condition.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="condition" /> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> The sequence does not contain any element which satisfies the specified condition and thus cannot provide a last element. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32,``0,System.Boolean})">
            <summary>
                Gets the last element of a sequence which satisfies a specified condition.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="condition"> The function which tests each element for a condition, providing the elements index and the element itself. </param>
            <returns>
                The last element in the sequence which satisfies the specified condition.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="condition" /> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> The sequence does not contain any element which satisfies the specified condition and thus cannot provide a last element. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Gets the last element of a sequence or the default value if the sequence is empty.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <returns>
                The last element of the sequence.
                If the sequence is empty, the default value for <typeparamref name="T" /> is returned.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
                Gets the last element of a sequence or a default value if the sequence is empty.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="defaultValue"> The default value to return if the sequence is empty. </param>
            <returns>
                The last element of the sequence.
                If the sequence is empty, the value of <paramref name="defaultValue" /> is returned.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Gets the last element of a sequence which satisfies a specified condition or the default value if the sequence is empty.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="condition"> The function which tests each element for a condition, providing the element itself. </param>
            <returns>
                The last element of the sequence which satisfies the specified condition.
                If no element satisfies the specified condition, the default value for <typeparamref name="T" /> is returned.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="condition" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32,``0,System.Boolean})">
            <summary>
                Gets the last element of a sequence which satisfies a specified condition or the default value if the sequence is empty.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="condition"> The function which tests each element for a condition, providing the elements index and the element itself. </param>
            <returns>
                The last element of the sequence which satisfies the specified condition.
                If no element satisfies the specified condition, the default value for <typeparamref name="T" /> is returned.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="condition" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0,System.Func{``0,System.Boolean})">
            <summary>
                Gets the last element of a sequence which satisfies a specified condition or a default value if the sequence is empty.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="defaultValue"> The default value to return if the sequence does not contain any element which satisfies the specified condition. </param>
            <param name="condition"> The function which tests each element for a condition, providing the element itself. </param>
            <returns>
                The last element of the sequence which satisfies the specified condition.
                If no element satisfies the specified condition, the value of <paramref name="defaultValue" /> is returned.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="condition" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0,System.Func{System.Int32,``0,System.Boolean})">
            <summary>
                Gets the last element of a sequence which satisfies a specified condition or a default value if the sequence is empty.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="defaultValue"> The default value to return if the sequence does not contain any element which satisfies the specified condition. </param>
            <param name="condition"> The function which tests each element for a condition, providing the elements index and the element itself. </param>
            <returns>
                The last element of the sequence which satisfies the specified condition.
                If no element satisfies the specified condition, the value of <paramref name="defaultValue" /> is returned.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="condition" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.OfType``1(System.Collections.IEnumerable)">
            <summary>
                Soft-casts each element of a sequence into a new list.
                An element which is incompatible to the target type and cannot be converted is ignored.
            </summary>
            <typeparam name="T"> The type the elements are casted into. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <returns>
                The list which contains the casted elements in the order they were enumerated.
                The list is empty if the sequence contains no elements or only incompatible elements which could not be casted.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Reverses the order of the elements of a sequence into a new list.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <returns>
                The list which contains the elements of the sequence in reverse order as they were enumerated.
                The list is empty if the sequence contains no elements.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Same``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
                Determines how many times a specified element is in the sequence.
                Comparison is done using the default equality comparison.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="item"> The element to count in the sequence. </param>
            <returns>
                The number of times the specified element is in the sequence.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Same``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Determines how many times a specified element is in the sequence.
                Comparison is done using the specified equality comparer.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="item"> The element to count in the sequence. </param>
            <param name="comparer"> The equality comparer used to compare the specified element and the elements in the sequence to look for a match. </param>
            <returns>
                The number of times the specified element is in the sequence.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Same``1(System.Collections.Generic.IEnumerable{``0},``0,System.Func{``0,``0,System.Boolean})">
            <summary>
                Determines how many times a specified element is in the sequence.
                Comparison is done using the specified function.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="item"> The element to count in the sequence. </param>
            <param name="comparer"> The function used to compare the specified element and the elements in the sequence to look for a match. </param>
            <returns>
                The number of times the specified element is in the sequence.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Selects and converts each element of a sequence into a new list using a specified function.
            </summary>
            <typeparam name="TIn"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <typeparam name="TOut"> The type of the elements in the resulting list, after conversion. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="selector"> The selector and conversion function which is called for each element, providing the element itself. </param>
            <returns>
                The list which contains all the values returned by <paramref name="selector" /> in the order they were enumerated.
                The list is empty if the sequence contains no elements.
                Note that the values returned by <paramref name="selector" /> are not filtered and added as-is.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="selector" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32,``0,``1})">
            <summary>
                Selects and converts each element of a sequence into a new list using a specified function.
            </summary>
            <typeparam name="TIn"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <typeparam name="TOut"> The type of the elements in the resulting list, after conversion. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="selector"> The selector and conversion function which is called for each element, providing the elements index and the element itself. </param>
            <returns>
                The list which contains all the values returned by <paramref name="selector" /> in the order they were enumerated.
                The list is empty if the sequence contains no elements.
                Note that the values returned by <paramref name="selector" /> are not filtered and added as-is.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="selector" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
                Selects and converts each element of a sequence into multiple values using a specified function.
            </summary>
            <typeparam name="TIn"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <typeparam name="TOut"> The type of the elements in the resulting list, after conversion. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="selector"> The selector and conversion function which is called for each element, providing the element itself, creating a sequence of zero, one, or multiple resulting values. </param>
            <returns>
                The list which contains all the values returned by <paramref name="selector" /> in the order they were enumerated.
                The list is empty if the sequence contains no elements or <paramref name="selector" /> only returns sequences with no elements.
                Note that the values returned by <paramref name="selector" /> are not filtered and added as-is.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="selector" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32,``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
                Selects and converts each element of a sequence into multiple values using a specified function.
            </summary>
            <typeparam name="TIn"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <typeparam name="TOut"> The type of the elements in the resulting list, after conversion. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="selector"> The selector and conversion function which is called for each element, providing the elements index and the element itself, creating a sequence of zero, one, or multiple resulting values. </param>
            <returns>
                The list which contains all the values returned by <paramref name="selector" /> in the order they were enumerated.
                The list is empty if the sequence contains no elements or <paramref name="selector" /> only returns sequences with no elements.
                Note that the values returned by <paramref name="selector" /> are not filtered and added as-is.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="selector" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Compares two sequences and determines whether they contain the same elements.
                Comparison is done using the default equality comparison.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="x" /> and <paramref name="y" />. </typeparam>
            <param name="x"> The first of the two sequences whose elements are compared against the elements of <paramref name="y" />. </param>
            <param name="y"> The second of the two sequences whose elements are compared against the elements of <paramref name="x" />. </param>
            <returns>
                true if both sequences are equal or contain the same elements respectively.
            </returns>
            <remarks>
                <para>
                    This is a O(n+m) operation, where n is the number of elements in <paramref name="x" /> and m is the number of elements in <paramref name="y" />.
                </para>
                <para>
                    <paramref name="x" /> and <paramref name="y" /> are each enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="x" /> or <paramref name="y" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},RI.Framework.Collections.Comparison.CollectionComparerFlags)">
            <summary>
                Compares two sequences and determines whether they contain the same elements.
                Comparison is done using the default equality comparison.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="x" /> and <paramref name="y" />. </typeparam>
            <param name="x"> The first of the two sequences whose elements are compared against the elements of <paramref name="y" />. </param>
            <param name="y"> The second of the two sequences whose elements are compared against the elements of <paramref name="x" />. </param>
            <param name="options"> The options which specify comparison options. </param>
            <returns>
                true if both sequences are equal or contain the same elements respectively.
            </returns>
            <remarks>
                <para>
                    This is a O(n*m) operation if order is ignored or a O(n+m) operation if order is not ignored, where n is the number of elements in <paramref name="x" /> and m is the number of elements in <paramref name="y" />.
                </para>
                <para>
                    <paramref name="x" /> and <paramref name="y" /> are each enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="x" /> or <paramref name="y" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Compares two sequences and determines whether they contain the same elements.
                Comparison is done using the specified equality comparer.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="x" /> and <paramref name="y" />. </typeparam>
            <param name="x"> The first of the two sequences whose elements are compared against the elements of <paramref name="y" />. </param>
            <param name="y"> The second of the two sequences whose elements are compared against the elements of <paramref name="x" />. </param>
            <param name="comparer"> The equality comparer used to compare the elements in the sequences to look for matches. </param>
            <returns>
                true if both sequences are equal or contain the same elements respectively.
            </returns>
            <remarks>
                <para>
                    This is a O(n*m) operation if order is ignored or a O(n+m) operation if order is not ignored, where n is the number of elements in <paramref name="x" /> and m is the number of elements in <paramref name="y" />.
                </para>
                <para>
                    <paramref name="x" /> and <paramref name="y" /> are each enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="x" />, <paramref name="y" />, or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
                Compares two sequences and determines whether they contain the same elements.
                Comparison is done using the specified function.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="x" /> and <paramref name="y" />. </typeparam>
            <param name="x"> The first of the two sequences whose elements are compared against the elements of <paramref name="y" />. </param>
            <param name="y"> The second of the two sequences whose elements are compared against the elements of <paramref name="x" />. </param>
            <param name="comparer"> The function used to compare the elements in the sequences to look for matches. </param>
            <returns>
                true if both sequences are equal or contain the same elements respectively.
            </returns>
            <remarks>
                <para>
                    This is a O(n*m) operation if order is ignored or a O(n+m) operation if order is not ignored, where n is the number of elements in <paramref name="x" /> and m is the number of elements in <paramref name="y" />.
                </para>
                <para>
                    <paramref name="x" /> and <paramref name="y" /> are each enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="x" />, <paramref name="y" />, or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},RI.Framework.Collections.Comparison.CollectionComparerFlags,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Compares two sequences and determines whether they contain the same elements.
                Comparison is done using the specified equality comparer.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="x" /> and <paramref name="y" />. </typeparam>
            <param name="x"> The first of the two sequences whose elements are compared against the elements of <paramref name="y" />. </param>
            <param name="y"> The second of the two sequences whose elements are compared against the elements of <paramref name="x" />. </param>
            <param name="options"> The options which specify comparison options. </param>
            <param name="comparer"> The equality comparer used to compare the elements in the sequences to look for matches. </param>
            <returns>
                true if both sequences are equal or contain the same elements respectively.
            </returns>
            <remarks>
                <para>
                    This is a O(n*m) operation if order is ignored or a O(n+m) operation if order is not ignored, where n is the number of elements in <paramref name="x" /> and m is the number of elements in <paramref name="y" />.
                </para>
                <para>
                    <paramref name="x" /> and <paramref name="y" /> are each enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="x" />, <paramref name="y" />, or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},RI.Framework.Collections.Comparison.CollectionComparerFlags,System.Func{``0,``0,System.Boolean})">
            <summary>
                Compares two sequences and determines whether they contain the same elements.
                Comparison is done using the specified function.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="x" /> and <paramref name="y" />. </typeparam>
            <param name="x"> The first of the two sequences whose elements are compared against the elements of <paramref name="y" />. </param>
            <param name="y"> The second of the two sequences whose elements are compared against the elements of <paramref name="x" />. </param>
            <param name="options"> The options which specify comparison options. </param>
            <param name="comparer"> The function used to compare the elements in the sequences to look for matches. </param>
            <returns>
                true if both sequences are equal or contain the same elements respectively.
            </returns>
            <remarks>
                <para>
                    This is a O(n*m) operation if order is ignored or a O(n+m) operation if order is not ignored, where n is the number of elements in <paramref name="x" /> and m is the number of elements in <paramref name="y" />.
                </para>
                <para>
                    <paramref name="x" /> and <paramref name="y" /> are each enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="x" />, <paramref name="y" />, or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Omits a specified amount of elements from the beginning of a sequence and gets the remaining elements.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="count"> The number of elements to omit from the beginning of the sequence. </param>
            <returns>
                The list which contains the remaining elements of the sequence in the order they were enumerated.
                The list is empty if the sequence contains no elements or the specified number of elements to omit is equal or larger than the length of the sequence.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="count" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Omits elements from the beginning of a sequence as long as a specified condition is satisfied and then gets the remaining elements.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="condition"> The function which tests each element for a condition, providing the element itself. </param>
            <returns>
                The list which contains the remaining elements of the sequence.
                The list is empty if the sequence contains no elements or all elements satisfied the specified condition.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="condition" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32,``0,System.Boolean})">
            <summary>
                Omits elements from the beginning of a sequence as long as a specified condition is satisfied and then gets the remaining elements.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="condition"> The function which tests each element for a condition, providing the elements index and the element itself. </param>
            <returns>
                The list which contains the remaining elements of the sequence.
                The list is empty if the sequence contains no elements or all elements satisfied the specified condition.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="condition" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Sort``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
                Sorts the elements of a sequence into a new list.
                Comparison is done using the default order comparison.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="reverseOrder"> Specifies whether the sorting is done in reverse order (that is, reversing the order as determined by the default order comparison). </param>
            <returns>
                The list which contains the elements of the sequence in sorted order.
                The list is empty if the sequence contains no elements.
            </returns>
            <remarks>
                <para>
                    This is a O(n^2) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Sort``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Collections.Generic.IComparer{``0})">
            <summary>
                Sorts the elements of a sequence into a new list.
                Comparison is done using the specified order comparer.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="reverseOrder"> Specifies whether the sorting is done in reverse order (that is, reversing the order as determined by <paramref name="comparer" />). </param>
            <param name="comparer"> The order comparer used to compare two elements. </param>
            <returns>
                The list which contains the elements of the sequence in sorted order.
                The list is empty if the sequence contains no elements.
            </returns>
            <remarks>
                <para>
                    This is a O(n^2) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Sort``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,``0,System.Int32})">
            <summary>
                Sorts the elements of a sequence into a new list.
                Comparison is done using the specified function.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="reverseOrder"> Specifies whether the sorting is done in reverse order (that is, reversing the order as determined by <paramref name="comparer" />). </param>
            <param name="comparer"> The function used to compare two elements. </param>
            <returns>
                The list which contains the elements of the sequence in sorted order.
                The list is empty if the sequence contains no elements.
            </returns>
            <remarks>
                <para>
                    This is a O(n^2) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Gets a specified amount of elements from the beginning of a sequence and omits the remaining elements.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="count"> The number of elements to get from the beginning of the sequence. </param>
            <returns>
                The list which contains the elements of the sequence at its beginning in the order they were enumerated.
                The list is empty if the sequence contains no elements or <paramref name="count" /> is zero.
                If the specified number of elements to take is larger than the length of the sequence, the list contains all elements of the sequence but not more.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated only once and only up to the number of elements specified by <paramref name="count" />.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="count" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Gets elements from the beginning of a sequence as long as a specified condition is satisfied and then omits the remaining elements.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="condition"> The function which tests each element for a condition, providing the element itself. </param>
            <returns>
                The list which contains the elements of the sequence at its beginning.
                The list is empty if the sequence contains no elements or the first element did not satisfy the condition.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated only once and only up to the first element which does not satisfy the condition.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="condition" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32,``0,System.Boolean})">
            <summary>
                Gets elements from the beginning of a sequence as long as a specified condition is satisfied and then omits the remaining elements.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="condition"> The function which tests each element for a condition, providing the elements index and the element itself. </param>
            <returns>
                The list which contains the elements of the sequence at its beginning.
                The list is empty if the sequence contains no elements or the first element did not satisfy the condition.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated only once and only up to the first element which does not satisfy the condition.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="condition" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Converts a sequence to a new array.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <returns>
                An array which contains all elements of the sequence in the order they were enumerated.
                The array has a length of zero if the sequence contains no elements.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.ToArray``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Converts a sequence to a new array, starting at a specified index.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="index"> The index from which the elements are copied to the array. </param>
            <returns>
                An array which contains all elements of the sequence, starting at the specified index, in the order they were enumerated.
                The array has a length of zero if the sequence contains no elements or the specified index is outside the sequence.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="index" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.ToArray``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
                Converts a sequence to a new array, starting at a specified index for a specified number of elements.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="index"> The index from which the elements are copied to the array. </param>
            <param name="count"> The number of elements to copy to the array, starting at the specified index. </param>
            <returns>
                An array which contains the specified number of elements of the sequence, starting at the specified index, in the order they were enumerated.
                The array has a length of zero if the sequence contains no elements, the specified index is outside the sequence, or <paramref name="count" /> is zero.
                If the range specified by <paramref name="index" /> and <paramref name="count" /> reaches outside the sequence, the array stops at the last element of the sequence.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated only once and only up to the last element in the range specified by <paramref name="index" /> and <paramref name="count" />.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="index" /> or <paramref name="count" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.KeyValuePair{``1,``2}})">
            <summary>
                Converts a sequence to a dictionary by deriving a key from each element.
                Each key can only be assigned to one element.
                Key equality is checked using the default equality comparer for the key type.
            </summary>
            <typeparam name="TIn"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <typeparam name="TKey"> The type of the derived keys in the dictionary. </typeparam>
            <typeparam name="TValue"> The type of the values in the dictionary. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="mapper"> The function which derives a key and a value for each element in the sequence. </param>
            <returns>
                The dictionary which contains the key-value-pairs for each element in the sequence.
                The dictionary is empty if the sequence contains no elements.
            </returns>
            <remarks>
                <para>
                    This is a O(n^2) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="mapper" /> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> The same key is derived for more than one element. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``1},System.Func{``0,System.Collections.Generic.KeyValuePair{``1,``2}})">
            <summary>
                Converts a sequence to a dictionary by deriving a key from each element.
                Each key can only be assigned to one element.
                Key equality is checked using the specified equality comparer for the key type.
            </summary>
            <typeparam name="TIn"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <typeparam name="TKey"> The type of the derived keys in the dictionary. </typeparam>
            <typeparam name="TValue"> The type of the values in the dictionary. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="keyComparer"> The equality comparer for the keys, used by the returned dictionary. </param>
            <param name="mapper"> The function which derives a key and a value for each element in the sequence. </param>
            <returns>
                The dictionary which contains the key-value-pairs for each element in the sequence.
                The dictionary is empty if the sequence contains no elements.
            </returns>
            <remarks>
                <para>
                    This is a O(n^2) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" />, <paramref name="keyComparer" />, or <paramref name="mapper" /> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> The same key is derived for more than one element. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.ToDictionaryList``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.KeyValuePair{``1,``2}})">
            <summary>
                Converts a sequence to a dictionary by deriving a key from each element.
                Each key can be assigned to one or more elements.
                Key equality is checked using the default equality comparer for the key type.
            </summary>
            <typeparam name="TIn"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <typeparam name="TKey"> The type of the derived keys in the dictionary. </typeparam>
            <typeparam name="TValue"> The type of the values in the dictionary. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="mapper"> The function which derives a key and a value for each element in the sequence. </param>
            <returns>
                The dictionary which contains the key-value-pairs where each value is a list of values derived from the elements which have the same key derived/assigned.
                The dictionary is empty if the sequence contains no elements.
            </returns>
            <remarks>
                <para>
                    This is a O(n^2) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="mapper" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.ToDictionaryList``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``1},System.Func{``0,System.Collections.Generic.KeyValuePair{``1,``2}})">
            <summary>
                Converts a sequence to a dictionary by deriving a key from each element.
                Each key can be assigned to one or more elements.
                Key equality is checked using the specified equality comparer for the key type.
            </summary>
            <typeparam name="TIn"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <typeparam name="TKey"> The type of the derived keys in the dictionary. </typeparam>
            <typeparam name="TValue"> The type of the values in the dictionary. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="keyComparer"> The equality comparer for the keys, used by the returned dictionary. </param>
            <param name="mapper"> The function which derives a key and a value for each element in the sequence. </param>
            <returns>
                The dictionary which contains the key-value-pairs where each value is a list of values derived from the elements which have the same key derived/assigned.
                The dictionary is empty if the sequence contains no elements.
            </returns>
            <remarks>
                <para>
                    This is a O(n^2) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" />, <paramref name="keyComparer" />, or <paramref name="mapper" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.ToDictionarySet``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.KeyValuePair{``1,``2}})">
            <summary>
                Converts a sequence to a dictionary by deriving a key from each element.
                Each key can be assigned to one or more elements.
                Key equality is checked using the default equality comparer for the key type.
            </summary>
            <typeparam name="TIn"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <typeparam name="TKey"> The type of the derived keys in the dictionary. </typeparam>
            <typeparam name="TValue"> The type of the values in the dictionary. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="mapper"> The function which derives a key and a value for each element in the sequence. </param>
            <returns>
                The dictionary which contains the key-value-pairs where each value is a set of values derived from the elements which have the same key derived/assigned.
                The dictionary is empty if the sequence contains no elements.
            </returns>
            <remarks>
                <para>
                    This is a O(n^2) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="mapper" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.ToDictionarySet``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2},System.Func{``0,System.Collections.Generic.KeyValuePair{``1,``2}})">
            <summary>
                Converts a sequence to a dictionary by deriving a key from each element.
                Each key can be assigned to one or more elements.
                Key equality is checked using the specified equality comparer for the key type.
            </summary>
            <typeparam name="TIn"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <typeparam name="TKey"> The type of the derived keys in the dictionary. </typeparam>
            <typeparam name="TValue"> The type of the values in the dictionary. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="keyComparer"> The equality comparer for the keys, used by the returned dictionary. </param>
            <param name="setComparer"> The equality comparer for the values, used by the sets in the returned dictionary. </param>
            <param name="mapper"> The function which derives a key and a value for each element in the sequence. </param>
            <returns>
                The dictionary which contains the key-value-pairs where each value is a set of values derived from the elements which have the same key derived/assigned.
                The dictionary is empty if the sequence contains no elements.
            </returns>
            <remarks>
                <para>
                    This is a O(n^2) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" />, <paramref name="keyComparer" />, <paramref name="setComparer" />, or <paramref name="mapper" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.ToList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Converts a sequence to a new list.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <returns>
                A list which contains all elements of the sequence in the order they were enumerated.
                The list has a length of zero if the sequence contains no elements.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.ToList``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Converts a sequence to a new list, starting at a specified index.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="index"> The index from which the elements are copied to the list. </param>
            <returns>
                A list which contains all elements of the sequence, starting at the specified index, in the order they were enumerated.
                The list has a length of zero if the sequence contains no elements or the specified index is outside the sequence.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="index" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.ToList``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
                Converts a sequence to a new list, starting at a specified index for a specified number of elements.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="index"> The index from which the elements are copied to the list. </param>
            <param name="count"> The number of elements to copy to the list, starting at the specified index. </param>
            <returns>
                A list which contains the specified number of elements of the sequence in the order they were enumerated.
                The list has a length of zero if the sequence contains no elements, the specified index is outside the sequence, or <paramref name="count" /> is zero.
                If the range specified by <paramref name="index" /> and <paramref name="count" /> reaches outside the sequence, the list stops at the last element of the sequence.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated only once and only up to the last element in the range specified by <paramref name="index" /> and <paramref name="count" />.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="index" /> or <paramref name="count" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Converts two sequences to a set which contains all the elements of both sequences.
                Comparison is done using the default equality comparison.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="first" /> and <paramref name="second" />. </typeparam>
            <param name="first"> The first sequence whose elements are added to the resulting set. </param>
            <param name="second"> The second sequence whose elements are added to the resulting set. </param>
            <returns>
                The set which contains all elements from both <paramref name="first" /> and <paramref name="second" />.
                The set is empty if both sequences are empty.
            </returns>
            <remarks>
                <para>
                    This is a O((n+m)^2) operation where n is the number of elements in <paramref name="first" /> and m is the number of elements in <paramref name="second" />.
                </para>
                <para>
                    <paramref name="first" /> and <paramref name="second" /> are each enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="first" /> or <paramref name="second" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Converts two sequences to a set which contains all the elements of both sequences.
                Comparison is done using the specified equality comparer.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="first" /> and <paramref name="second" />. </typeparam>
            <param name="first"> The first sequence whose elements are added to the resulting set. </param>
            <param name="second"> The second sequence whose elements are added to the resulting set. </param>
            <param name="comparer"> The equality comparer used to compare the elements in the sequences to look for matches. </param>
            <returns>
                The set which contains all elements from both <paramref name="first" /> and <paramref name="second" />.
                The set is empty if both sequences are empty.
            </returns>
            <remarks>
                <para>
                    This is a O((n+m)^2) operation where n is the number of elements in <paramref name="first" /> and m is the number of elements in <paramref name="second" />.
                </para>
                <para>
                    <paramref name="first" /> and <paramref name="second" /> are each enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="first" />, <paramref name="second" />, or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
                Converts two sequences to a set which contains all the elements of both sequences.
                Comparison is done using the specified function.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="first" /> and <paramref name="second" />. </typeparam>
            <param name="first"> The first sequence whose elements are added to the resulting set. </param>
            <param name="second"> The second sequence whose elements are added to the resulting set. </param>
            <param name="comparer"> The equality comparer used to compare the elements in the sequences to look for matches. </param>
            <returns>
                The set which contains all elements from both <paramref name="first" /> and <paramref name="second" />.
                The set is empty if both sequences are empty.
            </returns>
            <remarks>
                <para>
                    This is a O((n+m)^2) operation where n is the number of elements in <paramref name="first" /> and m is the number of elements in <paramref name="second" />.
                </para>
                <para>
                    <paramref name="first" /> and <paramref name="second" /> are each enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="first" />, <paramref name="second" />, or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Filters all elements of a sequence into a new list.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="filter"> The function which filters each element, providing the element itself. </param>
            <returns>
                The list which contains all elements which passed the filter.
                The list is empty if the sequence contains no elements or no element passed the filter.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="filter" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32,``0,System.Boolean})">
            <summary>
                Filters all elements of a sequence into a new list.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="filter"> The function which filters each element, providing the elements index and the element itself. </param>
            <returns>
                The list which contains all elements which passed the filter.
                The list is empty if the sequence contains no elements or no element passed the filter.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="filter" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
                Zips together two sequences into a list by combining/converting two elements with the same index of each sequence into a resulting element.
            </summary>
            <typeparam name="TFirst"> The type of the elements of <paramref name="first" />. </typeparam>
            <typeparam name="TSecond"> The type of the elements of <paramref name="second" />. </typeparam>
            <typeparam name="TResult"> The type of the resulting elements in the list. </typeparam>
            <param name="first"> The first sequence whose elements are zipped with the corresponding elements of <paramref name="second" />. </param>
            <param name="second"> The second sequence whose elements are zipped with the corresponding elements of <paramref name="first" />. </param>
            <param name="zipper"> The function which combines, and optionally converts, two elements of the two sequences with the same index, providing the element itself. </param>
            <returns>
                The list which contains the resulting elements.
                The list is empty if either <paramref name="first" /> or <paramref name="second" /> contains no elements.
                The zipping stops when the end of either sequence is reached, adding no further elements to the list.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence with lesser elements.
                </para>
                <para>
                    <paramref name="first" /> and <paramref name="second" /> are each enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="first" />, <paramref name="second" />, or <paramref name="zipper" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IEnumerableExtensions.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{System.Int32,``0,``1,``2})">
            <summary>
                Zips together two sequences into a list by combining/converting two elements with the same index of each sequence into a resulting element.
            </summary>
            <typeparam name="TFirst"> The type of the elements of <paramref name="first" />. </typeparam>
            <typeparam name="TSecond"> The type of the elements of <paramref name="second" />. </typeparam>
            <typeparam name="TResult"> The type of the resulting elements in the list. </typeparam>
            <param name="first"> The first sequence whose elements are zipped with the corresponding elements of <paramref name="second" />. </param>
            <param name="second"> The second sequence whose elements are zipped with the corresponding elements of <paramref name="first" />. </param>
            <param name="zipper"> The function which combines, and optionally converts, two elements of the two sequences with the same index, providing the elements index and the element itself. </param>
            <returns>
                The list which contains the resulting elements.
                The list is empty if either <paramref name="first" /> or <paramref name="second" /> contains no elements.
                The zipping stops when the end of either sequence is reached, adding no further elements to the list.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence with lesser elements.
                </para>
                <para>
                    <paramref name="first" /> and <paramref name="second" /> are each enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="first" />, <paramref name="second" />, or <paramref name="zipper" /> is null. </exception>
        </member>
        <member name="T:RI.Framework.Collections.IListExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.Collections.Generic.IList`1" /> type and its implementations.
            </summary>
        </member>
        <member name="M:RI.Framework.Collections.IListExtensions.AsList``1(System.Collections.Generic.IList{``0})">
            <summary>
                Converts any instance implementing <see cref="T:System.Collections.Generic.IList`1" /> to an explicit <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The instance implementing <see cref="T:System.Collections.Generic.IList`1" />. </param>
            <returns>
                The instance as explicit <see cref="T:System.Collections.Generic.IList`1" />.
            </returns>
            <remarks>
                <para>
                    A conversion to an explicit <see cref="T:System.Collections.Generic.IList`1" /> can be useful in cases where the utility/extension methods of <see cref="T:System.Collections.Generic.IList`1" /> shall be used instead of the ones implemented by the instance itself.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IListExtensions.InsertRange``1(System.Collections.Generic.IList{``0},System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Inserts multiple items into a list at the specified index.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="index"> The index at which the items are inserted. </param>
            <param name="items"> The sequence of items to insert into the list. </param>
            <returns>
                The number of items inserted into the list.
            </returns>
            <remarks>
                <para>
                    <paramref name="items" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> or <paramref name="items" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="index" /> is less than zero or bigger than the size of the list. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IListExtensions.RemoveAtRange``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
                Removes a defined amount of items from a list at the specified index.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="index"> The index at which the remove of the items start. </param>
            <param name="count"> The number of items to remove beginning at the specified index. </param>
            <returns>
                The number of items removed from the list.
            </returns>
            <remarks>
                <para>
                    If the range defined by <paramref name="index" /> and <paramref name="count" /> reaches outside the size of the list, all items from <paramref name="index" /> to the end of the list are removed.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="index" /> is less than zero or bigger or equal than the size of the list, or <paramref name="count" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IListExtensions.RemoveAtRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Removes multiple items at specified indices from a list.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="indices"> The sequence of indices to be removed from the list. </param>
            <returns>
                The number of items removed from the list.
                Zero if the sequence of indices contains no elements.
            </returns>
            <remarks>
                <para>
                    Before the indices are removed, they need to be de-duplicated and sorted, adding non-obvious overhead.
                </para>
                <para>
                    <paramref name="indices" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> or <paramref name="indices" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> At least one index in <paramref name="indices" /> is invalid. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IListExtensions.RemoveWhere``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
                Removes all items which satisfy a condition from a list.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="condition"> The function which tests each item for a condition, providing the item itself. </param>
            <returns>
                The list of removed items.
                The list is empty if no elements were removed.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> or <paramref name="condition" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IListExtensions.RemoveWhere``1(System.Collections.Generic.IList{``0},System.Func{System.Int32,``0,System.Boolean})">
            <summary>
                Removes all items which satisfy a condition from a list.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="condition"> The function which tests each item for a condition, providing the items index and the item itself. </param>
            <returns>
                The list of removed items.
                The list is empty if no elements were removed.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> or <paramref name="condition" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IListExtensions.Reverse``1(System.Collections.Generic.IList{``0})">
            <summary>
                Reverses the order of the items of a list.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <returns>
                The number of reversed items.
            </returns>
            <remarks>
                <para>
                    Since the behaviour of the actual type of <paramref name="list" /> is not known, the reversing is not done in-place.
                    Instead, all items are copied and then reversed, the list cleared, and then all sorted items are added again.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IListExtensions.Shuffle``1(System.Collections.Generic.IList{``0},System.Random)">
            <summary>
                Puts all items in a list in random order.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="randomizer"> The randomizer which is used for randomizing the indices of the items. </param>
            <returns>
                The number of items put into random order.
            </returns>
            <remarks>
                <para>
                    The list is completely shuffled.
                </para>
                <para>
                    Since the behaviour of the actual type of <paramref name="list" /> is not known, the shuffling is not done in-place.
                    Instead, all items are copied and then shuffled, the list cleared, and then all sorted items are added again.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IListExtensions.Shuffle``1(System.Collections.Generic.IList{``0},System.Random,System.Int32)">
            <summary>
                Puts all items in a list in random order.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="randomizer"> The randomizer which is used for randomizing the indices of the items. </param>
            <param name="shakes"> The number of times the list is &quot;shaked&quot;. </param>
            <returns>
                The number of items put into random order.
            </returns>
            <remarks>
                <para>
                    The list is partially shuffled.
                    That means that each item is moved randomly away from its original index.
                    The more <paramref name="shakes" />, the farther away an item might move from its original position.
                    A <paramref name="shakes" /> of zero means that the list remains the same and no items are shuffled.
                </para>
                <para>
                    Since the behaviour of the actual type of <paramref name="list" /> is not known, the shuffling is not done in-place.
                    Instead, all items are copied and then shuffled, the list cleared, and then all sorted items are added again.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IListExtensions.Sort``1(System.Collections.Generic.IList{``0},System.Boolean)">
            <summary>
                Sorts the items of a list.
                Comparison is done using the default order comparison.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="ascending"> Specifies whether the sorting is done in ascending order (descending order otherwise). </param>
            <returns>
                The number of sorted items.
            </returns>
            <remarks>
                <para>
                    Since the behaviour of the actual type of <paramref name="list" /> is not known, the sorting is not done in-place.
                    Instead, all items are copied and then sorted, the list cleared, and then all sorted items are added again.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IListExtensions.Sort``1(System.Collections.Generic.IList{``0},System.Boolean,System.Collections.Generic.IComparer{``0})">
            <summary>
                Sorts the items of a list.
                Comparison is done using the specified order comparer.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="ascending"> Specifies whether the sorting is done in ascending order (descending order otherwise). </param>
            <param name="comparer"> The order comparer used to compare two items. </param>
            <returns>
                The number of sorted items.
            </returns>
            <remarks>
                <para>
                    Since the behaviour of the actual type of <paramref name="list" /> is not known, the sorting is not done in-place.
                    Instead, all items are copied and then sorted, the list cleared, and then all sorted items are added again.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IListExtensions.Sort``1(System.Collections.Generic.IList{``0},System.Boolean,System.Func{``0,``0,System.Int32})">
            <summary>
                Sorts the items of a list.
                Comparison is done using the specified function.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="ascending"> Specifies whether the sorting is done in ascending order (descending order otherwise). </param>
            <param name="comparer"> The function used to compare two items. </param>
            <returns>
                The number of sorted items.
            </returns>
            <remarks>
                <para>
                    Since the behaviour of the actual type of <paramref name="list" /> is not known, the sorting is not done in-place.
                    Instead, all items are copied and then sorted, the list cleared, and then all sorted items are added again.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IListExtensions.SwapDefault``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
                Swaps two items in a list specified by their index.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="indexA"> The index of the first item to swap. </param>
            <param name="indexB"> The index of the second item to swap. </param>
            <remarks>
                <para>
                    The swapping is done by copying the first and second item, then replacing the first and second item with default(<typeparamref name="T" />), and then replacing the first and second item with the swapped and copied items.
                    Therefore, briefly during the swapping, the list does not contain the first and second item but twice default(<typeparamref name="T" />) in their place.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="indexA" /> or <paramref name="indexB" /> is less than zero or bigger or equal to the size of the list. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IListExtensions.SwapDefault``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,``0)">
            <summary>
                Swaps two items in a list specified by their index.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="indexA"> The index of the first item to swap. </param>
            <param name="indexB"> The index of the second item to swap. </param>
            <param name="defaultValue"> The default value which is used as a placeholder during the swapping. </param>
            <remarks>
                <para>
                    The swapping is done by copying the first and second item, then replacing the first and second item with the value of <paramref name="defaultValue" />, and then replacing the first and second item with the swapped and copied items.
                    Therefore, briefly during the swapping, the list does not contain the first and second item but twice the value of <paramref name="defaultValue" /> in their place.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="indexA" /> or <paramref name="indexB" /> is less than zero or bigger or equal to the size of the list. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IListExtensions.SwapInPlace``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
                Swaps two items in a list specified by their index.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="indexA"> The index of the first item to swap. </param>
            <param name="indexB"> The index of the second item to swap. </param>
            <remarks>
                <para>
                    The swapping is done by copying the first item, then replacing the first item with the second item, and then replacing the second item with the copied first item.
                    Therefore, briefly during the swapping, the list does not contain the first item but twice the second item.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="indexA" /> or <paramref name="indexB" /> is less than zero or bigger or equal to the size of the list. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IListExtensions.SwapInsert``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
                Swaps two items in a list specified by their index.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="indexA"> The index of the first item to swap. </param>
            <param name="indexB"> The index of the second item to swap. </param>
            <remarks>
                <para>
                    The swapping is done by copying the first and second item, then removing the first and second item, and then inserting the first and second item at their swapped indices.
                    Therefore, briefly during the swapping, the list does not contain the first and second item.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="indexA" /> or <paramref name="indexB" /> is less than zero or bigger or equal to the size of the list. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IListExtensions.Transform``1(System.Collections.Generic.IList{``0},System.Func{``0,``0})">
            <summary>
                Transforms each item in a list according to a specified transform function.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="transform"> The transform function which determines a new value for each item in the list, providing the item itself. </param>
            <returns>
                The number of transformed items.
            </returns>
            <remarks>
                <para>
                    The transformation is done in-place where the new transformed value replaces the existing value at the same index.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> or <paramref name="transform" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IListExtensions.Transform``1(System.Collections.Generic.IList{``0},System.Func{System.Int32,``0,``0})">
            <summary>
                Transforms each item in a list according to a specified transform function.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="transform"> The transform function which determines a new value for each item in the list, providing the items index and the item itself. </param>
            <returns>
                The number of transformed items.
            </returns>
            <remarks>
                <para>
                    The transformation is done in-place where the new transformed value replaces the existing value at the same index.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> or <paramref name="transform" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.IListExtensions.TryGetIndex``1(System.Collections.Generic.IList{``0},System.Int32,``0@)">
            <summary>
                Gets the item at the specified index if that index exists.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="index"> The index of the item to retrieve. </param>
            <param name="item"> Receives the item if the index is valid, default(<typeparamref name="T" />) otherwise. </param>
            <returns>
                true if the index is valid, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="index" /> is less than zero. </exception>
        </member>
        <member name="T:RI.Framework.Collections.LinkedListExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.Collections.Generic.LinkedList`1" /> type.
            </summary>
        </member>
        <member name="M:RI.Framework.Collections.LinkedListExtensions.AsItemsBackward``1(System.Collections.Generic.LinkedList{``0})">
            <summary>
                Enumerates the items of a linked list backwards.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The linked list. </param>
            <returns>
                The <see cref="T:System.Collections.Generic.IEnumerable`1" /> which enumerates the linked list items.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.LinkedListExtensions.AsItemsForward``1(System.Collections.Generic.LinkedList{``0})">
            <summary>
                Enumerates the items of a linked list forwards.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The linked list. </param>
            <returns>
                The <see cref="T:System.Collections.Generic.IEnumerable`1" /> which enumerates the linked list nodes.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.LinkedListExtensions.AsNodesBackward``1(System.Collections.Generic.LinkedList{``0})">
            <summary>
                Allows a linked list to be enumerated as its nodes, starting at the last node, rather than its values.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The linked list. </param>
            <returns>
                The <see cref="T:System.Collections.Generic.IEnumerable`1" /> which enumerates the linked list nodes.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.LinkedListExtensions.AsNodesForward``1(System.Collections.Generic.LinkedList{``0})">
            <summary>
                Allows a linked list to be enumerated as its nodes, starting at the first node, rather than its values.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The linked list. </param>
            <returns>
                The <see cref="T:System.Collections.Generic.IEnumerable`1" /> which enumerates the linked list nodes.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.LinkedListExtensions.FindWhere``1(System.Collections.Generic.LinkedList{``0},System.Func{System.Int32,System.Collections.Generic.LinkedListNode{``0},System.Boolean})">
            <summary>
                Finds all nodes of a linked list which satisfy a condition.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The linked list. </param>
            <param name="condition"> The function which tests each node for a condition, providing the nodes index and the node itself. </param>
            <returns>
                The list of nodes which satisfy the specified condition.
                The list is empty if no node satisfies the condition.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> or <paramref name="condition" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.LinkedListExtensions.FindWhere``1(System.Collections.Generic.LinkedList{``0},System.Func{System.Collections.Generic.LinkedListNode{``0},System.Boolean})">
            <summary>
                Finds all nodes of a linked list which satisfy a condition.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The linked list. </param>
            <param name="condition"> The function which tests each node for a condition, providing the node itself. </param>
            <returns>
                The list of nodes which satisfy the specified condition.
                The list is empty if no node satisfies the condition.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> or <paramref name="condition" /> is null. </exception>
        </member>
        <member name="T:RI.Framework.Collections.ObjectModel.IPool`1">
            <summary>
                Defines a generic interface for pools which can be used to store and recycle objects.
            </summary>
            <typeparam name="T"> The type of objects which can be stored and recycled by the pool. </typeparam>
            <remarks>
                <para>
                    Pools are used when it is desired to re-use instances instead of destroy/dispose/garbage-collect them, followed by creation of new instances, e.g. for performance reasons.
                </para>
                <para>
                    For very large amounts of items, you might consider using an <see cref="T:RI.Framework.Collections.Generic.IWarehouse`1" /> instead.
                </para>
                <note type="implement">
                    Implementations of <see cref="T:RI.Framework.Collections.ObjectModel.IPool`1" /> should support <see cref="T:RI.Framework.Collections.ObjectModel.IPoolAware" /> if applicable.
                </note>
            </remarks>
        </member>
        <member name="P:RI.Framework.Collections.ObjectModel.IPool`1.Count">
            <summary>
                Gets the number of free items in the pool.
            </summary>
            <value>
                The number of free items in the pool.
            </value>
        </member>
        <member name="P:RI.Framework.Collections.ObjectModel.IPool`1.FreeItems">
            <summary>
                Gets the sequence of free items in the pool.
            </summary>
            <value>
                The sequence of free items in the pool.
            </value>
            <remarks>
                <note type="implement">
                    <see cref="P:RI.Framework.Collections.ObjectModel.IPool`1.FreeItems" /> must not be null.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.IPool`1.Clear">
            <summary>
                Removes all free items from the pool.
            </summary>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.IPool`1.Contains(`0)">
            <summary>
                Determines whether an item is in the pool as a free item.
            </summary>
            <param name="item"> The item which is checked to be in the pool as a free item. </param>
            <returns>
                true if the specified item is in the pool as a free item, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="item" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.IPool`1.Ensure(System.Int32)">
            <summary>
                Ensures that a minimum number of free items are in the pool by creating new items if necesseary.
            </summary>
            <param name="minItems"> The number of minimum required free items in the pool. </param>
            <returns>
                The number of newly created items.
                Zero if no items were created or the number of free items is already bigger than the specified minimum.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="minItems" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.IPool`1.Reduce(System.Int32)">
            <summary>
                Ensures that a maximum number of free items are in a pool by removing excess free items if necessary.
            </summary>
            <param name="maxItems"> The number of maximum allowed free items in the pool. </param>
            <returns>
                The number of removed items.
                Zero if no items were removed or the number of free items is already less than the specified maximum.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="maxItems" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.IPool`1.Return(`0)">
            <summary>
                Returns an item to the pool as a free item so that it can be recycled by <see cref="M:RI.Framework.Collections.ObjectModel.IPool`1.Take" />.
            </summary>
            <param name="item"> The item to return to the pool. </param>
            <remarks>
                <note type="note">
                    The behaviour when the same item is returned multiple times without being taken is defined by the <see cref="T:RI.Framework.Collections.ObjectModel.IPool`1" /> implementation.
                </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="item" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.IPool`1.Take">
            <summary>
                Takes the next free item from the pool or creates a new one if there is no free item.
            </summary>
            <returns>
                The item taken from the pool or newly created.
            </returns>
        </member>
        <member name="T:RI.Framework.Collections.ObjectModel.IPoolAware">
            <summary>
                Supports pool awareness of items managed by an <see cref="T:RI.Framework.Collections.ObjectModel.IPool`1" /> implementation.
            </summary>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.IPoolAware.Created">
            <summary>
                Called after the object has been created by the pool.
            </summary>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.IPoolAware.Removed">
            <summary>
                Called after the object has been removed from the pool.
            </summary>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.IPoolAware.Returned">
            <summary>
                Called after the object has been returned to the pool.
            </summary>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.IPoolAware.Taking">
            <summary>
                Called before the object is taken from the pool.
            </summary>
        </member>
        <member name="T:RI.Framework.Collections.ObjectModel.IPoolExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:RI.Framework.Collections.ObjectModel.IPool`1" /> type and its implementations.
            </summary>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.IPoolExtensions.ReduceEnsure``1(RI.Framework.Collections.ObjectModel.IPool{``0},System.Int32)">
            <summary>
                Changes a pool so that it contains a specified exact number of free items.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="pool" />. </typeparam>
            <param name="pool"> The pool. </param>
            <param name="numItems"> The number of free items the pool must have. </param>
            <returns>
                The change in free items which was necessary to get the specified number of free items.
                The value is positive if new items were created, negative if free items were removed, or zero if the pool already contained the specified number of free items.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="pool" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="numItems" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.IPoolExtensions.ReturnRange``1(RI.Framework.Collections.ObjectModel.IPool{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns multiple items to a pool for recycling.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="pool" />. </typeparam>
            <param name="pool"> The pool. </param>
            <param name="items"> The sequence of items to be returned to the pool. </param>
            <returns>
                The number of items returned to the pool.
                Zero if the sequence contained no elements.
            </returns>
            <remarks>
                <para>
                    <paramref name="items" /> is enumerated exactly once.
                </para>
                <note type="note">
                    The behaviour when the same item is returned multiple times without being taken is defined by the <see cref="T:RI.Framework.Collections.ObjectModel.IPool`1" /> implementation.
                </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="pool" /> or <paramref name="items" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.IPoolExtensions.ReturnRange``1(RI.Framework.Collections.ObjectModel.IPool{``0},System.Collections.Generic.IList{``0})">
            <summary>
                Returns multiple items to a pool for recycling.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="pool" />. </typeparam>
            <param name="pool"> The pool. </param>
            <param name="items"> The list of items to be returned to the pool. </param>
            <returns>
                The number of items returned to the pool.
                Zero if the list contained no elements.
            </returns>
            <remarks>
                <para>
                    <paramref name="items" /> is enumerated exactly once.
                </para>
                <note type="note">
                    The behaviour when the same item is returned multiple times without being taken is defined by the <see cref="T:RI.Framework.Collections.ObjectModel.IPool`1" /> implementation.
                </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="pool" /> or <paramref name="items" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.IPoolExtensions.ReturnRange``1(RI.Framework.Collections.ObjectModel.IPool{``0},``0[])">
            <summary>
                Returns multiple items to a pool for recycling.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="pool" />. </typeparam>
            <param name="pool"> The pool. </param>
            <param name="items"> The array of items to be returned to the pool. </param>
            <returns>
                The number of items returned to the pool.
                Zero if the array contained no elements.
            </returns>
            <remarks>
                <para>
                    <paramref name="items" /> is enumerated exactly once.
                </para>
                <note type="note">
                    The behaviour when the same item is returned multiple times without being taken is defined by the <see cref="T:RI.Framework.Collections.ObjectModel.IPool`1" /> implementation.
                </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="pool" /> or <paramref name="items" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.IPoolExtensions.TakeRange``1(RI.Framework.Collections.ObjectModel.IPool{``0},System.Int32)">
            <summary>
                Takes multiple items from a pool and creates as much new items as necessary.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="pool" />. </typeparam>
            <param name="pool"> The pool. </param>
            <param name="numItems"> The number of items to take. </param>
            <returns>
                The array of taken items.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="pool" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="numItems" /> is less than zero. </exception>
        </member>
        <member name="T:RI.Framework.Collections.ObjectModel.ITreeNode`1">
            <summary>
                Defines a generic interface for a single node in a tree.
            </summary>
            <typeparam name="T"> The type of the tree nodes in the tree. This is usually the type itself which inherits from <see cref="T:RI.Framework.Collections.ObjectModel.ITreeNode`1" />, e.g. <c> public class MyNode : ITreeNode&lt;MyNode&gt; { } </c>. </typeparam>
            <remarks>
                <para>
                    A tree consists of tree nodes but no other outside or contextual construct. Each tree node has zero or one parent node (<see cref="P:RI.Framework.Collections.ObjectModel.ITreeNode`1.Parent" />) and zero, one, or more child nodes (<see cref="P:RI.Framework.Collections.ObjectModel.ITreeNode`1.Children" /> ).
                </para>
            </remarks>
        </member>
        <member name="P:RI.Framework.Collections.ObjectModel.ITreeNode`1.Children">
            <summary>
                Gets the list of child nodes of this tree node.
            </summary>
            <value>
                The list of child nodes of this tree node.
            </value>
            <remarks>
                <note type="implement">
                    <see cref="P:RI.Framework.Collections.ObjectModel.ITreeNode`1.Children" /> must not be null.
                </note>
            </remarks>
        </member>
        <member name="P:RI.Framework.Collections.ObjectModel.ITreeNode`1.Parent">
            <summary>
                Gets the parent node of this tree node.
            </summary>
            <value>
                The parent node of this tree node or null if this tree node has no parent node.
            </value>
        </member>
        <member name="T:RI.Framework.Collections.ObjectModel.ITreeNodeExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:RI.Framework.Collections.ObjectModel.ITreeNode`1" /> type and its implementations.
            </summary>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.ITreeNodeExtensions.GetChildren``1(RI.Framework.Collections.ObjectModel.ITreeNode{``0},System.Boolean)">
            <summary>
                Gets a list of all child nodes of a tree node.
            </summary>
            <typeparam name="T"> The type of the tree nodes in the tree. </typeparam>
            <param name="treeNode"> The tree node. </param>
            <param name="includeSelf"> Specifies whether <paramref name="treeNode" /> itself should be included in the resulting list. </param>
            <returns>
                The list with all child nodes.
                The list is empty if there are no child nodes and <paramref name="includeSelf" /> is false.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="treeNode" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.ITreeNodeExtensions.GetChildrenRecursive``1(RI.Framework.Collections.ObjectModel.ITreeNode{``0},System.Boolean)">
            <summary>
                Gets a list of all child nodes, grand-child nodes, grand-grand-child nodes, etc. of a tree node.
            </summary>
            <typeparam name="T"> The type of the tree nodes in the tree. </typeparam>
            <param name="treeNode"> The tree node. </param>
            <param name="includeSelf"> Specifies whether <paramref name="treeNode" /> itself should be included in the resulting list. </param>
            <returns>
                The list with all child nodes, grand-child nodes, gran-grand child nodes, etc.
                The list is empty if there are no child nodes and <paramref name="includeSelf" /> is false.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="treeNode" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.ITreeNodeExtensions.GetLeafs``1(RI.Framework.Collections.ObjectModel.ITreeNode{``0})">
            <summary>
                Gets a list of all leaf nodes of a tree node.
            </summary>
            <typeparam name="T"> The type of the tree nodes in the tree. </typeparam>
            <param name="treeNode"> The tree node. </param>
            <returns>
                The list with all leaf nodes.
                The list contains only <paramref name="treeNode" /> if it is a leaf itself.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="treeNode" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.ITreeNodeExtensions.GetLeafsRecursive``1(RI.Framework.Collections.ObjectModel.ITreeNode{``0})">
            <summary>
                Gets a list of all leaf nodes of and below a tree node.
            </summary>
            <typeparam name="T"> The type of the tree nodes in the tree. </typeparam>
            <param name="treeNode"> The tree node. </param>
            <returns>
                The list with all leaf nodes.
                The list contains only <paramref name="treeNode" /> if it is a leaf itself.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="treeNode" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.ITreeNodeExtensions.GetLevel``1(RI.Framework.Collections.ObjectModel.ITreeNode{``0})">
            <summary>
                Gets the level or rank respectively of a tree node, relative to the root.
            </summary>
            <typeparam name="T"> The type of the tree nodes in the tree. </typeparam>
            <param name="treeNode"> The tree node. </param>
            <returns>
                The level of the tree node relative to the root.
                The root itself has a level of zero.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="treeNode" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.ITreeNodeExtensions.GetParents``1(RI.Framework.Collections.ObjectModel.ITreeNode{``0},System.Boolean)">
            <summary>
                Gets a list of all parent nodes up to the root node of a tree node.
            </summary>
            <typeparam name="T"> The type of the tree nodes in the tree. </typeparam>
            <param name="treeNode"> The tree node. </param>
            <param name="includeSelf"> Specifies whether <paramref name="treeNode" /> itself should be included in the resulting list. </param>
            <returns>
                The list with all parent nodes.
                The list is empty if <paramref name="treeNode" /> itself is the root node and <paramref name="includeSelf" /> is false.
                The list is ordered so that the first item is the root node and the last item is <paramref name="treeNode" /> itself or its parent, depending on <paramref name="includeSelf" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="treeNode" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.ITreeNodeExtensions.GetRoot``1(RI.Framework.Collections.ObjectModel.ITreeNode{``0})">
            <summary>
                Gets the root node of a tree node.
            </summary>
            <typeparam name="T"> The type of the tree nodes in the tree. </typeparam>
            <param name="treeNode"> The tree node. </param>
            <returns>
                The root node of a tree node.
                If <paramref name="treeNode" /> itself is the root node, <paramref name="treeNode" /> is returned.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="treeNode" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.ITreeNodeExtensions.GetSiblings``1(RI.Framework.Collections.ObjectModel.ITreeNode{``0},System.Boolean)">
            <summary>
                Gets a list of all sibling nodes of a tree node.
            </summary>
            <typeparam name="T"> The type of the tree nodes in the tree. </typeparam>
            <param name="treeNode"> The tree node. </param>
            <param name="includeSelf"> Specifies whether <paramref name="treeNode" /> itself should be included in the resulting list. </param>
            <returns>
                The list with all sibling nodes.
                The list is empty if there are no sibling nodes and <paramref name="includeSelf" /> is false.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="treeNode" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.ITreeNodeExtensions.IsChild``1(RI.Framework.Collections.ObjectModel.ITreeNode{``0})">
            <summary>
                Determines whether a tree node is a child node.
            </summary>
            <typeparam name="T"> The type of the tree nodes in the tree. </typeparam>
            <param name="treeNode"> The tree node. </param>
            <returns>
                true if the tree node is a child node, false otherwise.
            </returns>
            <remarks>
                <para>
                    A child node is a tree node which has a parent node.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="treeNode" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.ITreeNodeExtensions.IsLeaf``1(RI.Framework.Collections.ObjectModel.ITreeNode{``0})">
            <summary>
                Determines whether a tree node is a leaf node.
            </summary>
            <typeparam name="T"> The type of the tree nodes in the tree. </typeparam>
            <param name="treeNode"> The tree node. </param>
            <returns>
                true if the tree node is a leaf node, false otherwise.
            </returns>
            <remarks>
                <para>
                    A leaf node is a tree node which has no child nodes.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="treeNode" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.ITreeNodeExtensions.IsParent``1(RI.Framework.Collections.ObjectModel.ITreeNode{``0})">
            <summary>
                Determines whether a tree node is a parent node.
            </summary>
            <typeparam name="T"> The type of the tree nodes in the tree. </typeparam>
            <param name="treeNode"> The tree node. </param>
            <returns>
                true if the tree node is a parent node, false otherwise.
            </returns>
            <remarks>
                <para>
                    A parent node is a tree node which has at least one child node.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="treeNode" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.ITreeNodeExtensions.IsRoot``1(RI.Framework.Collections.ObjectModel.ITreeNode{``0})">
            <summary>
                Determines whether a tree node is a root node.
            </summary>
            <typeparam name="T"> The type of the tree nodes in the tree. </typeparam>
            <param name="treeNode"> The tree node. </param>
            <returns>
                true if the tree node is a root node, false otherwise.
            </returns>
            <remarks>
                <para>
                    A root node is a tree node which has no parent node.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="treeNode" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.ITreeNodeExtensions.IsSibling``1(RI.Framework.Collections.ObjectModel.ITreeNode{``0})">
            <summary>
                Determines whether a tree node is a sibling node or has sibling nodes respectively.
            </summary>
            <typeparam name="T"> The type of the tree nodes in the tree. </typeparam>
            <param name="treeNode"> The tree node. </param>
            <returns>
                true if the tree node is a sibling node, false otherwise.
            </returns>
            <remarks>
                <para>
                    A sibling node is a tree node which parent has at least one other child node besides the tree node itself.
                    A tree node which has no parent is not a sibling node.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="treeNode" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.ITreeNodeExtensions.RemoveChild``1(RI.Framework.Collections.ObjectModel.ITreeNode{``0},``0)">
            <summary>
                Removes a child node from a tree node.
            </summary>
            <typeparam name="T"> The type of the tree nodes in the tree. </typeparam>
            <param name="treeNode"> The tree node. </param>
            <param name="item"> The child node to remove. </param>
            <returns>
                true if the child node was removed, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="treeNode" /> or <paramref name="item" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.ITreeNodeExtensions.RemoveChildRecursive``1(RI.Framework.Collections.ObjectModel.ITreeNode{``0},``0)">
            <summary>
                Removes a child node recursively from a tree node.
            </summary>
            <typeparam name="T"> The type of the tree nodes in the tree. </typeparam>
            <param name="treeNode"> The tree node. </param>
            <param name="item"> The child node to remove. </param>
            <returns>
                true if the child node was removed, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="treeNode" /> or <paramref name="item" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.ITreeNodeExtensions.RemoveChildren``1(RI.Framework.Collections.ObjectModel.ITreeNode{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Removes multiple child nodes from a tree node.
            </summary>
            <typeparam name="T"> The type of the tree nodes in the tree. </typeparam>
            <param name="treeNode"> The tree node. </param>
            <param name="items"> The sequence of child nodes to remove. </param>
            <returns>
                The number of child nodes which were removed.
                Zero if the sequence contains no elements or no child nodes were removed.
            </returns>
            <remarks>
                <para>
                    <paramref name="items" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="treeNode" /> or <paramref name="items" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.ITreeNodeExtensions.RemoveChildrenRecursive``1(RI.Framework.Collections.ObjectModel.ITreeNode{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Removes multiple child nodes recursively from a tree node.
            </summary>
            <typeparam name="T"> The type of the tree nodes in the tree. </typeparam>
            <param name="treeNode"> The tree node. </param>
            <param name="items"> The sequence of child nodes to remove. </param>
            <returns>
                The number of child nodes which were removed.
                Zero if the sequence contains no elements or no child nodes were removed.
            </returns>
            <remarks>
                <para>
                    <paramref name="items" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="treeNode" /> or <paramref name="items" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.ITreeNodeExtensions.RemoveChildrenWhere``1(RI.Framework.Collections.ObjectModel.ITreeNode{``0},System.Func{``0,System.Boolean})">
            <summary>
                Removes all child nodes from a tree node which satisfy a specified condition.
            </summary>
            <typeparam name="T"> The type of the tree nodes in the tree. </typeparam>
            <param name="treeNode"> The tree node. </param>
            <param name="condition"> The function which tests each child node for a condition. </param>
            <returns>
                The list with child nodes which were removed.
                The list is empty if no child nodes were removed.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="treeNode" /> or <paramref name="condition" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.ITreeNodeExtensions.RemoveChildrenWhereRecursive``1(RI.Framework.Collections.ObjectModel.ITreeNode{``0},System.Func{``0,System.Boolean})">
            <summary>
                Removes recursively all child nodes from a tree node which satisfy a specified condition.
            </summary>
            <typeparam name="T"> The type of the tree nodes in the tree. </typeparam>
            <param name="treeNode"> The tree node. </param>
            <param name="condition"> The function which tests each child node for a condition. </param>
            <returns>
                The list with child nodes which were removed.
                The list is empty if no child nodes were removed.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="treeNode" /> or <paramref name="condition" /> is null. </exception>
        </member>
        <member name="T:RI.Framework.Collections.ObjectModel.Pool`1">
            <summary>
                Implements a simple pool which supports events for taking and returning.
            </summary>
            <typeparam name="T"> The type of objects which can be stored and recycled by the pool. </typeparam>
            <remarks>
                <para>
                    This pool implementation supports <see cref="T:RI.Framework.Collections.ObjectModel.IPoolAware" />.
                    See <see cref="T:RI.Framework.Collections.ObjectModel.PoolBase`1" /> for more details.
                </para>
            </remarks>
            <example>
                <para>
                    The following example shows how a <see cref="T:RI.Framework.Collections.ObjectModel.Pool`1" /> can be used:
                </para>
                <code language="cs">
            <![CDATA[
            // create a pool with initially one free item
            var pool = new Pool<MyObject>(1);
            pool.Created += x => x.Initialize();
            
            // get an item from the pool (the first one already exists as a free item in the pool)
            var item1 = pool.Take();
            
            // get another item from the pool (the second now needs to be created by the pool)
            var item2 = pool.Take();
            
            // ... do something ...
            
            // return one of the items
            pool.Return(item2);
            
            // ... do something ...
            
            // get another item (the former item2 is recycled)
            var item3 = pool.Take();
            ]]>
            </code>
            </example>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.Pool`1.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Collections.ObjectModel.Pool`1" />.
            </summary>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.Pool`1.#ctor(System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Collections.ObjectModel.Pool`1" />.
            </summary>
            <param name="capacity"> The initial capacity of free items in the pool. </param>
            <remarks>
                <para>
                    <paramref name="capacity" /> is only a hint of the expected number of free items.
                    No free items are created so the initial count of free items in the pool is zero, regardless of the value of <paramref name="capacity" />.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="capacity" /> is less than zero. </exception>
        </member>
        <member name="E:RI.Framework.Collections.ObjectModel.Pool`1.Created">
            <summary>
                Raised when a new item is created.
            </summary>
        </member>
        <member name="E:RI.Framework.Collections.ObjectModel.Pool`1.Removed">
            <summary>
                Raised when a free item is removed from the pool.
            </summary>
        </member>
        <member name="E:RI.Framework.Collections.ObjectModel.Pool`1.Returned">
            <summary>
                Raised when an item is returned to the pool.
            </summary>
        </member>
        <member name="E:RI.Framework.Collections.ObjectModel.Pool`1.Taking">
            <summary>
                Raised when an item is taken from the pool.
            </summary>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.Pool`1.Create">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.Pool`1.OnCreated(`0)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.Pool`1.OnRemoved(`0)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.Pool`1.OnReturned(`0)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.Pool`1.OnTaking(`0)">
            <inheritdoc />
        </member>
        <member name="T:RI.Framework.Collections.ObjectModel.PoolBase`1">
            <summary>
                Implements a base class which can be used for <see cref="T:RI.Framework.Collections.ObjectModel.IPool`1" /> implementations.
            </summary>
            <typeparam name="T"> The type of objects which can be stored and recycled by the pool. </typeparam>
            <remarks>
                All pools derived from <see cref="T:RI.Framework.Collections.ObjectModel.PoolBase`1" /> support the <see cref="T:RI.Framework.Collections.ObjectModel.IPoolAware" /> interface.
                See <see cref="T:RI.Framework.Collections.ObjectModel.IPoolAware" /> for more details about support of <see cref="T:RI.Framework.Collections.ObjectModel.IPoolAware" />.
            </remarks>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.PoolBase`1.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Collections.ObjectModel.PoolBase`1" />.
            </summary>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.PoolBase`1.#ctor(System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Collections.ObjectModel.PoolBase`1" />.
            </summary>
            <param name="capacity"> The initial capacity of free items in the pool. </param>
            <remarks>
                <para>
                    <paramref name="capacity" /> is only a hint of the expected number of free items.
                    No free items are created so the initial count of free items in the pool is zero, regardless of the value of <paramref name="capacity" />.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="capacity" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.PoolBase`1.ReturnSafe(`0)">
            <summary>
                Returns an item to the pool as a free item so that it can be recycled by <see cref="M:RI.Framework.Collections.ObjectModel.IPool`1.Take" />.
            </summary>
            <param name="item"> The item to return to the pool. </param>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of free items in the pool.
                </para>
                <note type="important">
                    This return operation does check whether the item to be returned has already been returned to ensure consistency of the free and taken items.
                    If a more performant return operation is required, use <see cref="M:RI.Framework.Collections.ObjectModel.PoolBase`1.Return(`0)" /> instead.
                </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="item" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.PoolBase`1.Create">
            <summary>
                Called when a new item needs to be created.
            </summary>
            <returns>
                The instance of the newly created item.
            </returns>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.PoolBase`1.OnCreated(`0)">
            <summary>
                Called when an item is created.
            </summary>
            <param name="item"> The item which is created. </param>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.PoolBase`1.OnRemoved(`0)">
            <summary>
                Called when a free item is removed from the pool.
            </summary>
            <param name="item"> The free item which is removed from the pool. </param>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.PoolBase`1.OnReturned(`0)">
            <summary>
                Called when an item is returned to the pool.
            </summary>
            <param name="item"> The item which is returned to the pool. </param>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.PoolBase`1.OnTaking(`0)">
            <summary>
                Called when an item is taken from the pool.
            </summary>
            <param name="item"> The item which is taken from the pool. </param>
        </member>
        <member name="P:RI.Framework.Collections.ObjectModel.PoolBase`1.Count">
            <inheritdoc />
        </member>
        <member name="P:RI.Framework.Collections.ObjectModel.PoolBase`1.FreeItems">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.PoolBase`1.Clear">
            <inheritdoc />
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of free items in the pool.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.PoolBase`1.Contains(`0)">
            <inheritdoc />
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of free items in the pool.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.PoolBase`1.Ensure(System.Int32)">
            <inheritdoc />
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of items which need to be created.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.PoolBase`1.Reduce(System.Int32)">
            <inheritdoc />
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of free items which need to be removed.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.PoolBase`1.Return(`0)">
            <inheritdoc />
            <remarks>
                <para>
                    This is a O(1) operation.
                </para>
                <note type="important">
                    To increase performance, this return operation does not check whether the item to be returned has already been returned previously.
                    Returning an item which is already been returned leads to unpredictable behaviour.
                    If a safe return operation, checking whether an item has already been returned or not, at the cost of performance, is required, use <see cref="M:RI.Framework.Collections.ObjectModel.PoolBase`1.ReturnSafe(`0)" /> instead.
                </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="item" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.PoolBase`1.Take">
            <inheritdoc />
            <remarks>
                <para>
                    This is a O(1) operation.
                </para>
            </remarks>
        </member>
        <member name="T:RI.Framework.Collections.ObjectModel.TreeNode`1">
            <summary>
                Implements a simple tree node with an assigned value per tree node.
            </summary>
            <typeparam name="TValue"> The type of the value which is assigned to a tree node. </typeparam>
            <example>
                <para>
                    The following example shows how a <see cref="T:RI.Framework.Collections.ObjectModel.TreeNode`1" /> can be used:
                </para>
                <code language="cs">
            <![CDATA[
            // create root node
            var admiral = new TreeNode<string>("Francine F. Tallwood");
            
            // create subnodes
            var captain1 = admiral.AddChild("Gregory M. T. Heads");
            var captain2 = admiral.AddChild("Adrian Heisenburg");
            
            // create subsubnodes
            var commander1 = captain1.AddChild("Harry Gunlaf");
            var commander2 = captain1.AdChild("Wayne Kacynczkyij");
            var commander3 = captain2.AddChild("Barbara Walker");
            var commander4 = captain2.AddChild("Ferdinand Eisenmeier");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.TreeNode`1.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Collections.ObjectModel.TreeNodeBase`1" />.
            </summary>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.TreeNode`1.#ctor(`0)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Collections.ObjectModel.TreeNodeBase`1" />.
            </summary>
            <param name="value"> The value assigned to this tree node. </param>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.TreeNode`1.#ctor(System.Collections.Generic.IEnumerable{RI.Framework.Collections.ObjectModel.TreeNode{`0}})">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Collections.ObjectModel.TreeNodeBase`1" />.
            </summary>
            <param name="children"> A sequence if child nodes initially added to the new tree node. </param>
            <remarks>
                <para>
                    <paramref name="children" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="children" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.TreeNode`1.#ctor(`0,System.Collections.Generic.IEnumerable{RI.Framework.Collections.ObjectModel.TreeNode{`0}})">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Collections.ObjectModel.TreeNodeBase`1" />.
            </summary>
            <param name="value"> The value assigned to this tree node. </param>
            <param name="children"> A sequence if child nodes initially added to the new tree node. </param>
            <remarks>
                <para>
                    <paramref name="children" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="children" /> is null. </exception>
        </member>
        <member name="P:RI.Framework.Collections.ObjectModel.TreeNode`1.Value">
            <summary>
                Gets or sets the value assigned to this tree node.
            </summary>
            <value>
                The value assigned to this tree node.
            </value>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.TreeNode`1.AddChild">
            <summary>
                Creates and adds a new child node to this tree node.
            </summary>
            <returns>
                The newly created and added child node.
            </returns>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.TreeNode`1.AddChild(`0)">
            <summary>
                Creates and adds a new child node to this tree node.
            </summary>
            <param name="value"> The value to be assigned to the new child node. </param>
            <returns>
                The newly created and added child node.
            </returns>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.TreeNode`1.AddChildren(System.Int32)">
            <summary>
                Creates and adds a number of new child nodes to this tree node.
            </summary>
            <param name="numChildren"> The number of child nodes to add. </param>
            <returns>
                The list of newly created and added child nodes.
                The list is empty if <paramref name="numChildren" /> is zero.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="numChildren" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.TreeNode`1.AddChildren(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Creates and adds new child nodes to this tree node.
            </summary>
            <param name="values"> The sequence of values to be assigned to the new child nodes. </param>
            <returns>
                The list of newly created and added child nodes.
                The list is empty if <paramref name="values" /> contained no elements.
            </returns>
            <remarks>
                <para>
                    <paramref name="values" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.TreeNode`1.Clone">
            <summary>
                Creates a clone of this tree node, including its assigned value and all its child nodes.
            </summary>
            <returns>
                The clone of this tree node.
            </returns>
            <remarks>
                <para>
                    The clone will be a root node with a fully cloned tree structure of and below this tree node, which is structurally independent from this tree node or any other node in this tree.
                </para>
                <para>
                    The <see cref="P:RI.Framework.Collections.ObjectModel.TreeNode`1.Value" /> of the cloned tree nodes are also cloned if <typeparamref name="TValue" /> implements <see cref="T:RI.Framework.Utilities.ObjectModel.ICloneable`1" /> or <see cref="T:System.ICloneable" />.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.TreeNode`1.System#ICloneable#Clone">
            <inheritdoc cref="M:RI.Framework.Collections.ObjectModel.TreeNode`1.Clone" />
        </member>
        <member name="T:RI.Framework.Collections.ObjectModel.TreeNodeBase`1">
            <summary>
                Implements a base class which can be used for <see cref="T:RI.Framework.Collections.ObjectModel.ITreeNode`1" /> implementations.
            </summary>
            <typeparam name="TNode"> The type of the tree nodes in the tree. This is usually the type itself which inherits from <see cref="T:RI.Framework.Collections.ObjectModel.TreeNodeBase`1" />, e.g. <c> public class MyNode : TreeNodeBase&lt;MyNode&gt; { } </c>. </typeparam>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.TreeNodeBase`1.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Collections.ObjectModel.TreeNodeBase`1" />.
            </summary>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.TreeNodeBase`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Collections.ObjectModel.TreeNodeBase`1" />.
            </summary>
            <param name="children"> A sequence of child nodes initially added to the new tree node. </param>
            <remarks>
                <para>
                    <paramref name="children" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="children" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.TreeNodeBase`1.OnChildAdded(`0)">
            <summary>
                Called after a child node was added to this tree node.
            </summary>
            <param name="child"> The child node which was added. </param>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.TreeNodeBase`1.OnChildAdding(`0)">
            <summary>
                Called before a child node is being added to this tree node.
            </summary>
            <param name="child"> The child node being added. </param>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.TreeNodeBase`1.OnChildRemoved(`0)">
            <summary>
                Called after a child node was removed from this tree node.
            </summary>
            <param name="child"> The child node which was removed. </param>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.TreeNodeBase`1.OnChildRemoving(`0)">
            <summary>
                Called before a child node is being removed from this tree node.
            </summary>
            <param name="child"> The child node being removed. </param>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.TreeNodeBase`1.OnParentChanged(`0)">
            <summary>
                Called after the parent node of this tree node has changed.
            </summary>
            <param name="newParent"> The new parent node. </param>
        </member>
        <member name="M:RI.Framework.Collections.ObjectModel.TreeNodeBase`1.OnParentChanging(`0)">
            <summary>
                Called before the parent node of this tree node is being changed.
            </summary>
            <param name="newParent"> The new parent node. </param>
        </member>
        <member name="P:RI.Framework.Collections.ObjectModel.TreeNodeBase`1.Children">
            <inheritdoc />
        </member>
        <member name="P:RI.Framework.Collections.ObjectModel.TreeNodeBase`1.Parent">
            <inheritdoc />
        </member>
        <member name="T:RI.Framework.Collections.ObjectModel.NamespaceDoc">
            <summary>
                Contains collection types for creating object models.
            </summary>
        </member>
        <member name="T:RI.Framework.Collections.QueueExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.Collections.Generic.Queue`1" /> type.
            </summary>
        </member>
        <member name="M:RI.Framework.Collections.QueueExtensions.DequeueAll``1(System.Collections.Generic.Queue{``0})">
            <summary>
                Gets all the items from a queue in the order they are dequeue'ed and removes them.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="queue" />. </typeparam>
            <param name="queue"> The queue. </param>
            <returns>
                The list which contains all the items of the queue in the order they are dequeue'ed.
                The list is empty if the queue contains no items.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="queue" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.QueueExtensions.EnqueueRange``1(System.Collections.Generic.Queue{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Enqueues multiple items to a queue.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="queue" />. </typeparam>
            <param name="queue"> The queue. </param>
            <param name="items"> The sequence of items to enqueue to the queue. </param>
            <returns>
                The number of items enqueued to the queue.
            </returns>
            <remarks>
                <para>
                    The items in <paramref name="items" /> are enqueued in the order they are enumerated.
                </para>
                <para>
                    <paramref name="items" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="queue" /> or <paramref name="items" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.QueueExtensions.PeekAll``1(System.Collections.Generic.Queue{``0})">
            <summary>
                Gets all the items from a queue in the order they would be dequeue'ed without removing them.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="queue" />. </typeparam>
            <param name="queue"> The queue. </param>
            <returns>
                The list which contains all the items of the queue in the order they would be dequeue'ed.
                The list is empty if the queue contains no items.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="queue" /> is null. </exception>
        </member>
        <member name="T:RI.Framework.Collections.StackExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.Collections.Generic.Stack`1" /> type.
            </summary>
        </member>
        <member name="M:RI.Framework.Collections.StackExtensions.PeekAll``1(System.Collections.Generic.Stack{``0})">
            <summary>
                Gets all the items from a stack in the order they would be pop'ed without removing them.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="stack" />. </typeparam>
            <param name="stack"> The stack. </param>
            <returns>
                The list which contains all the items of the stack in the order they would be pop'ed.
                The list is empty if the stack contains no items.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="stack" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.StackExtensions.PopAll``1(System.Collections.Generic.Stack{``0})">
            <summary>
                Gets all the items from a stack in the order they are pop'ed and removes them.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="stack" />. </typeparam>
            <param name="stack"> The stack. </param>
            <returns>
                The list which contains all the items of the stack in the order they are pop'ed.
                The list is empty if the stack contains no items.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="stack" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Collections.StackExtensions.PushRange``1(System.Collections.Generic.Stack{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Pushes multiple items to a stack.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="stack" />. </typeparam>
            <param name="stack"> The stack. </param>
            <param name="items"> The sequence of items to push to the stack. </param>
            <returns>
                The number of items pushed to the stack.
            </returns>
            <remarks>
                <para>
                    The items in <paramref name="items" /> are pushed in the order they are enumerated.
                </para>
                <para>
                    <paramref name="items" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="stack" /> or <paramref name="items" /> is null. </exception>
        </member>
        <member name="T:RI.Framework.Collections.NamespaceDoc">
            <summary>
                Contains utilities for working with collections in general.
            </summary>
        </member>
        <member name="T:RI.Framework.Composition.Catalogs.ScriptingCatalog">
            <summary>
                Implements a composition catalog which contains all types of a Unity projects scripting assemblies.
            </summary>
            <remarks>
                <para>
                    All assemblies of the Unity project which match the pattern <c> Assembly-CSharp*.dll </c> are searched for composable types.
                </para>
                <para>
                    The types of the scripting assemblies are used for type exporting (see <see cref="T:RI.Framework.Composition.CompositionContainer" /> for more details).
                </para>
                <para>
                    See <see cref="T:RI.Framework.Composition.CompositionCatalog" /> for more details about composition catalogs.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Composition.Catalogs.ScriptingCatalog.Reload">
            <summary>
                Ensures that all the types in the Unity projects scripting assemblies are loaded.
            </summary>
        </member>
        <member name="M:RI.Framework.Composition.Catalogs.ScriptingCatalog.UpdateItems">
            <inheritdoc />
        </member>
        <member name="T:RI.Framework.Composition.Catalogs.AssemblyCatalog">
            <summary>
                Implements a composition catalog which contains the types of assemblies.
            </summary>
            <remarks>
                <para>
                    The types of the assemblies are used for type exporting (see <see cref="T:RI.Framework.Composition.CompositionContainer" /> for more details).
                </para>
                <para>
                    See <see cref="T:RI.Framework.Composition.CompositionCatalog" /> for more details about composition catalogs.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Composition.Catalogs.AssemblyCatalog.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Composition.Catalogs.AssemblyCatalog" />.
            </summary>
            <param name="assemblies"> The sequence of assemblies whose types are used for composition. </param>
            <remarks>
                <para>
                    <paramref name="assemblies" /> is enumerated exactly once.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Composition.Catalogs.AssemblyCatalog.#ctor(System.Reflection.Assembly[])">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Composition.Catalogs.AssemblyCatalog" />.
            </summary>
            <param name="assemblies"> The array of assemblies whose types are used for composition. </param>
        </member>
        <member name="T:RI.Framework.Composition.Catalogs.DirectoryCatalog">
            <summary>
                Implements a composition catalog which searches a directory for assembly files and includes them in the catalog for composition.
            </summary>
            <remarks>
                <para>
                    The types of the assemblies found in the directory are used for type exporting (see <see cref="T:RI.Framework.Composition.CompositionContainer" /> for more details).
                </para>
                <para>
                    See <see cref="T:RI.Framework.Composition.CompositionCatalog" /> for more details about composition catalogs.
                </para>
                <note type="note">
                    Changes in the specified directory are not detected automatically.
                    Changes must be applied by calling <see cref="M:RI.Framework.Composition.Catalogs.DirectoryCatalog.Reload" />.
                </note>
                <note type="note">
                    Assembly which were loaded cannot be unloaded.
                    Similarly, assembly which failed to load will not be attempted to be loaded again.
                </note>
            </remarks>
        </member>
        <member name="F:RI.Framework.Composition.Catalogs.DirectoryCatalog.DefaultFilePattern">
            <summary>
                The default file pattern which is used to search for assembly files.
            </summary>
            <remarks>
                <para>
                    The default file pattern is <c> *.dll </c>.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Composition.Catalogs.DirectoryCatalog.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Composition.Catalogs.DirectoryCatalog" />.
            </summary>
            <param name="directoryPath"> The directory which is searched for assemblies. </param>
            <remarks>
                <para>
                    The default file pattern <see cref="F:RI.Framework.Composition.Catalogs.DirectoryCatalog.DefaultFilePattern" /> is used and search is performed non-recursive.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Composition.Catalogs.DirectoryCatalog.#ctor(System.String,System.String,System.Boolean)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Composition.Catalogs.DirectoryCatalog" />.
            </summary>
            <param name="directoryPath"> The directory which is searched for assemblies. </param>
            <param name="filePattern"> The file pattern which is used to search for assemblies. </param>
            <param name="recursive"> Specifies whether assemblies are searched recursive (including subdirectories) or not. </param>
        </member>
        <member name="P:RI.Framework.Composition.Catalogs.DirectoryCatalog.DirectoryPath">
            <summary>
                Gets the directory which is searched for assemblies.
            </summary>
            <value>
                The directory which is searched for assemblies.
            </value>
        </member>
        <member name="P:RI.Framework.Composition.Catalogs.DirectoryCatalog.FilePattern">
            <summary>
                Gets the file pattern which is used to search for assemblies.
            </summary>
            <value>
                The file pattern which is used to search for assemblies.
            </value>
        </member>
        <member name="P:RI.Framework.Composition.Catalogs.DirectoryCatalog.Recursive">
            <summary>
                Gets whether assemblies are searched recursive (including subdirectories) or not.
            </summary>
            <value>
                true if subdirectories of <see cref="P:RI.Framework.Composition.Catalogs.DirectoryCatalog.DirectoryPath" /> are searched for assemblies, false otherwise.
            </value>
        </member>
        <member name="M:RI.Framework.Composition.Catalogs.DirectoryCatalog.GetFailedFiles">
            <summary>
                Gets all the assembly files which failed to load.
            </summary>
            <returns>
                The array with the assembly files which failed to load.
                The array is empty if there are no assembly files which failed to load.
            </returns>
        </member>
        <member name="M:RI.Framework.Composition.Catalogs.DirectoryCatalog.GetLoadedFiles">
            <summary>
                Gets all the successfully loaded assembly files.
            </summary>
            <returns>
                The array with the successfully loaded assembly files.
                The array is empty if there are no successfully loaded assembly files.
            </returns>
        </member>
        <member name="M:RI.Framework.Composition.Catalogs.DirectoryCatalog.Reload">
            <summary>
                Checks the associated directory for new assemblies and loads them.
            </summary>
        </member>
        <member name="M:RI.Framework.Composition.Catalogs.DirectoryCatalog.UpdateItems">
            <inheritdoc />
        </member>
        <member name="T:RI.Framework.Composition.Catalogs.InstanceCatalog">
            <summary>
                Implements a composition catalog which contains objects.
            </summary>
            <remarks>
                <para>
                    The objects are used for object exporting (see <see cref="T:RI.Framework.Composition.CompositionContainer" /> for more details).
                </para>
                <para>
                    See <see cref="T:RI.Framework.Composition.CompositionCatalog" /> for more details about composition catalogs.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Composition.Catalogs.InstanceCatalog.#ctor(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Composition.Catalogs.InstanceCatalog" />.
            </summary>
            <param name="objects"> The sequence of objects which are used for composition. </param>
            <remarks>
                <para>
                    <paramref name="objects" /> is enumerated exactly once.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Composition.Catalogs.InstanceCatalog.#ctor(System.Object[])">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Composition.Catalogs.InstanceCatalog" />.
            </summary>
            <param name="objects"> The array of objects which are used for composition. </param>
        </member>
        <member name="T:RI.Framework.Composition.Catalogs.TypeCatalog">
            <summary>
                Implements a composition catalog which contains types.
            </summary>
            <remarks>
                <para>
                    The types are used for type exporting (see <see cref="T:RI.Framework.Composition.CompositionContainer" /> for more details).
                </para>
                <para>
                    See <see cref="T:RI.Framework.Composition.CompositionCatalog" /> for more details about composition catalogs.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Composition.Catalogs.TypeCatalog.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Composition.Catalogs.TypeCatalog" />.
            </summary>
            <param name="types"> The sequence of types which are used for composition. </param>
            <remarks>
                <para>
                    <paramref name="types" /> is enumerated exactly once.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Composition.Catalogs.TypeCatalog.#ctor(System.Type[])">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Composition.Catalogs.TypeCatalog" />.
            </summary>
            <param name="types"> The array of types which are used for composition. </param>
        </member>
        <member name="T:RI.Framework.Composition.Catalogs.NamespaceDoc">
            <summary>
                Contains implementations of composition catalogs.
            </summary>
        </member>
        <member name="T:RI.Framework.Composition.CompositionBatch">
            <summary>
                Provides batching functionality for managing exports and performing composition by collecting multiple composition actions, executed in one run by a <see cref="T:RI.Framework.Composition.CompositionContainer" />.
            </summary>
            <remarks>
                <para>
                    This class provides methods for managing exports and performing composition which are similar to the methods of <see cref="T:RI.Framework.Composition.CompositionContainer" /> and also have the same effect once executed by <see cref="M:RI.Framework.Composition.CompositionContainer.Compose(RI.Framework.Composition.CompositionBatch)" />.
                </para>
                <para>
                    See <see cref="T:RI.Framework.Composition.CompositionContainer" /> for details about managing exports and performing composition.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Composition.CompositionBatch.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Composition.CompositionBatch" />.
            </summary>
        </member>
        <member name="M:RI.Framework.Composition.CompositionBatch.AddCatalog(RI.Framework.Composition.CompositionCatalog)">
            <inheritdoc cref="M:RI.Framework.Composition.CompositionContainer.AddCatalog(RI.Framework.Composition.CompositionCatalog)" />
        </member>
        <member name="M:RI.Framework.Composition.CompositionBatch.AddExport(System.Object,System.Type)">
            <inheritdoc cref="M:RI.Framework.Composition.CompositionContainer.AddExport(System.Object,System.Type)" />
        </member>
        <member name="M:RI.Framework.Composition.CompositionBatch.AddExport(System.Object,System.String)">
            <inheritdoc cref="M:RI.Framework.Composition.CompositionContainer.AddExport(System.Object,System.String)" />
        </member>
        <member name="M:RI.Framework.Composition.CompositionBatch.AddExport(System.Type,System.Type)">
            <inheritdoc cref="M:RI.Framework.Composition.CompositionContainer.AddExport(System.Type,System.Type)" />
        </member>
        <member name="M:RI.Framework.Composition.CompositionBatch.AddExport(System.Type,System.String)">
            <inheritdoc cref="M:RI.Framework.Composition.CompositionContainer.AddExport(System.Type,System.String)" />
        </member>
        <member name="M:RI.Framework.Composition.CompositionBatch.Clear">
            <summary>
                Empties this composition batch so that it does not contain any composition actions.
            </summary>
        </member>
        <member name="M:RI.Framework.Composition.CompositionBatch.Recompose(RI.Framework.Composition.CompositionFlags)">
            <inheritdoc cref="M:RI.Framework.Composition.CompositionContainer.Recompose(RI.Framework.Composition.CompositionFlags)" />
        </member>
        <member name="M:RI.Framework.Composition.CompositionBatch.RemoveCatalog(RI.Framework.Composition.CompositionCatalog)">
            <inheritdoc cref="M:RI.Framework.Composition.CompositionContainer.RemoveCatalog(RI.Framework.Composition.CompositionCatalog)" />
        </member>
        <member name="M:RI.Framework.Composition.CompositionBatch.RemoveExport(System.Object,System.Type)">
            <inheritdoc cref="M:RI.Framework.Composition.CompositionContainer.RemoveExport(System.Object,System.Type)" />
        </member>
        <member name="M:RI.Framework.Composition.CompositionBatch.RemoveExport(System.Object,System.String)">
            <inheritdoc cref="M:RI.Framework.Composition.CompositionContainer.RemoveExport(System.Object,System.String)" />
        </member>
        <member name="M:RI.Framework.Composition.CompositionBatch.RemoveExport(System.Type,System.Type)">
            <inheritdoc cref="M:RI.Framework.Composition.CompositionContainer.RemoveExport(System.Type,System.Type)" />
        </member>
        <member name="M:RI.Framework.Composition.CompositionBatch.RemoveExport(System.Type,System.String)">
            <inheritdoc cref="M:RI.Framework.Composition.CompositionContainer.RemoveExport(System.Type,System.String)" />
        </member>
        <member name="M:RI.Framework.Composition.CompositionBatch.ResolveImports(System.Object,RI.Framework.Composition.CompositionFlags)">
            <inheritdoc cref="M:RI.Framework.Composition.CompositionContainer.ResolveImports(System.Object,RI.Framework.Composition.CompositionFlags)" />
        </member>
        <member name="T:RI.Framework.Composition.CompositionCatalog">
            <summary>
                Implements a base class for composition catalogs.
            </summary>
            <remarks>
                <para>
                    Composition catalogs contain exports (types or objects) which can be used by a <see cref="T:RI.Framework.Composition.CompositionContainer" /> for composition.
                </para>
                <para>
                    The exports managed by a composition catalog are encapsulated using <see cref="T:RI.Framework.Composition.CompositionCatalogItem" />.
                </para>
                <para>
                    Composition catalogs are used with model-based exporting.
                    This means that types or objects managed by a composition catalog are exported under the names as defined by the <see cref="T:RI.Framework.Composition.Model.ExportAttribute" /> they are decorated with.
                </para>
                <para>
                    A composition catalog can be added to multiple <see cref="T:RI.Framework.Composition.CompositionContainer" />s.
                </para>
                <para>
                    See <see cref="T:RI.Framework.Composition.CompositionContainer" /> for more details about composition.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Composition.CompositionCatalog.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Composition.CompositionCatalog" />.
            </summary>
        </member>
        <member name="P:RI.Framework.Composition.CompositionCatalog.Items">
            <summary>
                Gets the dictionary with the exports managed by this composition catalog.
            </summary>
            <value>
                The dictionary with the exports managed by this composition catalog.
            </value>
            <remarks>
                <para>
                    A dictionary key corresponds to the name under which an export is exported.
                    A dictionary value is a list of all exports which are exported under the associated name.
                </para>
                <note type="important">
                    In order to maintain its internal data of available exports in a <see cref="T:RI.Framework.Composition.CompositionContainer" />, this property is used every time the composition needs to be updated (e.g. when a composition catalog is added to or removed from a <see cref="T:RI.Framework.Composition.CompositionContainer" />, a <see cref="T:RI.Framework.Composition.CompositionCatalog" /> explicitly requests an update through <see cref="M:RI.Framework.Composition.CompositionCatalog.RequestRecompose" />, etc.).
                    This means that the update of this property needs to be controlled by the <see cref="T:RI.Framework.Composition.CompositionContainer" />.
                    Therefore, this property should only ever be updated by the <see cref="T:RI.Framework.Composition.CompositionCatalog" /> either at construction time of the <see cref="T:RI.Framework.Composition.CompositionCatalog" /> (for catalogs where the exports never change and therefore are defined at construction time) or when <see cref="M:RI.Framework.Composition.CompositionCatalog.UpdateItems" /> is called (for catalogs which can change their exports during runtime).
                    Furthermore, if the <see cref="T:RI.Framework.Composition.CompositionCatalog" /> itself detects a change of available exports, it must not update this property directly but instead request a proper recomposition from the <see cref="T:RI.Framework.Composition.CompositionContainer" /> by calling <see cref="M:RI.Framework.Composition.CompositionCatalog.RequestRecompose" /> (which in turn will call <see cref="M:RI.Framework.Composition.CompositionCatalog.UpdateItems" />).
                </note>
            </remarks>
        </member>
        <member name="M:RI.Framework.Composition.CompositionCatalog.Log(RI.Framework.Services.Logging.LogLevel,System.String,System.Object[])">
            <summary>
                Logs a message.
            </summary>
            <param name="severity"> The severity of the message. </param>
            <param name="format"> The message. </param>
            <param name="args"> The arguments which will be expanded into the message (comparable to <see cref="M:System.String.Format(System.String,System.Object[])" />). </param>
            <remarks>
                <para>
                    <see cref="T:RI.Framework.Services.Logging.ILogService" /> is used, obtained through <see cref="T:RI.Framework.Services.Logging.LogLocator" />.
                    If no <see cref="T:RI.Framework.Services.Logging.ILogService" /> is available, no logging is performed.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Composition.CompositionCatalog.RequestRecompose">
            <summary>
                Requests recomposition from all <see cref="T:RI.Framework.Composition.CompositionContainer" />s this <see cref="T:RI.Framework.Composition.CompositionCatalog" /> is added to when it detects the change of its exports.
            </summary>
            <remarks>
                <para>
                    See <see cref="P:RI.Framework.Composition.CompositionCatalog.Items" /> and <see cref="M:RI.Framework.Composition.CompositionCatalog.UpdateItems" /> for more details.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Composition.CompositionCatalog.UpdateItems">
            <summary>
                Called by the <see cref="T:RI.Framework.Composition.CompositionContainer" /> when it is required to have <see cref="P:RI.Framework.Composition.CompositionCatalog.Items" /> up-to-date.
            </summary>
            <remarks>
                <para>
                    <see cref="M:RI.Framework.Composition.CompositionCatalog.UpdateItems" /> is called independently for each <see cref="T:RI.Framework.Composition.CompositionContainer" /> this <see cref="T:RI.Framework.Composition.CompositionCatalog" /> is added to.
                </para>
                <note type="important">
                    <see cref="M:RI.Framework.Composition.CompositionCatalog.UpdateItems" /> can be repeatedly called, depending on the operations of the <see cref="T:RI.Framework.Composition.CompositionContainer" />.
                    Therefore, overloading <see cref="M:RI.Framework.Composition.CompositionCatalog.UpdateItems" /> shall not do anything in cases the exports have not changed.
                    This requires proper determination on each <see cref="M:RI.Framework.Composition.CompositionCatalog.UpdateItems" /> call whether <see cref="P:RI.Framework.Composition.CompositionCatalog.Items" /> is up-to-date or not.
                </note>
            </remarks>
        </member>
        <member name="T:RI.Framework.Composition.CompositionCatalogItem">
            <summary>
                Used to encapsulate a single export managed by a <see cref="T:RI.Framework.Composition.CompositionCatalog" />.
            </summary>
            <remarks>
                <para>
                    An export can only have either an assigned type (using the <see cref="P:RI.Framework.Composition.CompositionCatalogItem.Type" /> property) or an object (using the <see cref="P:RI.Framework.Composition.CompositionCatalogItem.Value" /> property), but not both.
                    Which one is used depends on the <see cref="T:RI.Framework.Composition.CompositionCatalog" /> which is managing the export.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Composition.CompositionCatalogItem.#ctor(System.String,System.Type)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Composition.CompositionCatalogItem" />.
            </summary>
            <param name="name"> The name under which the export is exported. </param>
            <param name="type"> The type which is exported. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="name" /> or <paramref name="type" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="name" /> is an empty string. </exception>
        </member>
        <member name="M:RI.Framework.Composition.CompositionCatalogItem.#ctor(System.String,System.Object)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Composition.CompositionCatalogItem" />.
            </summary>
            <param name="name"> The name under which the export is exported. </param>
            <param name="value"> The object which is exported. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="name" /> or <paramref name="value" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="name" /> is an empty string. </exception>
        </member>
        <member name="P:RI.Framework.Composition.CompositionCatalogItem.Name">
            <summary>
                Gets the name under which the export is exported.
            </summary>
            <value>
                The name under which the export is exported.
            </value>
        </member>
        <member name="P:RI.Framework.Composition.CompositionCatalogItem.Type">
            <summary>
                Gets the type which is exported.
            </summary>
            <value>
                The type which is exported or null if an object is exported instead.
            </value>
        </member>
        <member name="P:RI.Framework.Composition.CompositionCatalogItem.Value">
            <summary>
                Gets the object which is exported.
            </summary>
            <value>
                The object which is exported or null if a type is exported instead.
            </value>
        </member>
        <member name="T:RI.Framework.Composition.CompositionContainer">
            <summary>
                The main hub for doing composition.
            </summary>
            <remarks>
                <para>
                    <b> GENERAL </b>
                </para>
                <para>
                    Basically, &quot;composition&quot; means to resolve imports according to the known exports of a <see cref="T:RI.Framework.Composition.CompositionContainer" />.
                    The term &quot;container&quot; in <see cref="T:RI.Framework.Composition.CompositionContainer" /> already indicates that the exports are contained in the <see cref="T:RI.Framework.Composition.CompositionContainer" /> and taken from there to resolve the imports.
                </para>
                <para>
                    <b> EXPORTS &amp; IMPORTS </b>
                </para>
                <para>
                    The terms &quot;export&quot; and &quot;import&quot; might be confusing at first.
                    But it is simple:
                </para>
                <para>
                    &quot;Export&quot; means that a type or object is being &quot;exported for use&quot; or &quot;provided to a <see cref="T:RI.Framework.Composition.CompositionContainer" /> in some way&quot; (manual or model-based export) so that the <see cref="T:RI.Framework.Composition.CompositionContainer" /> can resolve the imports.
                </para>
                <para>
                    &quot;Import&quot; means that &quot;a value of a given type or name is required or requested in some way&quot; (manual or model-based import) and the <see cref="T:RI.Framework.Composition.CompositionContainer" /> provides that value (or &quot;imports it for use&quot;) by searching its known exports for an export of the same name as the import.
                </para>
                <para>
                    The search and provisioning of exports (of the same name as the import) is called &quot;resolving imports&quot; or simply &quot;resolving&quot;.
                </para>
                <para>
                    <b> NAMES </b>
                </para>
                <para>
                    What also might be confusing a little bit is the &quot;name&quot; of imports and exports.
                    Especially because sometimes a type and sometimes a name is mentioned.
                    When exports are managed by a <see cref="T:RI.Framework.Composition.CompositionContainer" />, or a <see cref="T:RI.Framework.Composition.CompositionCatalog" />, they are always identified using their name.
                    Resolving of imports is also always done using the name of the import.
                    Now, when types are used instead of names, the types are simply translated into what is called &quot;the types default name&quot;.
                    After the translation, the types are ignored and the exports and imports are continued to be handled using their translated names.
                    For example, the method <see cref="M:RI.Framework.Composition.CompositionContainer.AddExport(System.Object,System.Type)" /> does nothing else than determining the types default name and then calling <see cref="M:RI.Framework.Composition.CompositionContainer.AddExport(System.Object,System.String)" /> with that name.
                    This allows you to mix type-based import and export (using their types default names) and also name-based import and export (using any custom names you specify).
                    Finally, a types default name is simply its namespace and type name, e.g. the string &quot;<see cref="N:RI" />.<see cref="N:RI.Framework" />.<see cref="N:RI.Framework.Composition" />.<see cref="T:RI.Framework.Composition.CompositionContainer" />&quot; for <see cref="T:RI.Framework.Composition.CompositionContainer" />.
                </para>
                <para>
                    Note that names are case-sensitive.
                </para>
                <para>
                    <b> EXPORT COMPOSITION &amp; DEPENDENCY INJECTION (DI) </b>
                </para>
                <para>
                    A powerful aspect of the <see cref="T:RI.Framework.Composition.CompositionContainer" /> is the fact that all its known exports are composed themselves.
                    This means that all exports of a <see cref="T:RI.Framework.Composition.CompositionContainer" /> can have imports themselves (model-based imports using <see cref="T:RI.Framework.Composition.Model.ImportPropertyAttribute" />) and that those imports are automatically resolved by the <see cref="T:RI.Framework.Composition.CompositionContainer" />.
                    In other words, when getting an import from a <see cref="T:RI.Framework.Composition.CompositionContainer" />, all its own imports (if any) will be resolved (if possible).
                </para>
                <para>
                    This is how Dependency Injection is implemented in the <see cref="T:RI.Framework.Composition.CompositionContainer" />.
                    If you have a cascade of objects, with all kind of dependencies, you do not need to resolve them all by yourself by creating instances, dealing with singletons, or getting manual imports.
                    You just make the <see cref="T:RI.Framework.Composition.CompositionContainer" /> aware where to find all the possibly required objects or types (the simplest way to do this is to use an <see cref="T:RI.Framework.Composition.Catalogs.AssemblyCatalog" />) and then start to pull the objects from the <see cref="T:RI.Framework.Composition.CompositionContainer" /> as you need them.
                </para>
                <para>
                    <b> MANUAL &amp; MODEL-BASED EXPORTING </b>
                </para>
                <para>
                    There are two ways of exporting: Manual and model-based.
                </para>
                <para>
                    Manual export is done by calling one of the <c> AddExport </c> methods explicitly and stating a type or object and under which name it is exported.
                    Advantage: A type or object does not need any special preparation in order to be exported manually, any type or object can be exported (restrictions apply, see below).
                    Disadvantage: The type or object to be manually exported must be known and explicitly added to the <see cref="T:RI.Framework.Composition.CompositionContainer" />, adding a strong dependency to that type or object and/or a lot of boilerplate code just to discover the types or objects.
                </para>
                <para>
                    Model-based export is done by using a <see cref="T:RI.Framework.Composition.CompositionCatalog" /> and adding it to the <see cref="T:RI.Framework.Composition.CompositionContainer" /> using the <see cref="M:RI.Framework.Composition.CompositionContainer.AddCatalog(RI.Framework.Composition.CompositionCatalog)" /> method.
                    Advantage: No dependencies or references to the exported types or objects are required at compile time because, depending on the used <see cref="T:RI.Framework.Composition.CompositionCatalog" />, the composition catalog might collect all exports by itself (e.g. all prepared types in an <see cref="T:System.Reflection.Assembly" /> when using <see cref="T:RI.Framework.Composition.Catalogs.AssemblyCatalog" />).
                    Disadvantage: A type or object needs special preparation in order to be model-based exported, namely at least one or more <see cref="T:RI.Framework.Composition.Model.ExportAttribute" /> applied to it.
                </para>
                <para>
                    <b> TYPE &amp; OBJECT EXPORTS </b>
                </para>
                <para>
                    Two things can be exported: Types and objects.
                    When it says &quot;types or objects&quot;, it means that either a <see cref="T:System.Type" /> or an already instantiated <see cref="T:System.Object" /> of any type can be used.
                </para>
                <para>
                    A type can be exported by specifying the <see cref="T:System.Type" /> and under which name it is exported.
                    When an import is resolved to such a type export, a new instance of that type is created (if not yet created) or the previously created instance of that type is used and provided as the import value.
                    A type can be exported multiple times under different names.
                    It is important to know that the same type is only instantiated once in a <see cref="T:RI.Framework.Composition.CompositionContainer" />.
                    That means that the one instance of a particular type is used for all exports of that type, even if exported under different names.
                    Therefore, type exports are always shared, singleton-like exports.
                    <see cref="T:RI.Framework.Composition.Model.ExportConstructorAttribute" /> and <see cref="T:RI.Framework.Composition.Model.ExportCreatorAttribute" /> are used to help with the construction of instances for type exports.
                    <see cref="T:RI.Framework.Composition.Model.ExportCreatorAttribute" />s have higher priority than <see cref="T:RI.Framework.Composition.Model.ExportConstructorAttribute" />s when determining how an instance of a type export is to be created.
                    Only if the <see cref="T:RI.Framework.Composition.Model.ExportCreatorAttribute" />s yield no usable results or are not used, <see cref="T:RI.Framework.Composition.Model.ExportConstructorAttribute" /> is used.
                </para>
                <para>
                    An object can be exported by specifying the <see cref="T:System.Object" /> and under which name it is exported.
                    When an import is resolved to such an object export, the specified object itself is provided as the import value.
                    An object can be exported multiple times under different names.
                    Unlike type exports, object exports using different instances of the same type are possible.
                </para>
                <para>
                    Although type exports share one instance for the same type, it is possible to have type exports of a particular type and also one or more object exports with instances of that same type.
                    In such cases, a new shared instance for the type export is still created although there are object exports with instances of the same type.
                    Or in other words: Type exports and object exports do not share their instances.
                </para>
                <para>
                    <b> MANUAL &amp; MODEL-BASED IMPORTING </b>
                </para>
                <para>
                    There are two ways of importing: Manual and model-based.
                </para>
                <para>
                    Manual import is done by calling one of the <c> GetExport </c> or <c> GetExports </c> methods explicitly, stating the name for which the import value needs to be resolved.
                    This is usually used to retrieve an export from the <see cref="T:RI.Framework.Composition.CompositionContainer" /> programmatically.
                </para>
                <para>
                    Model-based import is done by decorating properties of composed types or objects with <see cref="T:RI.Framework.Composition.Model.ImportPropertyAttribute" />.
                    This is usually used for implementing Dependency Injection (DI).
                </para>
                <para>
                    <b> IMPLICIT &amp; EXPLICIT MODEL-BASED IMPORTING </b>
                </para>
                <para>
                    Model-based import comes in two flavours: Implicit and explicit.
                </para>
                <para>
                    Explicit model-based import is done by passing an object to the <see cref="M:RI.Framework.Composition.CompositionContainer.ResolveImports(System.Object,RI.Framework.Composition.CompositionFlags)" /> method.
                    The specified object gets then all its imports resolved and assigned once.
                    See <see cref="M:RI.Framework.Composition.CompositionContainer.ResolveImports(System.Object,RI.Framework.Composition.CompositionFlags)" /> for details.
                </para>
                <para>
                    Implicit model-based import is done automatically by the <see cref="T:RI.Framework.Composition.CompositionContainer" /> itself by resolving the imports of all its known exports.
                    The imports of the known exports of a <see cref="T:RI.Framework.Composition.CompositionContainer" /> are resolved whenever the composition changes (e.g. a manual export method is used or a composition catalog is added or removed) or a recomposition is executed (using the <see cref="M:RI.Framework.Composition.CompositionContainer.Recompose(RI.Framework.Composition.CompositionFlags)" /> method).
                </para>
                <para>
                    <b> SINGLE &amp; MULTIPLE IMPORTING </b>
                </para>
                <para>
                    Importing can be used in two ways: Single import and multiple import.
                </para>
                <para>
                    A single import is when one of the <c> GetExport </c> methods is used or when an <see cref="T:RI.Framework.Composition.Model.ImportPropertyAttribute" /> is applied to a normal property (means: a property not of type <see cref="T:RI.Framework.Composition.Model.Import" />).
                    In such cases, the first resolved import value is provided or assigned respectively.
                    If the import resolves to more than one value, the provided value is one of them but it is not defined which one.
                </para>
                <para>
                    A multiple import is when one of the <c> GetExports </c> methods is used or when an <see cref="T:RI.Framework.Composition.Model.ImportPropertyAttribute" /> is applied to a property of the type <see cref="T:RI.Framework.Composition.Model.Import" />.
                    In such cases, all the resolved import values are provided or assigned respectively.
                    Therefore, multiple types or object can be exported under the same name.
                </para>
                <para>
                    <b> ELIGIBLE TYPES </b>
                </para>
                <para>
                    Only non-abstract class types can be exported.
                    Only non-generic class or interface types can be imported.
                </para>
                <para>
                    <b> RECOMPOSITION &amp; TRACKING </b>
                </para>
                <para>
                    Model-based imports can be marked as &quot;recomposable&quot; using <see cref="T:RI.Framework.Composition.Model.ImportPropertyAttribute" />.<see cref="P:RI.Framework.Composition.Model.ImportPropertyAttribute.Recomposable" />.
                    This means that the imports of such properties are reimported or resolved again respectively whenever the composition for the corresponding name changes (e.g. a new export of that name gets added to the <see cref="T:RI.Framework.Composition.CompositionContainer" />).
                    However, this is only done using implicit model-based importing, meaning that only exports known to the <see cref="T:RI.Framework.Composition.CompositionContainer" /> get their recomposable imports updated.
                    Imports resolved using <see cref="M:RI.Framework.Composition.CompositionContainer.ResolveImports(System.Object,RI.Framework.Composition.CompositionFlags)" /> are not updated during a recomposition.
                    See <see cref="M:RI.Framework.Composition.CompositionContainer.Recompose(RI.Framework.Composition.CompositionFlags)" /> and <see cref="M:RI.Framework.Composition.CompositionContainer.ResolveImports(System.Object,RI.Framework.Composition.CompositionFlags)" /> for more details.
                </para>
                <para>
                    Model-based imports which are not recomposable remain their imported value, even if the corresponding export gets removed from the <see cref="T:RI.Framework.Composition.CompositionContainer" />.
                    Therefore, model-based imports which are expected to change must be made recomposable.
                    <see cref="T:RI.Framework.Composition.Model.IImporting" /> can be used to detect when imports have changed.
                </para>
                <para>
                    <b> UNDEFINED STATE </b>
                </para>
                <para>
                    If a <see cref="T:RI.Framework.Composition.CompositionException" /> is thrown during a composition, the state of the <see cref="T:RI.Framework.Composition.CompositionContainer" /> and all its compositions are undefined and might remain unusable.
                    Therefore, a <see cref="T:RI.Framework.Composition.CompositionException" /> should always be treated as a serious error which prevents the program from continueing normally.
                </para>
                <para>
                    <b> SELF-COMPOSITION </b>
                </para>
                <para>
                    A <see cref="T:RI.Framework.Composition.CompositionContainer" /> does not add itself as an export by default but can be added like any other manual or model-based object export (the <see cref="T:RI.Framework.Composition.CompositionContainer" /> has the <see cref="T:RI.Framework.Composition.Model.ExportAttribute" /> applied).
                    A <see cref="T:RI.Framework.Composition.CompositionContainer" /> which has an export of another <see cref="T:RI.Framework.Composition.CompositionContainer" /> does only export that other <see cref="T:RI.Framework.Composition.CompositionContainer" /> instance as it does any other object or type but does not also export the exports of that other <see cref="T:RI.Framework.Composition.CompositionContainer" />.
                </para>
                <para>
                    <b> MULTIPLE COMPOSITION CONTAINERS </b>
                </para>
                <para>
                    Multiple composition containers can coexist independently side-by-side.
                    They can also share the same exports and <see cref="T:RI.Framework.Composition.CompositionCatalog" />s.
                </para>
                <para>
                    <b> LOGGING </b>
                </para>
                <para>
                    A <see cref="T:RI.Framework.Composition.CompositionContainer" /> logs all composition operations.
                    <see cref="T:RI.Framework.Services.Logging.ILogService" /> is used for logging, obtained through <see cref="T:RI.Framework.Services.Logging.LogLocator" />.
                    If no <see cref="T:RI.Framework.Services.Logging.ILogService" /> is available, no logging is performed.
                </para>
            </remarks>
            <example>
                <para>
                    The following example shows how a <see cref="T:RI.Framework.Composition.CompositionContainer" /> can be used:
                </para>
                <code language="cs">
            <![CDATA[
            // create the container
            var container = new CompositionContainer();
            
            // automatically dispose all objects which implement <see cref="IDisposable"/> when removed from the container
            container.AutoDispose = true;
            
            // add a catalog (all types in the current assembly)
            container.AddCatalog(new AssemblyCatalog(Assembly.GetExecutingAssembly()));
            
            // start pulling instances from the container
            var sources = container.GetExports<IMySources>();
            var service = container.GetExport<MyService>();
            ]]>
            </code>
            </example>
        </member>
        <member name="M:RI.Framework.Composition.CompositionContainer.GetExportsOfType(System.Type)">
            <summary>
                Gets all names under which a type is exported (using <see cref="T:RI.Framework.Composition.Model.ExportAttribute" />).
            </summary>
            <param name="type"> The type whose export names are to be determined. </param>
            <returns>
                The set of names the specified type is exported under.
                The set is empty if the specified type has no exports defined.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="type" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Composition.CompositionContainer.GetNameOfType(System.Type)">
            <summary>
                Gets the default name of a type.
            </summary>
            <param name="type"> The type whose default name is to be determined. </param>
            <returns>
                The default name of the specified type.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="type" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Composition.CompositionContainer.ValidateExportInstance(System.Object)">
            <summary>
                Validates whether an object can be exported.
            </summary>
            <param name="instance"> The object to validate. </param>
            <returns>
                true if the object can be exported by a <see cref="T:RI.Framework.Composition.CompositionContainer" />, false otherwise.
            </returns>
            <remarks>
                <para>
                    An object can be exported if it is an instance of a class.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Composition.CompositionContainer.ValidateExportType(System.Type)">
            <summary>
                Validates whether a type can be exported.
            </summary>
            <param name="type"> The type to validate. </param>
            <returns>
                true if the type can be exported by a <see cref="T:RI.Framework.Composition.CompositionContainer" />, false otherwise.
            </returns>
            <remarks>
                <para>
                    A type can be exported if it is a non-abstract class type.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Composition.CompositionContainer.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Composition.CompositionContainer" />.
            </summary>
        </member>
        <member name="M:RI.Framework.Composition.CompositionContainer.Finalize">
            <summary>
                Garbage collects this instance of <see cref="T:RI.Framework.Composition.CompositionContainer" />.
            </summary>
        </member>
        <member name="P:RI.Framework.Composition.CompositionContainer.AutoDispose">
            <summary>
                Gets or sets whether exports have <see cref="M:System.IDisposable.Dispose" /> called when removed.
            </summary>
            <value>
                true if <see cref="M:System.IDisposable.Dispose" /> is called when an export which implements <see cref="T:System.IDisposable" /> is removed, false otherwise.
            </value>
            <rermarks>
                <para>
                    This setting applies to all instances which are exported, regardless whether they are object exports or instances created from type exports.
                </para>
                <para>
                    The default value is false.
                </para>
            </rermarks>
        </member>
        <member name="E:RI.Framework.Composition.CompositionContainer.CompositionChanged">
            <summary>
                Raised when the composition has changed.
            </summary>
            <remarks>
                <para>
                    This event is raised after recomposition is done.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Composition.CompositionContainer.AddCatalog(RI.Framework.Composition.CompositionCatalog)">
            <summary>
                Model-based export: Adds a composition catalog to use its exports for composition, using <see cref="T:RI.Framework.Composition.Model.ExportAttribute" />.
            </summary>
            <param name="catalog"> The composition catalog to add. </param>
            <remarks>
                <para>
                    If the specified catalog is already added, the composition remains unchanged.
                </para>
                <para>
                    This triggers an internal recomposition using <see cref="T:RI.Framework.Composition.CompositionFlags" />.<see cref="F:RI.Framework.Composition.CompositionFlags.Normal" />.
                    See <see cref="M:RI.Framework.Composition.CompositionContainer.Recompose(RI.Framework.Composition.CompositionFlags)" /> for details.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="catalog" /> is null. </exception>
            <exception cref="T:RI.Framework.Composition.CompositionException"> The internal recomposition failed. </exception>
        </member>
        <member name="M:RI.Framework.Composition.CompositionContainer.AddExport(System.Object,System.Type)">
            <summary>
                Manual export: Adds an object and exports it under the specified types default name for composition.
            </summary>
            <param name="instance"> The object to export. </param>
            <param name="exportType"> The type under whose default name the object is exported. </param>
            <remarks>
                <para>
                    If the specified object is already exported under the specified type, the composition remains unchanged.
                </para>
                <para>
                    This triggers an internal recomposition using <see cref="T:RI.Framework.Composition.CompositionFlags" />.<see cref="F:RI.Framework.Composition.CompositionFlags.Normal" />.
                    See <see cref="M:RI.Framework.Composition.CompositionContainer.Recompose(RI.Framework.Composition.CompositionFlags)" /> for details.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="instance" /> or <paramref name="exportType" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.InvalidTypeArgumentException"> <paramref name="instance" /> is not of a type which can be exported. </exception>
            <exception cref="T:RI.Framework.Composition.CompositionException"> The internal recomposition failed. </exception>
        </member>
        <member name="M:RI.Framework.Composition.CompositionContainer.AddExport(System.Object,System.String)">
            <summary>
                Manual export: Adds an object and exports it under the specified name for composition.
            </summary>
            <param name="instance"> The object to export. </param>
            <param name="exportName"> The name under which the object is exported. </param>
            <remarks>
                <para>
                    If the specified object is already exported under the specified name, the composition remains unchanged.
                </para>
                <para>
                    This triggers an internal recomposition using <see cref="T:RI.Framework.Composition.CompositionFlags" />.<see cref="F:RI.Framework.Composition.CompositionFlags.Normal" />.
                    See <see cref="M:RI.Framework.Composition.CompositionContainer.Recompose(RI.Framework.Composition.CompositionFlags)" /> for details.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="instance" /> or <paramref name="exportName" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.InvalidTypeArgumentException"> <paramref name="instance" /> is not of a type which can be exported. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="exportName" /> is an empty string. </exception>
            <exception cref="T:RI.Framework.Composition.CompositionException"> The internal recomposition failed. </exception>
        </member>
        <member name="M:RI.Framework.Composition.CompositionContainer.AddExport(System.Type,System.Type)">
            <summary>
                Manual export: Adds a type and exports it under the specified types default name for composition.
            </summary>
            <param name="type"> The type to export. </param>
            <param name="exportType"> The type under whose default name the type is exported. </param>
            <remarks>
                <para>
                    If the specified type is already exported under the specified name, the composition remains unchanged.
                </para>
                <para>
                    This triggers an internal recomposition using <see cref="T:RI.Framework.Composition.CompositionFlags" />.<see cref="F:RI.Framework.Composition.CompositionFlags.Normal" />.
                    See <see cref="M:RI.Framework.Composition.CompositionContainer.Recompose(RI.Framework.Composition.CompositionFlags)" /> for details.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="type" /> or <paramref name="exportType" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.InvalidTypeArgumentException"> <paramref name="type" /> is not of a type which can be exported. </exception>
            <exception cref="T:RI.Framework.Composition.CompositionException"> The internal recomposition failed. </exception>
        </member>
        <member name="M:RI.Framework.Composition.CompositionContainer.AddExport(System.Type,System.String)">
            <summary>
                Manual export: Adds a type and exports it under the specified name for composition.
            </summary>
            <param name="type"> The type to export. </param>
            <param name="exportName"> The name under which the type is exported. </param>
            <remarks>
                <para>
                    If the specified type is already exported under the specified type, the composition remains unchanged.
                </para>
                <para>
                    This triggers an internal recomposition using <see cref="T:RI.Framework.Composition.CompositionFlags" />.<see cref="F:RI.Framework.Composition.CompositionFlags.Normal" />.
                    See <see cref="M:RI.Framework.Composition.CompositionContainer.Recompose(RI.Framework.Composition.CompositionFlags)" /> for details.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="type" /> or <paramref name="exportName" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.InvalidTypeArgumentException"> <paramref name="type" /> is not of a type which can be exported. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="exportName" /> is an empty string. </exception>
            <exception cref="T:RI.Framework.Composition.CompositionException"> The internal recomposition failed. </exception>
        </member>
        <member name="M:RI.Framework.Composition.CompositionContainer.Clear">
            <summary>
                Removes all exports.
            </summary>
            <remarks>
                <para>
                    All exports of all catalogs, objects, and types are removed.
                </para>
            </remarks>
            <exception cref="T:RI.Framework.Composition.CompositionException"> The internal recomposition failed. </exception>
        </member>
        <member name="M:RI.Framework.Composition.CompositionContainer.Compose(RI.Framework.Composition.CompositionBatch)">
            <summary>
                Executes all composition actions in a <see cref="T:RI.Framework.Composition.CompositionBatch" />.
            </summary>
            <param name="batch"> The <see cref="T:RI.Framework.Composition.CompositionBatch" /> to execute. </param>
            <remarks>
                <para>
                    This triggers an internal recomposition using <see cref="T:RI.Framework.Composition.CompositionFlags" />.<see cref="F:RI.Framework.Composition.CompositionFlags.Normal" />.
                    See <see cref="M:RI.Framework.Composition.CompositionContainer.Recompose(RI.Framework.Composition.CompositionFlags)" /> for details.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="batch" /> is null. </exception>
            <exception cref="T:RI.Framework.Composition.CompositionException"> One or more imports cannot be resolved. </exception>
        </member>
        <member name="M:RI.Framework.Composition.CompositionContainer.GetExport``1">
            <summary>
                Manual import: Gets the first resolved value for the specified types default name.
            </summary>
            <typeparam name="T"> The type whose default name is resolved. </typeparam>
            <returns>
                The first resolved value which is exported under the specified types default name and which is of type <typeparamref name="T" />, null if no such value could be resolved.
            </returns>
            <exception cref="T:RI.Framework.Composition.CompositionException"> The resolving failed although matching exports were found. </exception>
        </member>
        <member name="M:RI.Framework.Composition.CompositionContainer.GetExport``1(System.Type)">
            <summary>
                Manual import: Gets the first resolved value for the specified types default name.
            </summary>
            <typeparam name="T"> The type the resolved value must be compatible with. </typeparam>
            <param name="exportType"> The type whose default name is resolved. </param>
            <returns>
                The first resolved value which is exported under the specified types default name and which is of type <typeparamref name="T" />, null if no such value could be resolved.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="exportType" /> is null. </exception>
            <exception cref="T:RI.Framework.Composition.CompositionException"> The resolving failed although matching exports were found. </exception>
        </member>
        <member name="M:RI.Framework.Composition.CompositionContainer.GetExport``1(System.String)">
            <summary>
                Manual import: Gets the first resolved value for the specified name.
            </summary>
            <typeparam name="T"> The type the resolved value must be compatible with. </typeparam>
            <param name="exportName"> The name which is resolved. </param>
            <returns>
                The first resolved value which is exported under the specified name and which is of type <typeparamref name="T" />, null if no such value could be resolved.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="exportName" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="exportName" /> is an empty string. </exception>
            <exception cref="T:RI.Framework.Composition.CompositionException"> The resolving failed although matching exports were found. </exception>
        </member>
        <member name="M:RI.Framework.Composition.CompositionContainer.GetExports``1">
            <summary>
                Manual import: Gets all resolved values for the specified types default name.
            </summary>
            <typeparam name="T"> The type whose default name is resolved. </typeparam>
            <returns>
                The list containing the resolved values.
                The list is empty if no values could be resolved or none of the values are of type <typeparamref name="T" />.
            </returns>
            <exception cref="T:RI.Framework.Composition.CompositionException"> The resolving failed although matching exports were found. </exception>
        </member>
        <member name="M:RI.Framework.Composition.CompositionContainer.GetExports``1(System.Type)">
            <summary>
                Manual import: Gets all resolved values for the specified types default name.
            </summary>
            <typeparam name="T"> The type the resolved values must be compatible with. </typeparam>
            <param name="exportType"> The type whose default name is resolved. </param>
            <returns>
                The list containing the resolved values.
                The list is empty if no values could be resolved or none of the values are of type <typeparamref name="T" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="exportType" /> is null. </exception>
            <exception cref="T:RI.Framework.Composition.CompositionException"> The resolving failed although matching exports were found. </exception>
        </member>
        <member name="M:RI.Framework.Composition.CompositionContainer.GetExports``1(System.String)">
            <summary>
                Manual import: Gets all resolved values for the specified name.
            </summary>
            <typeparam name="T"> The type the resolved values must be compatible with. </typeparam>
            <param name="exportName"> The name which is resolved. </param>
            <returns>
                The list containing the resolved values.
                The list is empty if no values could be resolved or none of the values are of type <typeparamref name="T" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="exportName" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="exportName" /> is an empty string. </exception>
            <exception cref="T:RI.Framework.Composition.CompositionException"> The resolving failed although matching exports were found. </exception>
        </member>
        <member name="M:RI.Framework.Composition.CompositionContainer.HasExport(System.Type)">
            <summary>
                Determines whether there is at least one value for importing of the specified types default name.
            </summary>
            <param name="exportType"> The type to check whether its default name can be resolved to at least one value for importing. </param>
            <returns>
                true if there is at least one value for the specified types default name, false otherwise.
            </returns>
            <remarks>
                <note type="note">
                    The imports for the specified types default name are not actually resolved, e.g. type exports are not instantiated.
                </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="exportType" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Composition.CompositionContainer.HasExport(System.String)">
            <summary>
                Determines whether there is at least one value for importing of the specified name.
            </summary>
            <param name="exportName"> The name to check whether it can be resolved to at least one value for importing. </param>
            <returns>
                true if there is at least one value for the specified name, false otherwise.
            </returns>
            <remarks>
                <note type="note">
                    The imports for the specified name are not actually resolved, e.g. type exports are not instantiated.
                </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="exportName" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="exportName" /> is an empty string. </exception>
        </member>
        <member name="M:RI.Framework.Composition.CompositionContainer.Recompose(RI.Framework.Composition.CompositionFlags)">
            <summary>
                Model-based import: Resolves the imports of all the exports currently managed by this <see cref="T:RI.Framework.Composition.CompositionContainer" />.
            </summary>
            <param name="composition"> The composition type which is going to be done on the exports. </param>
            <returns>
                true if any of the imports of at least one export were resolved or updated, false otherwise.
            </returns>
            <remarks>
                <para>
                    Internally, this method does nothing else than calling <see cref="M:RI.Framework.Composition.CompositionContainer.ResolveImports(System.Object,RI.Framework.Composition.CompositionFlags)" /> for each export which is currently contained in this <see cref="T:RI.Framework.Composition.CompositionContainer" />.
                    However, it is only done for object exports or instantiated type exports.
                    Nothing happens for type exports which are not instantiated (e.g. they were never resolved so far).
                </para>
            </remarks>
            <exception cref="T:RI.Framework.Composition.CompositionException"> One or more imports cannot be resolved. </exception>
        </member>
        <member name="M:RI.Framework.Composition.CompositionContainer.RemoveCatalog(RI.Framework.Composition.CompositionCatalog)">
            <summary>
                Model-based export: Removes a composition catalog so that its exports are no longer used for composition.
            </summary>
            <param name="catalog"> The composition catalog to remove. </param>
            <remarks>
                <para>
                    This triggers an internal recomposition using <see cref="T:RI.Framework.Composition.CompositionFlags" />.<see cref="F:RI.Framework.Composition.CompositionFlags.Normal" />.
                    See <see cref="M:RI.Framework.Composition.CompositionContainer.Recompose(RI.Framework.Composition.CompositionFlags)" /> for details.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="catalog" /> is null. </exception>
            <exception cref="T:RI.Framework.Composition.CompositionException"> The internal recomposition failed. </exception>
        </member>
        <member name="M:RI.Framework.Composition.CompositionContainer.RemoveExport(System.Object,System.Type)">
            <summary>
                Manual export: Removes an object exported under the specified types default name so that it is no longer used for composition.
            </summary>
            <param name="instance"> The exported object. </param>
            <param name="exportType"> The type under whose default name the object is exported. </param>
            <remarks>
                <para>
                    Only the export matching the specified object and type is removed.
                    If the same object is also exported under other types or names, those exports remain intact.
                </para>
                <para>
                    This triggers an internal recomposition using <see cref="T:RI.Framework.Composition.CompositionFlags" />.<see cref="F:RI.Framework.Composition.CompositionFlags.Normal" />.
                    See <see cref="M:RI.Framework.Composition.CompositionContainer.Recompose(RI.Framework.Composition.CompositionFlags)" /> for details.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="instance" /> or <paramref name="exportType" /> is null. </exception>
            <exception cref="T:RI.Framework.Composition.CompositionException"> The internal recomposition failed. </exception>
        </member>
        <member name="M:RI.Framework.Composition.CompositionContainer.RemoveExport(System.Object,System.String)">
            <summary>
                Manual export: Removes an object exported under the specified name so that it is no longer used for composition.
            </summary>
            <param name="instance"> The exported object. </param>
            <param name="exportName"> The name under which the object is exported. </param>
            <remarks>
                <para>
                    Only the export matching the specified object and name is removed.
                    If the same object is also exported under other types or names, those exports remain intact.
                </para>
                <para>
                    This triggers an internal recomposition using <see cref="T:RI.Framework.Composition.CompositionFlags" />.<see cref="F:RI.Framework.Composition.CompositionFlags.Normal" />.
                    See <see cref="M:RI.Framework.Composition.CompositionContainer.Recompose(RI.Framework.Composition.CompositionFlags)" /> for details.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="instance" /> or <paramref name="exportName" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="exportName" /> is an empty string. </exception>
            <exception cref="T:RI.Framework.Composition.CompositionException"> The internal recomposition failed. </exception>
        </member>
        <member name="M:RI.Framework.Composition.CompositionContainer.RemoveExport(System.Type,System.Type)">
            <summary>
                Manual export: Removes a type exported under the specified types default name so that it is no longer used for composition.
            </summary>
            <param name="type"> The exported type. </param>
            <param name="exportType"> The type under whose default name the type is exported. </param>
            <remarks>
                <para>
                    Only the export matching the specified types is removed.
                    If the same type is also exported under other types or names, those exports remain intact.
                </para>
                <para>
                    This triggers an internal recomposition using <see cref="T:RI.Framework.Composition.CompositionFlags" />.<see cref="F:RI.Framework.Composition.CompositionFlags.Normal" />.
                    See <see cref="M:RI.Framework.Composition.CompositionContainer.Recompose(RI.Framework.Composition.CompositionFlags)" /> for details.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="type" /> or <paramref name="exportType" /> is null. </exception>
            <exception cref="T:RI.Framework.Composition.CompositionException"> The internal recomposition failed. </exception>
        </member>
        <member name="M:RI.Framework.Composition.CompositionContainer.RemoveExport(System.Type,System.String)">
            <summary>
                Manual export: Removes a type exported under the specified name so that it is no longer used for composition.
            </summary>
            <param name="type"> The exported type. </param>
            <param name="exportName"> The name under which the type is exported. </param>
            <remarks>
                <para>
                    Only the export matching the specified type and name is removed.
                    If the same type is also exported under other types or names, those exports remain intact.
                </para>
                <para>
                    This triggers an internal recomposition using <see cref="T:RI.Framework.Composition.CompositionFlags" />.<see cref="F:RI.Framework.Composition.CompositionFlags.Normal" />.
                    See <see cref="M:RI.Framework.Composition.CompositionContainer.Recompose(RI.Framework.Composition.CompositionFlags)" /> for details.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="type" /> or <paramref name="exportName" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="exportName" /> is an empty string. </exception>
            <exception cref="T:RI.Framework.Composition.CompositionException"> The internal recomposition failed. </exception>
        </member>
        <member name="M:RI.Framework.Composition.CompositionContainer.ResolveImports(System.Object,RI.Framework.Composition.CompositionFlags)">
            <summary>
                Model-based import: Resolves the imports of the specified object, using <see cref="T:RI.Framework.Composition.Model.ImportPropertyAttribute" />.
            </summary>
            <param name="obj"> The object whose imports are resolved. </param>
            <param name="composition"> The composition type which is going to be done on the object. </param>
            <returns>
                true if any of the imports of the object were resolved or updated, false otherwise.
            </returns>
            <remarks>
                <para>
                    Note that resolving imports using the <see cref="M:RI.Framework.Composition.CompositionContainer.ResolveImports(System.Object,RI.Framework.Composition.CompositionFlags)" /> method is a one-time, import-and-forget action from the point-of-view of the <see cref="T:RI.Framework.Composition.CompositionContainer" />.
                    The specified object whose imports are resolved is not added to the <see cref="T:RI.Framework.Composition.CompositionContainer" /> as an export (this must be done separately if desired).
                    This means that a recomposition, which is only done on existing exports of the <see cref="T:RI.Framework.Composition.CompositionContainer" /> (e.g. using the <see cref="M:RI.Framework.Composition.CompositionContainer.Recompose(RI.Framework.Composition.CompositionFlags)" /> method or adding or removing exports), has no effect on the specified object or its imports respectively (unless it is added to the <see cref="T:RI.Framework.Composition.CompositionContainer" /> as an export).
                    In such cases, <see cref="M:RI.Framework.Composition.CompositionContainer.ResolveImports(System.Object,RI.Framework.Composition.CompositionFlags)" /> must be called again on the specified object if its imports need to be resolved again or updated respectively.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="obj" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.InvalidTypeArgumentException"> <paramref name="obj" /> is not a type which can be composed. </exception>
            <exception cref="T:RI.Framework.Composition.CompositionException"> The imports for <paramref name="obj" /> cannot be resolved. </exception>
        </member>
        <member name="M:RI.Framework.Composition.CompositionContainer.System#IDisposable#Dispose">
            <inheritdoc />
        </member>
        <member name="T:RI.Framework.Composition.CompositionException">
            <summary>
                The <see cref="T:RI.Framework.Composition.CompositionException" /> is thrown when a composition fails.
            </summary>
            <remarks>
                <note type="important">
                    If a <see cref="T:RI.Framework.Composition.CompositionException" /> is thrown during a composition, the state of the <see cref="T:RI.Framework.Composition.CompositionContainer" /> and all its compositions are undefined and might remain unusable.
                    Therefore, a <see cref="T:RI.Framework.Composition.CompositionException" /> should always be treated as a serious error which prevents the program from continueing normally.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Framework.Composition.CompositionException.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Composition.CompositionException" />.
            </summary>
        </member>
        <member name="M:RI.Framework.Composition.CompositionException.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Composition.CompositionException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
        </member>
        <member name="M:RI.Framework.Composition.CompositionException.#ctor(System.String,System.Exception)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Composition.CompositionException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
            <param name="innerException"> The exception which triggered this exception. </param>
        </member>
        <member name="M:RI.Framework.Composition.CompositionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Composition.CompositionException" />.
            </summary>
            <param name="info"> The serialization data. </param>
            <param name="context"> The type of the source of the serialization data. </param>
        </member>
        <member name="T:RI.Framework.Composition.CompositionFlags">
            <summary>
                Used to define the type of composition to perform on model-based imports by a <see cref="T:RI.Framework.Composition.CompositionContainer" />.
            </summary>
        </member>
        <member name="F:RI.Framework.Composition.CompositionFlags.None">
            <summary>
                No composition.
            </summary>
        </member>
        <member name="F:RI.Framework.Composition.CompositionFlags.Constructing">
            <summary>
                Internally used by <see cref="T:RI.Framework.Composition.CompositionContainer" /> but same as <see cref="F:RI.Framework.Composition.CompositionFlags.All" /> when used by your code.
            </summary>
        </member>
        <member name="F:RI.Framework.Composition.CompositionFlags.Missing">
            <summary>
                Imports which have a value of null are resolved.
            </summary>
        </member>
        <member name="F:RI.Framework.Composition.CompositionFlags.Recomposable">
            <summary>
                Imports which are recomposable (<see cref="T:RI.Framework.Composition.Model.ImportPropertyAttribute" />.<see cref="P:RI.Framework.Composition.Model.ImportPropertyAttribute.Recomposable" /> is true) are resolved (existing values, if any, are overwritten).
            </summary>
        </member>
        <member name="F:RI.Framework.Composition.CompositionFlags.Composed">
            <summary>
                Imports which have non-null value are resolved (existing values are overwritten).
            </summary>
        </member>
        <member name="F:RI.Framework.Composition.CompositionFlags.Normal">
            <summary>
                Combination of <see cref="F:RI.Framework.Composition.CompositionFlags.Missing" /> and <see cref="F:RI.Framework.Composition.CompositionFlags.Recomposable" />.
            </summary>
        </member>
        <member name="F:RI.Framework.Composition.CompositionFlags.All">
            <summary>
                Combination of <see cref="F:RI.Framework.Composition.CompositionFlags.Missing" />, <see cref="F:RI.Framework.Composition.CompositionFlags.Recomposable" />, and <see cref="F:RI.Framework.Composition.CompositionFlags.Composed" />.
            </summary>
        </member>
        <member name="T:RI.Framework.Composition.Model.ExportAttribute">
            <summary>
                Defines under which name a type is exported when used in model-based exporting (using <see cref="T:RI.Framework.Composition.CompositionCatalog" />).
            </summary>
            <remarks>
                <para>
                    Multiple <see cref="T:RI.Framework.Composition.Model.ExportAttribute" /> can be used to export a type under more than one name.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Composition.Model.ExportAttribute.#ctor">
            <summary>
                Exports a type under its default name.
            </summary>
            <remarks>
                <para>
                    See <see cref="T:RI.Framework.Composition.CompositionContainer" /> for more details about the default name of a type.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Composition.Model.ExportAttribute.#ctor(System.Type)">
            <summary>
                Exports a type under the specified types default name.
            </summary>
            <param name="type"> The type under whose default name the type is exported. </param>
            <remarks>
                <para>
                    See <see cref="T:RI.Framework.Composition.CompositionContainer" /> for more details about the default name of a type.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="type" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Composition.Model.ExportAttribute.#ctor(System.String)">
            <summary>
                Exports a type under the specified name.
            </summary>
            <param name="name"> The name under which the type is exported. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="name" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="name" /> is an empty string. </exception>
        </member>
        <member name="P:RI.Framework.Composition.Model.ExportAttribute.Inherited">
            <summary>
                Gets or sets whether types, inheriting from the type this <see cref="T:RI.Framework.Composition.Model.ExportAttribute" /> is decorating, are also exported under the name specified by this <see cref="T:RI.Framework.Composition.Model.ExportAttribute" />.
            </summary>
            <value>
                true if the this <see cref="T:RI.Framework.Composition.Model.ExportAttribute" /> is inherited, false otherwise.
            </value>
        </member>
        <member name="P:RI.Framework.Composition.Model.ExportAttribute.Name">
            <summary>
                Gets the name under which the decorated type is exported.
            </summary>
            <value>
                The name under which the decorated type is exported.
            </value>
        </member>
        <member name="T:RI.Framework.Composition.Model.ExportConstructorAttribute">
            <summary>
                Defines the export constructor of an exported type.
            </summary>
            <remarks>
                <para>
                    An export constructor is required to be defined when an exported type has either multiple constructors or no default constructor.
                    This tells the <see cref="T:RI.Framework.Composition.CompositionContainer" /> which constructor to use when creating an instance of the type during resolving of imports.
                </para>
                <para>
                    An export constructor can have parameters.
                    If so, the parameter values are resolved similar as resolving manual imports, using the default names of the parameter types.
                    See <see cref="T:RI.Framework.Composition.CompositionContainer" /> for more details about manual imports and the default name of a type.
                </para>
            </remarks>
        </member>
        <member name="T:RI.Framework.Composition.Model.ExportCreatorAttribute">
            <summary>
                Defines the static method of an exported type (called &quot;export method&quot;) which is used for creating an instance of that type.
            </summary>
            <remarks>
                <para>
                    An export method can be used in cases where an instance of an exported type is not obtained through its constructor but through a custom procedure which is implemented in a static method.
                    This tells the <see cref="T:RI.Framework.Composition.CompositionContainer" /> which export method to use when creating an instance of the type during resolving of imports.
                    The export method must be a static method in the type which is to be exported or in one of its base classes.
                </para>
                <para>
                    An export method has at least one parameter which is a <see cref="T:System.Type" /> and specifies the exact type to be instantiated.
                    Aditional parameters are possible but the type to be instantiated must always be the first parameter.
                    If additional parameters are used, the parameter values are resolved similar as resolving manual imports, using the default names of the parameter types.
                    See <see cref="T:RI.Framework.Composition.CompositionContainer" /> for more details about manual imports and the default name of a type.
                </para>
            </remarks>
        </member>
        <member name="T:RI.Framework.Composition.Model.IExporting">
            <summary>
                Defines an interface which allows exported types and objects to be informed when they are added to or removed from a <see cref="T:RI.Framework.Composition.CompositionContainer" />.
            </summary>
        </member>
        <member name="M:RI.Framework.Composition.Model.IExporting.AddedToContainer(System.String,RI.Framework.Composition.CompositionContainer)">
            <summary>
                Called after the object has been added to a container as an export.
                Means: The object is now being used for composition and can now be resolved during imports.
            </summary>
            <param name="name"> The name under which the object is exported. </param>
            <param name="container"> The composition container the object was added to. </param>
        </member>
        <member name="M:RI.Framework.Composition.Model.IExporting.RemovedFromContainer(System.String,RI.Framework.Composition.CompositionContainer)">
            <summary>
                Called after the object has been removed from a container as an export.
                Means: The object is no longer being used for composition and will no longer be resolved during imports.
            </summary>
            <param name="name"> The name under which the object was exported. </param>
            <param name="container"> The composition container the object was removed from. </param>
        </member>
        <member name="T:RI.Framework.Composition.Model.IImporting">
            <summary>
                Defines an interface which allows types and objects which use model-based importing (using <see cref="T:RI.Framework.Composition.Model.ImportPropertyAttribute" />) to be informed when their imports are being resolved or updated.
            </summary>
        </member>
        <member name="M:RI.Framework.Composition.Model.IImporting.ImportsResolved(RI.Framework.Composition.CompositionFlags,System.Boolean)">
            <summary>
                Called after the model-based imports of an object were resolved.
            </summary>
            <param name="composition"> The composition type which was done on the object. </param>
            <param name="updated"> Specifies whether any of the model-based imports of the object were resolved or updated. </param>
        </member>
        <member name="M:RI.Framework.Composition.Model.IImporting.ImportsResolving(RI.Framework.Composition.CompositionFlags)">
            <summary>
                Called before the model-based imports of an object are resolved.
            </summary>
            <param name="composition"> The composition type which is going to be done on the object. </param>
        </member>
        <member name="T:RI.Framework.Composition.Model.Import">
            <summary>
                Used as a proxy in model-based importing (using <see cref="T:RI.Framework.Composition.Model.ImportPropertyAttribute" />) to hold multiple imported values.
            </summary>
            <remarks>
                <para>
                    <see cref="T:RI.Framework.Composition.Model.ImportExtensions" /> must be used to access the actual imported values.
                </para>
            </remarks>
        </member>
        <member name="T:RI.Framework.Composition.Model.ImportExtensions">
            <summary>
                Defines extension methods used to access the actual imported values when using <see cref="T:RI.Framework.Composition.Model.Import" /> and <see cref="T:RI.Framework.Composition.Model.ImportPropertyAttribute" />.
            </summary>
            <remarks>
                <para>
                    The extension methods defined in this class can be used even if the corresponding <see cref="T:RI.Framework.Composition.Model.Import" /> property is null (e.g. before the imports were resolved for the first time).
                </para>
                <para>
                    For high-performance access to imported values, it is recommended to retrieve them into an array (using the <see cref="M:RI.Framework.Composition.Model.ImportExtensions.ToArray``1(RI.Framework.Composition.Model.Import)" /> method) by utilizing the <see cref="T:RI.Framework.Composition.Model.IImporting" /> interface to get informed after imports have been resolved or updated.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Composition.Model.ImportExtensions.ToArray``1(RI.Framework.Composition.Model.Import)">
            <summary>
                Gets all imported values as an array.
            </summary>
            <typeparam name="T"> The type of the values. </typeparam>
            <param name="import"> The import proxy. </param>
            <returns>
                The array which contains all imported values of type <typeparamref name="T" />.
                The array is empty if no values were imported or no value is of type <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:RI.Framework.Composition.Model.ImportExtensions.ToList``1(RI.Framework.Composition.Model.Import)">
            <summary>
                Gets all imported values as a list.
            </summary>
            <typeparam name="T"> The type of the values. </typeparam>
            <param name="import"> The import proxy. </param>
            <returns>
                The list which contains all imported values of type <typeparamref name="T" />.
                The list is empty if no values were imported or no value is of type <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:RI.Framework.Composition.Model.ImportExtensions.Value``1(RI.Framework.Composition.Model.Import)">
            <summary>
                Gets the first imported value or null if no value has been imported.
            </summary>
            <typeparam name="T"> The type of the value. </typeparam>
            <param name="import"> The import proxy. </param>
            <returns>
                The first imported value of type <typeparamref name="T" /> or null if no value has been imported or no value is of type <typeparamref name="T" />.
            </returns>
            <remarks>
                <para>
                    If multiple values of type <typeparamref name="T" /> were imported, one of them is returned but it is undefined which one.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Composition.Model.ImportExtensions.Values``1(RI.Framework.Composition.Model.Import)">
            <summary>
                Gets the sequence of all imported values.
            </summary>
            <typeparam name="T"> The type of the values. </typeparam>
            <param name="import"> The import proxy. </param>
            <returns>
                The sequence which contains all imported values of type <typeparamref name="T" />.
                The sequence contains no elements if no values were imported or no value is of type <typeparamref name="T" />.
            </returns>
        </member>
        <member name="T:RI.Framework.Composition.Model.ImportPropertyAttribute">
            <summary>
                Defines a model-based import of a specified name for a property.
            </summary>
            <remarks>
                <para>
                    In cases where a single value needs to be imported, the property type (of the property <see cref="T:RI.Framework.Composition.Model.ImportPropertyAttribute" /> is applied to) can be of the imported type.
                </para>
                <para>
                    In cases where multiple values need to be imported, the property type (of the property <see cref="T:RI.Framework.Composition.Model.ImportPropertyAttribute" /> is applied to) must be <see cref="T:RI.Framework.Composition.Model.Import" /> and <see cref="T:RI.Framework.Composition.Model.ImportExtensions" /> must be used to access the actual imported values.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Composition.Model.ImportPropertyAttribute.#ctor">
            <summary>
                Imports the property value by using the property types default name for resolving.
            </summary>
            <remarks>
                <para>
                    See <see cref="T:RI.Framework.Composition.CompositionContainer" /> for more details about the default name of a type.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Composition.Model.ImportPropertyAttribute.#ctor(System.Type)">
            <summary>
                Imports the property value by using the specified types default name for resolving.
            </summary>
            <param name="type"> The type whose default name is used for resolving. </param>
            <remarks>
                <para>
                    See <see cref="T:RI.Framework.Composition.CompositionContainer" /> for more details about the default name of a type.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="type" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Composition.Model.ImportPropertyAttribute.#ctor(System.String)">
            <summary>
                Imports the property value by using the specified name for resolving.
            </summary>
            <param name="name"> The name which is used for resolving. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="name" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="name" /> is an empty string. </exception>
        </member>
        <member name="P:RI.Framework.Composition.Model.ImportPropertyAttribute.Name">
            <summary>
                Gets the name which is used to resolve the value for the decorated property.
            </summary>
            <value>
                The name which is used to resolve the value for the decorated property.
            </value>
        </member>
        <member name="P:RI.Framework.Composition.Model.ImportPropertyAttribute.Recomposable">
            <summary>
                Gets or sets whether the value for the decorated property is reimported automatically when the exports of the corresponding name changed.
            </summary>
            <value>
                true if the decorated property is automatically updated, false otherwise.
            </value>
            <remarks>
                <note type="note">
                    Automatic reimport is only performed if the object, to which the decorated property belongs, is itself an export of the corresponding <see cref="T:RI.Framework.Composition.CompositionContainer" />.
                </note>
            </remarks>
        </member>
        <member name="T:RI.Framework.Composition.Model.NamespaceDoc">
            <summary>
                Contains types used for defining composition models in model-based exporting and importing.
            </summary>
        </member>
        <member name="T:RI.Framework.Composition.NamespaceDoc">
            <summary>
                Contains the main infrastructure for doing composition, which is Dependency Injection (DI), which is a specialized form of Inversion-of-Control (IoC).
            </summary>
        </member>
        <member name="T:RI.Framework.Services.Bootstrapper">
            <summary>
                Implements a default bootstrapper which is suitable for most scenarios.
            </summary>
            <remarks>
                <para>
                    The following is the sequence implemented by this bootstrapper:
                </para>
                <list type="number">
                    <item>
                        <para>
                            This <c> MonoBehaviour </c> receives the <c> Awake </c> message and calls <see cref="M:RI.Framework.Services.IBootstrapper.Run" /> on itself, which sets the following in motion:
                        </para>
                    </item>
                    <item>
                        <para>
                            <see cref="P:RI.Framework.Services.Bootstrapper.State" /> is set to <see cref="F:RI.Framework.Services.BootstrapperState.Bootstrapping" />.
                        </para>
                    </item>
                    <item>
                        <para>
                            <c> Object.DontDestroyOnLoad </c> is called for the game object this <c> MonoBehaviour </c> is attached to.
                        </para>
                    </item>
                    <item>
                        <para>
                            <see cref="M:RI.Framework.Services.Bootstrapper.CreateContainer" /> is called and <see cref="P:RI.Framework.Services.Bootstrapper.Container" /> is set.
                        </para>
                    </item>
                    <item>
                        <para>
                            <see cref="M:RI.Framework.Services.Bootstrapper.ConfigureBootstrapper" /> is called.
                        </para>
                    </item>
                    <item>
                        <para>
                            <see cref="M:RI.Framework.Services.Bootstrapper.ConfigureServiceLocator" /> is called.
                        </para>
                    </item>
                    <item>
                        <para>
                            <see cref="M:RI.Framework.Services.Bootstrapper.ConfigureLogging" /> is called.
                        </para>
                    </item>
                    <item>
                        <para>
                            <see cref="M:RI.Framework.Services.Bootstrapper.ConfigureContainer" /> is called.
                        </para>
                    </item>
                    <item>
                        <para>
                            <see cref="M:RI.Framework.Services.Bootstrapper.ConfigureServices" /> is called.
                        </para>
                    </item>
                    <item>
                        <para>
                            <see cref="M:RI.Framework.Services.Bootstrapper.ConfigureModularization" /> is called.
                        </para>
                    </item>
                    <item>
                        <para>
                            <see cref="P:RI.Framework.Services.Bootstrapper.State" /> is set to <see cref="F:RI.Framework.Services.BootstrapperState.Running" />.
                        </para>
                    </item>
                    <item>
                        <para>
                            <see cref="M:RI.Framework.Services.Bootstrapper.BeginRun" /> is called.
                        </para>
                    </item>
                    <item>
                        <para>
                            <see cref="M:RI.Framework.Services.IBootstrapper.Run" /> returns and the game is considered &quot;running&quot;.
                        </para>
                    </item>
                    <item>
                        <para>
                            This <c> MonoBehaviour </c> receives the <c> OnApplicationQuit </c> message, which continues the sequence:
                        </para>
                    </item>
                    <item>
                        <para>
                            <see cref="M:RI.Framework.Services.Bootstrapper.FinishRun" /> is called.
                        </para>
                    </item>
                    <item>
                        <para>
                            <see cref="P:RI.Framework.Services.Bootstrapper.State" /> is set to <see cref="F:RI.Framework.Services.BootstrapperState.ShuttingDown" />.
                        </para>
                    </item>
                    <item>
                        <para>
                            <see cref="M:RI.Framework.Services.Bootstrapper.DoShutdown" /> is called.
                        </para>
                    </item>
                    <item>
                        <para>
                            <see cref="P:RI.Framework.Services.Bootstrapper.State" /> is set to <see cref="F:RI.Framework.Services.BootstrapperState.ShutDown" />.
                        </para>
                    </item>
                </list>
                <note type="note">
                    <para>
                        The sequence as described above runs only once, including the shutdown part.
                        In cases where <c> Application.CancelQuit </c> is called during the shutdown, the shutdown procedure will complete but not run again when the game is finally exiting.
                    </para>
                </note>
            </remarks>
        </member>
        <member name="F:RI.Framework.Services.Bootstrapper.UseDefaultServices">
            <summary>
                Specifies whether default services should be used or not.
            </summary>
            <remarks>
                <para>
                    Default services, added to the used composition container, when this field is true are the following types: <see cref="T:RI.Framework.Services.Logging.LogService" />, <see cref="T:RI.Framework.Services.Logging.LogWriter" />, <see cref="T:RI.Framework.Services.Modularization.ModuleService" />, <see cref="T:RI.Framework.Services.Dispatcher.DispatcherService" />.
                </para>
                <note type="important">
                    If this property is true, nothing will be added to the composition container and you must add all services manually.
                </note>
            </remarks>
        </member>
        <member name="P:RI.Framework.Services.Bootstrapper.Container">
            <summary>
                Gets the used composition container.
            </summary>
            <value>
                The used composition container.
            </value>
        </member>
        <member name="P:RI.Framework.Services.Bootstrapper.State">
            <summary>
                Gets the current state of the bootstrapper.
            </summary>
            <value>
                The current state of the bootstrapper.
            </value>
        </member>
        <member name="M:RI.Framework.Services.Bootstrapper.Log(RI.Framework.Services.Logging.LogLevel,System.String,System.Object[])">
            <summary>
                Logs a message.
            </summary>
            <param name="severity"> The severity of the message. </param>
            <param name="format"> The message. </param>
            <param name="args"> The arguments which will be expanded into the message (comparable to <see cref="M:System.String.Format(System.String,System.Object[])" />). </param>
            <remarks>
                <para>
                    <see cref="T:RI.Framework.Services.Logging.ILogService" /> is used, obtained through <see cref="T:RI.Framework.Services.ServiceLocator" />.
                    If no <see cref="T:RI.Framework.Services.Logging.ILogService" /> is available, no logging is performed.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Services.Bootstrapper.BeginRun">
            <summary>
                Called before the game begins running after the bootstrapping is completed.
            </summary>
            <remarks>
                <note type="implement">
                    The default implementation does nothing.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Framework.Services.Bootstrapper.ConfigureBootstrapper">
            <summary>
                Called when the bootstrapper itself needs to be configured.
            </summary>
            <remarks>
                <note type="implement">
                    The default implementation adds this bootstrapper instance to the used composition container as an export using a <see cref="T:RI.Framework.Composition.Catalogs.InstanceCatalog" />.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Framework.Services.Bootstrapper.ConfigureContainer">
            <summary>
                Called when the used composition container (<see cref="P:RI.Framework.Services.Bootstrapper.Container" />) needs to be configured.
            </summary>
            <remarks>
                <note type="implement">
                    The default implementation adds a single <see cref="T:RI.Framework.Composition.Catalogs.ScriptingCatalog" /> to the composition container.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Framework.Services.Bootstrapper.ConfigureLogging">
            <summary>
                Called when the logging needs to be configured.
            </summary>
            <remarks>
                <note type="implement">
                    The default implementation adds <see cref="T:RI.Framework.Services.Logging.LogService" /> and <see cref="T:RI.Framework.Services.Logging.LogWriter" /> to the composition container if <see cref="F:RI.Framework.Services.Bootstrapper.UseDefaultServices" /> is true, otherwise it does nothing.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Framework.Services.Bootstrapper.ConfigureModularization">
            <summary>
                Called when the modularization needs to be configured.
            </summary>
            <remarks>
                <note type="implement">
                    The default implementation adds <see cref="T:RI.Framework.Services.Modularization.ModuleService" /> to the composition container if <see cref="F:RI.Framework.Services.Bootstrapper.UseDefaultServices" /> is true, otherwise it does nothing.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Framework.Services.Bootstrapper.ConfigureServiceLocator">
            <summary>
                Called when the service locator (<see cref="T:RI.Framework.Services.ServiceLocator" />) needs to be configured.
            </summary>
            <remarks>
                <note type="implement">
                    The default implementation calls <see cref="M:RI.Framework.Services.ServiceLocator.BindToCompositionContainer(RI.Framework.Composition.CompositionContainer)" /> using the used composition container (<see cref="P:RI.Framework.Services.Bootstrapper.Container" />).
                </note>
            </remarks>
        </member>
        <member name="M:RI.Framework.Services.Bootstrapper.ConfigureServices">
            <summary>
                Called when all the other services of the game need to be configured.
            </summary>
            <remarks>
                <note type="implement">
                    The default implementation adds <see cref="T:RI.Framework.Services.Dispatcher.DispatcherService" /> to the composition container if <see cref="F:RI.Framework.Services.Bootstrapper.UseDefaultServices" /> is true, otherwise it does nothing.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Framework.Services.Bootstrapper.CreateContainer">
            <summary>
                Called when the composition container needs to be created.
            </summary>
            <returns>
                The composition container to be used.
                Can be null if a default <see cref="T:RI.Framework.Composition.CompositionContainer" /> is to be used.
            </returns>
            <remarks>
                <note type="implement">
                    The default implementation returns null so a default <see cref="T:RI.Framework.Composition.CompositionContainer" /> will be created and used.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Framework.Services.Bootstrapper.DoShutdown">
            <summary>
                Called when the game is shut down.
            </summary>
            <remarks>
                <note type="implement">
                    The default implementation does nothing.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Framework.Services.Bootstrapper.FinishRun">
            <summary>
                Called before the game begins shutting down after the game was running.
            </summary>
            <remarks>
                <note type="implement">
                    The default implementation does nothing.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Framework.Services.Bootstrapper.RI#Framework#Services#IBootstrapper#Run">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Services.Bootstrapper.Shutdown">
            <inheritdoc />
        </member>
        <member name="T:RI.Framework.Services.BootstrapperState">
            <summary>
                Describes the current state of a bootstrapper.
            </summary>
        </member>
        <member name="F:RI.Framework.Services.BootstrapperState.Uninitialized">
            <summary>
                The bootstrapper is unitialized.
            </summary>
        </member>
        <member name="F:RI.Framework.Services.BootstrapperState.Bootstrapping">
            <summary>
                The bootstrapping is in progress.
            </summary>
        </member>
        <member name="F:RI.Framework.Services.BootstrapperState.Running">
            <summary>
                The bootstrapping is finished.
            </summary>
        </member>
        <member name="F:RI.Framework.Services.BootstrapperState.ShuttingDown">
            <summary>
                The shutdown is in progress.
            </summary>
        </member>
        <member name="F:RI.Framework.Services.BootstrapperState.ShutDown">
            <summary>
                The shutdown is finished.
            </summary>
        </member>
        <member name="T:RI.Framework.Services.Dispatcher.DispatcherPriority">
            <summary>
                Defines the priority of a dispatcher operation.
            </summary>
        </member>
        <member name="F:RI.Framework.Services.Dispatcher.DispatcherPriority.Now">
            <summary>
                The operation is executed immediately when dispatched.
            </summary>
            <remarks>
                <para>
                    The created <see cref="T:RI.Framework.Services.Dispatcher.IDispatcherOperation" /> will already have its <see cref="P:RI.Framework.Services.Dispatcher.IDispatcherOperation.Status" /> set to <see cref="F:RI.Framework.Services.Dispatcher.DispatcherStatus.Processed" />.
                </para>
            </remarks>
        </member>
        <member name="F:RI.Framework.Services.Dispatcher.DispatcherPriority.Frame">
            <summary>
                The operation is executed at the end of the current frame.
            </summary>
        </member>
        <member name="F:RI.Framework.Services.Dispatcher.DispatcherPriority.Later">
            <summary>
                The operation is executed at the end of the frame which had no other dispatcher operations of higher priority (<see cref="F:RI.Framework.Services.Dispatcher.DispatcherPriority.Now" /> or <see cref="F:RI.Framework.Services.Dispatcher.DispatcherPriority.Frame" />).
            </summary>
            <remarks>
                <note type="important">
                    Use with caution! An operation with this priority is non-deterministic and might never be executed in cases where operations of higher priorities are constantly dispatched!
                </note>
            </remarks>
        </member>
        <member name="F:RI.Framework.Services.Dispatcher.DispatcherPriority.Idle">
            <summary>
                The operation is executed at the end of the frame which had no other dispatcher operations of higher priority (<see cref="F:RI.Framework.Services.Dispatcher.DispatcherPriority.Now" />, <see cref="F:RI.Framework.Services.Dispatcher.DispatcherPriority.Frame" />, or <see cref="F:RI.Framework.Services.Dispatcher.DispatcherPriority.Later" />) and whose previous frame had no dispatcher operations at all.
            </summary>
            <remarks>
                <note type="important">
                    Use with caution! An operation with this priority is non-deterministic and might never be executed in cases where operations of higher priorities are constantly dispatched!
                </note>
            </remarks>
        </member>
        <member name="F:RI.Framework.Services.Dispatcher.DispatcherPriority.Lowest">
            <summary>
                The operation is executed with the lowest possible priority.
            </summary>
        </member>
        <member name="F:RI.Framework.Services.Dispatcher.DispatcherPriority.Highest">
            <summary>
                The operation is executed with the highest possible priority.
            </summary>
        </member>
        <member name="T:RI.Framework.Services.Dispatcher.DispatcherService">
            <summary>
                Implements a default dispatcher service which is suitable for most scenarios.
            </summary>
        </member>
        <member name="M:RI.Framework.Services.Dispatcher.DispatcherService.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Services.Dispatcher.DispatcherService" />.
            </summary>
        </member>
        <member name="M:RI.Framework.Services.Dispatcher.DispatcherService.Broadcast``1(RI.Framework.Services.Dispatcher.DispatcherPriority,``0)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Services.Dispatcher.DispatcherService.Dispatch(RI.Framework.Services.Dispatcher.DispatcherPriority,System.Action)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Services.Dispatcher.DispatcherService.Dispatch``1(RI.Framework.Services.Dispatcher.DispatcherPriority,System.Action{``0},``0)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Services.Dispatcher.DispatcherService.Dispatch``2(RI.Framework.Services.Dispatcher.DispatcherPriority,System.Action{``0,``1},``0,``1)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Services.Dispatcher.DispatcherService.Dispatch``3(RI.Framework.Services.Dispatcher.DispatcherPriority,System.Action{``0,``1,``2},``0,``1,``2)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Services.Dispatcher.DispatcherService.Dispatch``4(RI.Framework.Services.Dispatcher.DispatcherPriority,System.Action{``0,``1,``2,``3},``0,``1,``2,``3)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Services.Dispatcher.DispatcherService.Dispatch``1(RI.Framework.Services.Dispatcher.DispatcherPriority,System.Func{``0})">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Services.Dispatcher.DispatcherService.Dispatch``2(RI.Framework.Services.Dispatcher.DispatcherPriority,System.Func{``0,``1},``0)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Services.Dispatcher.DispatcherService.Dispatch``3(RI.Framework.Services.Dispatcher.DispatcherPriority,System.Func{``0,``1,``2},``0,``1)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Services.Dispatcher.DispatcherService.Dispatch``4(RI.Framework.Services.Dispatcher.DispatcherPriority,System.Func{``0,``1,``2,``3},``0,``1,``2)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Services.Dispatcher.DispatcherService.Dispatch``5(RI.Framework.Services.Dispatcher.DispatcherPriority,System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Services.Dispatcher.DispatcherService.RegisterReceiver``1(System.Action{``0})">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Services.Dispatcher.DispatcherService.UnregisterReceiver``1(System.Action{``0})">
            <inheritdoc />
        </member>
        <member name="T:RI.Framework.Services.Dispatcher.DispatcherStatus">
            <summary>
                Describes the current state of a dispatcher operation.
            </summary>
        </member>
        <member name="F:RI.Framework.Services.Dispatcher.DispatcherStatus.Queued">
            <summary>
                The operation is still queued for execution.
            </summary>
        </member>
        <member name="F:RI.Framework.Services.Dispatcher.DispatcherStatus.Processing">
            <summary>
                The operation is currently being executed.
            </summary>
        </member>
        <member name="F:RI.Framework.Services.Dispatcher.DispatcherStatus.Processed">
            <summary>
                The operation has finished execution and is considered complete.
            </summary>
        </member>
        <member name="F:RI.Framework.Services.Dispatcher.DispatcherStatus.Canceled">
            <summary>
                The operation has been canceled without being executed.
            </summary>
        </member>
        <member name="T:RI.Framework.Services.Dispatcher.IDispatcherOperation">
            <summary>
                Defines the interface for a dispatcher operation.
            </summary>
            <remarks>
                <para>
                    A dispatcher operation is issued by a <see cref="T:RI.Framework.Services.Dispatcher.IDispatcherService" /> when broadcasting or dispatching.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Framework.Services.Dispatcher.IDispatcherOperation.Result">
            <summary>
                Gets the result of the operation.
            </summary>
            <value>
                The result of the operation or null if no result is available (keep in mind that the result itself might be null as well...).
            </value>
            <remarks>
                <para>
                    This property is only set if a method with a return value has been dispatched.
                    That return value will then be assigned to this property after the method completed execution.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Framework.Services.Dispatcher.IDispatcherOperation.Status">
            <summary>
                Gets the current status of the operation.
            </summary>
            <value>
                The status of the operation.
            </value>
        </member>
        <member name="M:RI.Framework.Services.Dispatcher.IDispatcherOperation.Cancel">
            <summary>
                Cancels the operation.
            </summary>
            <returns>
                true if the operation could be canceled, false if the operation has already finished or could not be canceled anymore.
            </returns>
        </member>
        <member name="M:RI.Framework.Services.Dispatcher.IDispatcherOperation.Reschedule(System.Int32)">
            <summary>
                Delays the operation by a given amount of time relative to now.
            </summary>
            <param name="millisecondsFromNow"> The amount of time to delay, in milliseconds. </param>
            <returns>
                true if the operation could be rescheduled, false if the operation has already finished or could not be rescheduled anymore.
            </returns>
        </member>
        <member name="M:RI.Framework.Services.Dispatcher.IDispatcherOperation.Reschedule(System.DateTime)">
            <summary>
                Delays the operation until a given date and time.
            </summary>
            <param name="timestamp"> The date and time when the operation should be executed. </param>
            <returns>
                true if the operation could be rescheduled, false if the operation has already finished or could not be rescheduled anymore.
            </returns>
            <remarks>
                <note type="important">
                    To avoid troubles with daylight saving time (e.g. issuing a reschedule around the time when the clock jumps or holds for one hour), <paramref name="timestamp" /> is considered to be UTC (compared to <see cref="T:System.DateTime" />.<see cref="P:System.DateTime.UtcNow" />).
                </note>
            </remarks>
        </member>
        <member name="T:RI.Framework.Services.Dispatcher.IDispatcherService">
            <summary>
                Defines the interface for a dispatcher service.
            </summary>
            <remarks>
                <para>
                    A dispatcher service is used to exchange events and data between modules, for synchronizing processing, and to handle background tasks.
                </para>
                <note type="implement">
                    All broadcasts and dispatches must be executed in the order they were issued, depending on their priority.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Framework.Services.Dispatcher.IDispatcherService.Broadcast``1(RI.Framework.Services.Dispatcher.DispatcherPriority,``0)">
            <summary>
                Broadcasts an object of a specified type to all receivers registered for that type.
            </summary>
            <typeparam name="T"> The type to broadcast. </typeparam>
            <param name="priority"> The broadcast priority or when the broadcast shall be delivered to all the receivers respectively. </param>
            <param name="broadcast"> The actual object to be broadcasted (e.g. an event object). </param>
            <returns>
                The dispatcher operation which can be used to control the delivery of the broadcast.
                See <see cref="T:RI.Framework.Services.Dispatcher.IDispatcherOperation" /> for more details.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="broadcast" /> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> The service is not fully initialized. </exception>
        </member>
        <member name="M:RI.Framework.Services.Dispatcher.IDispatcherService.Dispatch(RI.Framework.Services.Dispatcher.DispatcherPriority,System.Action)">
            <summary>
                Dispatches the execution of a method (with no parameter, no return value).
            </summary>
            <param name="priority"> The priority of the execution. </param>
            <param name="action"> The method to be executed. </param>
            <returns>
                The dispatcher operation which can be used to control the execution of the method.
                See <see cref="T:RI.Framework.Services.Dispatcher.IDispatcherOperation" /> for more details.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="action" /> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> The service is not fully initialized. </exception>
        </member>
        <member name="M:RI.Framework.Services.Dispatcher.IDispatcherService.Dispatch``1(RI.Framework.Services.Dispatcher.DispatcherPriority,System.Action{``0},``0)">
            <summary>
                Dispatches the execution of a method (with 1 parameter, no return value).
            </summary>
            <typeparam name="T"> The type of the parameter. </typeparam>
            <param name="priority"> The priority of the execution. </param>
            <param name="action"> The method to be executed. </param>
            <param name="arg"> The value of the parameter. </param>
            <returns>
                The dispatcher operation which can be used to control the execution of the method.
                See <see cref="T:RI.Framework.Services.Dispatcher.IDispatcherOperation" /> for more details.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="action" /> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> The service is not fully initialized. </exception>
        </member>
        <member name="M:RI.Framework.Services.Dispatcher.IDispatcherService.Dispatch``2(RI.Framework.Services.Dispatcher.DispatcherPriority,System.Action{``0,``1},``0,``1)">
            <summary>
                Dispatches the execution of a method (with 2 parameters, no return value).
            </summary>
            <typeparam name="T1"> The type of the first parameter. </typeparam>
            <typeparam name="T2"> The type of the second parameter. </typeparam>
            <param name="priority"> The priority of the execution. </param>
            <param name="action"> The method to be executed. </param>
            <param name="arg1"> The value of the first parameter. </param>
            <param name="arg2"> The value of the second parameter. </param>
            <returns>
                The dispatcher operation which can be used to control the execution of the method.
                See <see cref="T:RI.Framework.Services.Dispatcher.IDispatcherOperation" /> for more details.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="action" /> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> The service is not fully initialized. </exception>
        </member>
        <member name="M:RI.Framework.Services.Dispatcher.IDispatcherService.Dispatch``3(RI.Framework.Services.Dispatcher.DispatcherPriority,System.Action{``0,``1,``2},``0,``1,``2)">
            <summary>
                Dispatches the execution of a method (with 3 parameters, no return value).
            </summary>
            <typeparam name="T1"> The type of the first parameter. </typeparam>
            <typeparam name="T2"> The type of the second parameter. </typeparam>
            <typeparam name="T3"> The type of the third parameter. </typeparam>
            <param name="priority"> The priority of the execution. </param>
            <param name="action"> The method to be executed. </param>
            <param name="arg1"> The value of the first parameter. </param>
            <param name="arg2"> The value of the second parameter. </param>
            <param name="arg3"> The value of the third parameter. </param>
            <returns>
                The dispatcher operation which can be used to control the execution of the method.
                See <see cref="T:RI.Framework.Services.Dispatcher.IDispatcherOperation" /> for more details.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="action" /> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> The service is not fully initialized. </exception>
        </member>
        <member name="M:RI.Framework.Services.Dispatcher.IDispatcherService.Dispatch``4(RI.Framework.Services.Dispatcher.DispatcherPriority,System.Action{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
                Dispatches the execution of a method (with 4 parameters, no return value).
            </summary>
            <typeparam name="T1"> The type of the first parameter. </typeparam>
            <typeparam name="T2"> The type of the second parameter. </typeparam>
            <typeparam name="T3"> The type of the third parameter. </typeparam>
            <typeparam name="T4"> The type of the fourth parameter. </typeparam>
            <param name="priority"> The priority of the execution. </param>
            <param name="action"> The method to be executed. </param>
            <param name="arg1"> The value of the first parameter. </param>
            <param name="arg2"> The value of the second parameter. </param>
            <param name="arg3"> The value of the third parameter. </param>
            <param name="arg4"> The value of the fourth parameter. </param>
            <returns>
                The dispatcher operation which can be used to control the execution of the method.
                See <see cref="T:RI.Framework.Services.Dispatcher.IDispatcherOperation" /> for more details.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="action" /> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> The service is not fully initialized. </exception>
        </member>
        <member name="M:RI.Framework.Services.Dispatcher.IDispatcherService.Dispatch``1(RI.Framework.Services.Dispatcher.DispatcherPriority,System.Func{``0})">
            <summary>
                Dispatches the execution of a method (with no parameter, using a return value).
            </summary>
            <typeparam name="TResult"> The type of the return value. </typeparam>
            <param name="priority"> The priority of the execution. </param>
            <param name="func"> The method to be executed. </param>
            <returns>
                The dispatcher operation which can be used to control the execution of the method.
                See <see cref="T:RI.Framework.Services.Dispatcher.IDispatcherOperation" /> for more details.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="func" /> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> The service is not fully initialized. </exception>
        </member>
        <member name="M:RI.Framework.Services.Dispatcher.IDispatcherService.Dispatch``2(RI.Framework.Services.Dispatcher.DispatcherPriority,System.Func{``0,``1},``0)">
            <summary>
                Dispatches the execution of a method (with 1 parameter, using a return value).
            </summary>
            <typeparam name="T"> The type of the parameter. </typeparam>
            <typeparam name="TResult"> The type of the return value. </typeparam>
            <param name="priority"> The priority of the execution. </param>
            <param name="func"> The method to be executed. </param>
            <param name="arg"> The value of the parameter. </param>
            <returns>
                The dispatcher operation which can be used to control the execution of the method.
                See <see cref="T:RI.Framework.Services.Dispatcher.IDispatcherOperation" /> for more details.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="func" /> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> The service is not fully initialized. </exception>
        </member>
        <member name="M:RI.Framework.Services.Dispatcher.IDispatcherService.Dispatch``3(RI.Framework.Services.Dispatcher.DispatcherPriority,System.Func{``0,``1,``2},``0,``1)">
            <summary>
                Dispatches the execution of a method (with 2 parameters, using a return value).
            </summary>
            <typeparam name="T1"> The type of the first parameter. </typeparam>
            <typeparam name="T2"> The type of the second parameter. </typeparam>
            <typeparam name="TResult"> The type of the return value. </typeparam>
            <param name="priority"> The priority of the execution. </param>
            <param name="func"> The method to be executed. </param>
            <param name="arg1"> The value of the first parameter. </param>
            <param name="arg2"> The value of the second parameter. </param>
            <returns>
                The dispatcher operation which can be used to control the execution of the method.
                See <see cref="T:RI.Framework.Services.Dispatcher.IDispatcherOperation" /> for more details.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="func" /> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> The service is not fully initialized. </exception>
        </member>
        <member name="M:RI.Framework.Services.Dispatcher.IDispatcherService.Dispatch``4(RI.Framework.Services.Dispatcher.DispatcherPriority,System.Func{``0,``1,``2,``3},``0,``1,``2)">
            <summary>
                Dispatches the execution of a method (with 3 parameters, using a return value).
            </summary>
            <typeparam name="T1"> The type of the first parameter. </typeparam>
            <typeparam name="T2"> The type of the second parameter. </typeparam>
            <typeparam name="T3"> The type of the third parameter. </typeparam>
            <typeparam name="TResult"> The type of the return value. </typeparam>
            <param name="priority"> The priority of the execution. </param>
            <param name="func"> The method to be executed. </param>
            <param name="arg1"> The value of the first parameter. </param>
            <param name="arg2"> The value of the second parameter. </param>
            <param name="arg3"> The value of the third parameter. </param>
            <returns>
                The dispatcher operation which can be used to control the execution of the method.
                See <see cref="T:RI.Framework.Services.Dispatcher.IDispatcherOperation" /> for more details.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="func" /> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> The service is not fully initialized. </exception>
        </member>
        <member name="M:RI.Framework.Services.Dispatcher.IDispatcherService.Dispatch``5(RI.Framework.Services.Dispatcher.DispatcherPriority,System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
                Dispatches the execution of a method (with 4 parameters, using a return value).
            </summary>
            <typeparam name="T1"> The type of the first parameter. </typeparam>
            <typeparam name="T2"> The type of the second parameter. </typeparam>
            <typeparam name="T3"> The type of the third parameter. </typeparam>
            <typeparam name="T4"> The type of the fourth parameter. </typeparam>
            <typeparam name="TResult"> The type of the return value. </typeparam>
            <param name="priority"> The priority of the execution. </param>
            <param name="func"> The method to be executed. </param>
            <param name="arg1"> The value of the first parameter. </param>
            <param name="arg2"> The value of the second parameter. </param>
            <param name="arg3"> The value of the third parameter. </param>
            <param name="arg4"> The value of the fourth parameter. </param>
            <returns>
                The dispatcher operation which can be used to control the execution of the method.
                See <see cref="T:RI.Framework.Services.Dispatcher.IDispatcherOperation" /> for more details.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="func" /> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> The service is not fully initialized. </exception>
        </member>
        <member name="M:RI.Framework.Services.Dispatcher.IDispatcherService.RegisterReceiver``1(System.Action{``0})">
            <summary>
                Registers a receiver for a specified broadcast type.
            </summary>
            <typeparam name="T"> The broadcast type of the receiver. </typeparam>
            <param name="receiver"> The method which handles a broadcast of the specified type <typeparamref name="T" />. </param>
            <remarks>
                <para>
                    See <see cref="M:RI.Framework.Services.Dispatcher.IDispatcherService.Broadcast``1(RI.Framework.Services.Dispatcher.DispatcherPriority,``0)" /> for more details about broadcasting.
                </para>
                <note type="implement">
                    It is recommended that registering the same receiver multiple times is ignored.
                </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="receiver" /> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> The service is not fully initialized. </exception>
        </member>
        <member name="M:RI.Framework.Services.Dispatcher.IDispatcherService.UnregisterReceiver``1(System.Action{``0})">
            <summary>
                Unregisters a receiver for a specified broadcast type.
            </summary>
            <typeparam name="T"> The broadcast type of the receiver. </typeparam>
            <param name="receiver"> The method which handles a broadcast of the specified type <typeparamref name="T" />. </param>
            <remarks>
                <para>
                    See <see cref="M:RI.Framework.Services.Dispatcher.IDispatcherService.Broadcast``1(RI.Framework.Services.Dispatcher.DispatcherPriority,``0)" /> for more details about broadcasting.
                </para>
                <note type="implement">
                    It is recommended that unregistering the same receiver multiple times is ignored.
                </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="receiver" /> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> The service is not fully initialized. </exception>
        </member>
        <member name="T:RI.Framework.Services.Dispatcher.NamespaceDoc">
            <summary>
                Provides a service to dispatch events, data, processing, and tasks.
            </summary>
        </member>
        <member name="T:RI.Framework.Services.Logging.LogWriter">
            <summary>
                Implements a default log writer which is suitable for most scenarios.
            </summary>
            <remarks>
                <para>
                    <c> Debug.Log </c>, <c> Debug.LogWarning </c>, or <c> Debug.LogError </c> is used to write the log messages, depending on the severity of the message.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Services.Logging.LogWriter.RI#Framework#Services#Logging#ILogWriter#Cleanup(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Services.Logging.LogWriter.Log(System.DateTime,System.Int32,RI.Framework.Services.Logging.LogLevel,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:RI.Framework.Services.Logging.LogLocator">
            <summary>
                Provides a centralized and global logger.
            </summary>
            <remarks>
                <para>
                    <see cref="T:RI.Framework.Services.Logging.LogLocator" /> is merely a convenience utility as it uses <see cref="T:RI.Framework.Services.ServiceLocator" /> to retrieve and use a <see cref="T:RI.Framework.Services.Logging.ILogService" />.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Services.Logging.LogLocator.Log(RI.Framework.Services.Logging.LogLevel,System.String,System.String,System.Object[])">
            <summary>
                Logs a message.
            </summary>
            <param name="severity"> The severity of the message. </param>
            <param name="source"> The source of the message. </param>
            <param name="format"> The message. </param>
            <param name="args"> The arguments which will be expanded into the message (comparable to <see cref="M:System.String.Format(System.String,System.Object[])" />). </param>
        </member>
        <member name="M:RI.Framework.Services.Logging.LogLocator.LogDebug(System.String,System.String,System.Object[])">
            <summary>
                Logs a debug message.
            </summary>
            <param name="source"> The source of the message. </param>
            <param name="format"> The message. </param>
            <param name="args"> The arguments which will be expanded into the message (comparable to <see cref="M:System.String.Format(System.String,System.Object[])" />). </param>
        </member>
        <member name="M:RI.Framework.Services.Logging.LogLocator.LogError(System.String,System.String,System.Object[])">
            <summary>
                Logs a debug message.
            </summary>
            <param name="source"> The source of the message. </param>
            <param name="format"> The message. </param>
            <param name="args"> The arguments which will be expanded into the message (comparable to <see cref="M:System.String.Format(System.String,System.Object[])" />). </param>
        </member>
        <member name="M:RI.Framework.Services.Logging.LogLocator.LogInformation(System.String,System.String,System.Object[])">
            <summary>
                Logs a debug message.
            </summary>
            <param name="source"> The source of the message. </param>
            <param name="format"> The message. </param>
            <param name="args"> The arguments which will be expanded into the message (comparable to <see cref="M:System.String.Format(System.String,System.Object[])" />). </param>
        </member>
        <member name="M:RI.Framework.Services.Logging.LogLocator.LogWarning(System.String,System.String,System.Object[])">
            <summary>
                Logs a debug message.
            </summary>
            <param name="source"> The source of the message. </param>
            <param name="format"> The message. </param>
            <param name="args"> The arguments which will be expanded into the message (comparable to <see cref="M:System.String.Format(System.String,System.Object[])" />). </param>
        </member>
        <member name="T:RI.Framework.Services.Logging.DirectoryLogWriter">
            <summary>
                Implements a log writer which writes text log files into a specified directory.
            </summary>
            <remarks>
                <para>
                    The specified directory (the common log directory) contains subdirectories where each instance of <see cref="T:RI.Framework.Services.Logging.DirectoryLogWriter" /> is associated with one such subdirectory and where the current log directory of this <see cref="T:RI.Framework.Services.Logging.DirectoryLogWriter" /> instance is such a subdirectory.
                    The name of the current log directory corresponds to the specified timestamp or to the timestamp at the time the <see cref="T:RI.Framework.Services.Logging.DirectoryLogWriter" /> was instantiated (depending on the used constructor).
                    The name of the current log directory is in the format yyyy-MM-dd-HH-mm-ss-fff or <c> 2016-02-01-14-30-50-333 </c> for example.
                </para>
            </remarks>
        </member>
        <member name="F:RI.Framework.Services.Logging.DirectoryLogWriter.DefaultEncoding">
            <summary>
                The default text encoding which is used to write the log files.
            </summary>
            <remarks>
                <para>
                    The default text encoding is UTF-8.
                </para>
            </remarks>
        </member>
        <member name="F:RI.Framework.Services.Logging.DirectoryLogWriter.DefaultFileName">
            <summary>
                The default file name for the log files in the current log directories.
            </summary>
            <remarks>
                <para>
                    The default file name is <c> Log.txt </c>.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Services.Logging.DirectoryLogWriter.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Services.Logging.DirectoryLogWriter" />.
            </summary>
            <param name="directory"> The common log directory. </param>
            <remarks>
                <para>
                    The default file name <see cref="F:RI.Framework.Services.Logging.DirectoryLogWriter.DefaultFileName" /> is used as the file name of the text log file in the current log directory.
                </para>
                <para>
                    The default encoding <see cref="F:RI.Framework.Services.Logging.DirectoryLogWriter.DefaultEncoding" /> is used as the text encoding to write the log files.
                </para>
                <para>
                    <see cref="P:System.DateTime.Now" /> is used as the timestamp for the current log directory.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Services.Logging.DirectoryLogWriter.#ctor(System.String,System.String,System.Text.Encoding,System.DateTime)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Services.Logging.DirectoryLogWriter" />.
            </summary>
            <param name="directory"> The common log directory. </param>
            <param name="fileName"> The file name of the text log file in the current log directory. </param>
            <param name="encoding"> The text encoding which is used to write the log files. </param>
            <param name="timestamp"> The timestamp which is used as the name for the current log directory. </param>
        </member>
        <member name="M:RI.Framework.Services.Logging.DirectoryLogWriter.Finalize">
            <summary>
                Garbage collects this instance of <see cref="T:RI.Framework.Services.Logging.DirectoryLogWriter" />.
            </summary>
        </member>
        <member name="P:RI.Framework.Services.Logging.DirectoryLogWriter.CommonDirectory">
            <summary>
                Gets the common log directory which contains the current log directory (<see cref="P:RI.Framework.Services.Logging.DirectoryLogWriter.CurrentDirectory" />).
            </summary>
            <value>
                The common log directory.
            </value>
        </member>
        <member name="P:RI.Framework.Services.Logging.DirectoryLogWriter.CurrentDirectory">
            <summary>
                Gets the current log directory which is a subdirectory of the common log directory (<see cref="P:RI.Framework.Services.Logging.DirectoryLogWriter.CommonDirectory" />).
            </summary>
            <value>
                The current log directory.
            </value>
        </member>
        <member name="P:RI.Framework.Services.Logging.DirectoryLogWriter.CurrentFile">
            <summary>
                Gets the current log file in the current log directory (<see cref="P:RI.Framework.Services.Logging.DirectoryLogWriter.CurrentDirectory" />).
            </summary>
            <value>
                The current log file.
            </value>
        </member>
        <member name="P:RI.Framework.Services.Logging.DirectoryLogWriter.Encoding">
            <summary>
                Gets the used text encoding which is used to write log files.
            </summary>
            <value>
                The used text encoding which is used to write log files.
            </value>
        </member>
        <member name="P:RI.Framework.Services.Logging.DirectoryLogWriter.Timestamp">
            <summary>
                Gets the timestamp which is used as the name for the current log directory.
            </summary>
            <value>
                The timestamp which is used as the name for the current log directory.
            </value>
        </member>
        <member name="M:RI.Framework.Services.Logging.DirectoryLogWriter.Dispose">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Services.Logging.DirectoryLogWriter.Cleanup(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Services.Logging.DirectoryLogWriter.Log(System.DateTime,System.Int32,RI.Framework.Services.Logging.LogLevel,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:RI.Framework.Services.Logging.ILogService">
            <summary>
                Defines the interface for a logging service.
            </summary>
            <remarks>
                <para>
                    A logging service provides logging to one or more targets, represented as <see cref="T:RI.Framework.Services.Logging.ILogWriter" />s.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Framework.Services.Logging.ILogService.Writers">
            <summary>
                Gets all currently available log writers.
            </summary>
            <value>
                All currently available log writers.
            </value>
            <remarks>
                <note type="implement">
                    The value of this property must never be null.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Framework.Services.Logging.ILogService.AddWriter(RI.Framework.Services.Logging.ILogWriter)">
            <summary>
                Adds a log writer and starts using it for all subsequent logging.
            </summary>
            <param name="logWriter"> The log writer to add. </param>
            <remarks>
                <note type="implement">
                    Specifying an already added log writer should have no effect.
                </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="logWriter" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Services.Logging.ILogService.Cleanup(System.DateTime)">
            <summary>
                Performs a cleanup of old log messages.
            </summary>
            <param name="retentionDate"> The date and time from which all older log messages are to be cleaned up. </param>
            <remarks>
                <note type="note">
                    The actual cleanup and whether it is possible at all depends on the individual <see cref="T:RI.Framework.Services.Logging.ILogWriter" />.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Framework.Services.Logging.ILogService.Cleanup(System.TimeSpan)">
            <summary>
                Performs a cleanup of old log messages.
            </summary>
            <param name="retentionTime"> The time span of messages from now into the past which are to be kept. </param>
            <remarks>
                <note type="note">
                    The actual cleanup and whether it is possible at all depends on the individual <see cref="T:RI.Framework.Services.Logging.ILogWriter" />.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Framework.Services.Logging.ILogService.Log(RI.Framework.Services.Logging.LogLevel,System.String,System.String,System.Object[])">
            <summary>
                Logs a message.
            </summary>
            <param name="severity"> The severity of the message. </param>
            <param name="source"> The source of the message. </param>
            <param name="format"> The message. </param>
            <param name="args"> The arguments which will be expanded into the message (comparable to <see cref="M:System.String.Format(System.String,System.Object[])" />). </param>
        </member>
        <member name="M:RI.Framework.Services.Logging.ILogService.Log(System.DateTime,System.Int32,RI.Framework.Services.Logging.LogLevel,System.String,System.String,System.Object[])">
            <summary>
                Logs a message.
            </summary>
            <param name="timestamp"> The timestamp the log message is associated with. </param>
            <param name="threadId"> The threadId the log message is associated with. </param>
            <param name="severity"> The severity of the message. </param>
            <param name="source"> The source of the message. </param>
            <param name="format"> The message. </param>
            <param name="args"> The arguments which will be expanded into the message (comparable to <see cref="M:System.String.Format(System.String,System.Object[])" />). </param>
            <remarks>
                <para>
                    The <paramref name="threadId" /> is not necessarily a technical relevant ID and its meaning is undefined.
                    It is only used to distinguish log messages coming from different threads.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Services.Logging.ILogService.RemoveWriter(RI.Framework.Services.Logging.ILogWriter)">
            <summary>
                Removes a log writer and stops using it for all subsequent logging.
            </summary>
            <param name="logWriter"> The log writer to remove. </param>
            <remarks>
                <note type="implement">
                    Specifying an already removed log writer should have no effect.
                </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="logWriter" /> is null. </exception>
        </member>
        <member name="T:RI.Framework.Services.Logging.ILogWriter">
            <summary>
                Defines the interface for a log writer.
            </summary>
            <remarks>
                <para>
                    A log writer acts as an actual target for writing log messages as produced by an <see cref="T:RI.Framework.Services.Logging.ILogService" />.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Services.Logging.ILogWriter.Cleanup(System.DateTime)">
            <summary>
                Performs a cleanup of old log messages.
            </summary>
            <param name="retentionDate"> The date and time from which all older log messages are to be cleaned up. </param>
            <remarks>
                <note type="implement">
                    If the implemented log writer does not support cleanup of old log messages, this method should do simply nothing.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Framework.Services.Logging.ILogWriter.Log(System.DateTime,System.Int32,RI.Framework.Services.Logging.LogLevel,System.String,System.String)">
            <summary>
                Writes a log message.
            </summary>
            <param name="timestamp"> The timestamp the log message is associated with. </param>
            <param name="threadId"> The threadId the log message is associated with. </param>
            <param name="severity"> The severity of the log message. </param>
            <param name="source"> The source of the log message. </param>
            <param name="message"> The log message. </param>
            <remarks>
                <para>
                    The <paramref name="threadId" /> is not necessarily a technical relevant ID and its meaning is undefined.
                    It is only used to distinguish log messages coming from different threads.
                </para>
            </remarks>
        </member>
        <member name="T:RI.Framework.Services.Logging.LogLevel">
            <summary>
                Defines the severity of a log message.
            </summary>
        </member>
        <member name="F:RI.Framework.Services.Logging.LogLevel.Debug">
            <summary>
                Debug.
            </summary>
        </member>
        <member name="F:RI.Framework.Services.Logging.LogLevel.Information">
            <summary>
                Information.
            </summary>
        </member>
        <member name="F:RI.Framework.Services.Logging.LogLevel.Warning">
            <summary>
                Warning.
            </summary>
        </member>
        <member name="F:RI.Framework.Services.Logging.LogLevel.Error">
            <summary>
                Error.
            </summary>
        </member>
        <member name="T:RI.Framework.Services.Logging.LogService">
            <summary>
                Implements a default logging service which is suitable for most scenarios.
            </summary>
            <remarks>
                <para>
                    This logging service uses <see cref="T:RI.Framework.Services.Logging.ILogWriter" />s from two sources.
                    One are the explicitly specified log writers added through <see cref="M:RI.Framework.Services.Logging.LogService.AddWriter(RI.Framework.Services.Logging.ILogWriter)" />.
                    The second is a <see cref="T:RI.Framework.Composition.CompositionContainer" /> if this <see cref="T:RI.Framework.Services.Logging.LogService" /> is added as an export (the log writers are then imported through composition).
                    <see cref="P:RI.Framework.Services.Logging.LogService.Writers" /> gives the sequence containing all log writers from all sources.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Services.Logging.LogService.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Services.Logging.LogService" />.
            </summary>
        </member>
        <member name="P:RI.Framework.Services.Logging.LogService.Writers">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Services.Logging.LogService.AddWriter(RI.Framework.Services.Logging.ILogWriter)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Services.Logging.LogService.Cleanup(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Services.Logging.LogService.Cleanup(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Services.Logging.LogService.Log(RI.Framework.Services.Logging.LogLevel,System.String,System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Services.Logging.LogService.Log(System.DateTime,System.Int32,RI.Framework.Services.Logging.LogLevel,System.String,System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Services.Logging.LogService.RemoveWriter(RI.Framework.Services.Logging.ILogWriter)">
            <inheritdoc />
        </member>
        <member name="T:RI.Framework.Services.Logging.NamespaceDoc">
            <summary>
                Provides a service to perform logging.
            </summary>
        </member>
        <member name="T:RI.Framework.Services.Modularization.MonoModule">
            <summary>
                Implements a base class which can be used for <c> MonoBehaviour </c> based module implementation.
            </summary>
            <remarks>
                <note type="note">
                    Instances of <see cref="T:RI.Framework.Services.Modularization.MonoModule" />s are not created using their constructor (as this would be the wrong way how to instantiate anything <c> MonoBehaviour </c>). Instead, <see cref="M:RI.Framework.Services.Modularization.MonoModule.CreateInstance(System.Type)" /> is used.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Framework.Services.Modularization.MonoModule.CreateInstance(System.Type)">
            <summary>
                Creates an instance of the specified <see cref="T:RI.Framework.Services.Modularization.MonoModule" /> type.
            </summary>
            <param name="type"> The type of which an instance is to be created. </param>
            <returns> The created instance. </returns>
            <remarks>
                <para>
                    To instantiate a <see cref="T:RI.Framework.Services.Modularization.MonoModule" />, a new <c> GameObject </c> is created to which the <see cref="T:RI.Framework.Services.Modularization.MonoModule" /> is added as a component using <c> AddComponent </c>.
                    The created <c> GameObject </c> has also called <c> Object.DontDestroyOnLoad </c> on it.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="type" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Services.Modularization.MonoModule.Log(RI.Framework.Services.Logging.LogLevel,System.String,System.Object[])">
            <summary>
                Logs a message.
            </summary>
            <param name="severity"> The severity of the message. </param>
            <param name="format"> The message. </param>
            <param name="args"> The arguments which will be expanded into the message (comparable to <see cref="M:System.String.Format(System.String,System.Object[])" />). </param>
            <remarks>
                <para>
                    <see cref="T:RI.Framework.Services.Logging.ILogService" /> is used, obtained through <see cref="T:RI.Framework.Services.Logging.LogLocator" />.
                    If no <see cref="T:RI.Framework.Services.Logging.ILogService" /> is available, no logging is performed.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Services.Modularization.MonoModule.Initialize">
            <inheritdoc cref="M:RI.Framework.Services.Modularization.IModule.Initialize" />
        </member>
        <member name="M:RI.Framework.Services.Modularization.MonoModule.Unload">
            <inheritdoc cref="M:RI.Framework.Services.Modularization.IModule.Unload" />
        </member>
        <member name="P:RI.Framework.Services.Modularization.MonoModule.IsInitialized">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Services.Modularization.MonoModule.RI#Framework#Services#Modularization#IModule#Initialize">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Services.Modularization.MonoModule.RI#Framework#Services#Modularization#IModule#Unload">
            <inheritdoc />
        </member>
        <member name="T:RI.Framework.Services.Modularization.IModule">
            <summary>
                Defines the interface for a module.
            </summary>
            <remarks>
                <para>
                    A module implements a self-contained functionality or service of an application which is implemented separate of other modules and managed by an <see cref="T:RI.Framework.Services.Modularization.IModuleService" />.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Framework.Services.Modularization.IModule.IsInitialized">
            <summary>
                Gets whether the module is initialized or not.
            </summary>
            <value>
                true if the module is initialized, false otherwise or after the module was unloaded.
            </value>
        </member>
        <member name="M:RI.Framework.Services.Modularization.IModule.Initialize">
            <summary>
                Initializes the module.
            </summary>
        </member>
        <member name="M:RI.Framework.Services.Modularization.IModule.Unload">
            <summary>
                Unloads the module.
            </summary>
        </member>
        <member name="T:RI.Framework.Services.Modularization.IModuleService">
            <summary>
                Defines the interface for a modularization service.
            </summary>
            <remarks>
                <para>
                    A modularization service manages the current <see cref="T:RI.Framework.Services.Modularization.IModule" /> instances of an application, including initialization and unloading.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Framework.Services.Modularization.IModuleService.IsInitialized">
            <summary>
                Gets whether the modules are initialized or not.
            </summary>
            <value>
                true if the modules are initialized, false otherwise or after the modules were unloaded.
            </value>
        </member>
        <member name="P:RI.Framework.Services.Modularization.IModuleService.Modules">
            <summary>
                Gets all currently available modules.
            </summary>
            <value>
                All currently available modules.
            </value>
            <remarks>
                <note type="implement">
                    The value of this property must never be null.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Framework.Services.Modularization.IModuleService.AddModule(RI.Framework.Services.Modularization.IModule)">
            <summary>
                Adds a module and initializes it if <see cref="M:RI.Framework.Services.Modularization.IModuleService.Initialize" /> was called before.
            </summary>
            <param name="module"> The module to add. </param>
            <remarks>
                <note type="implement">
                    Specifying an already added module should have no effect.
                </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="module" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Services.Modularization.IModuleService.Initialize">
            <summary>
                Initializes all modules.
            </summary>
        </member>
        <member name="M:RI.Framework.Services.Modularization.IModuleService.RemoveModule(RI.Framework.Services.Modularization.IModule)">
            <summary>
                Removes a module and unloads it if <see cref="M:RI.Framework.Services.Modularization.IModuleService.Initialize" /> was called before.
            </summary>
            <param name="module"> The module to remove. </param>
            <remarks>
                <note type="implement">
                    Specifying an already removed module should have no effect.
                </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="module" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Services.Modularization.IModuleService.Unload">
            <summary>
                Unloads all modules.
            </summary>
        </member>
        <member name="T:RI.Framework.Services.Modularization.Module">
            <summary>
                Implements a base class which can be used for module implementation
            </summary>
        </member>
        <member name="M:RI.Framework.Services.Modularization.Module.Log(RI.Framework.Services.Logging.LogLevel,System.String,System.Object[])">
            <summary>
                Logs a message.
            </summary>
            <param name="severity"> The severity of the message. </param>
            <param name="format"> The message. </param>
            <param name="args"> The arguments which will be expanded into the message (comparable to <see cref="M:System.String.Format(System.String,System.Object[])" />). </param>
            <remarks>
                <para>
                    <see cref="T:RI.Framework.Services.Logging.ILogService" /> is used, obtained through <see cref="T:RI.Framework.Services.Logging.LogLocator" />.
                    If no <see cref="T:RI.Framework.Services.Logging.ILogService" /> is available, no logging is performed.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Services.Modularization.Module.Initialize">
            <inheritdoc cref="M:RI.Framework.Services.Modularization.IModule.Initialize" />
        </member>
        <member name="M:RI.Framework.Services.Modularization.Module.Unload">
            <inheritdoc cref="M:RI.Framework.Services.Modularization.IModule.Unload" />
        </member>
        <member name="P:RI.Framework.Services.Modularization.Module.IsInitialized">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Services.Modularization.Module.RI#Framework#Services#Modularization#IModule#Initialize">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Services.Modularization.Module.RI#Framework#Services#Modularization#IModule#Unload">
            <inheritdoc />
        </member>
        <member name="T:RI.Framework.Services.Modularization.ModuleService">
            <summary>
                Implements a default modularization service which is suitable for most scenarios.
            </summary>
            <remarks>
                <para>
                    This modularization service manages <see cref="T:RI.Framework.Services.Modularization.IModule" />s from two sources.
                    One are the explicitly specified modules added through <see cref="M:RI.Framework.Services.Modularization.ModuleService.AddModule(RI.Framework.Services.Modularization.IModule)" />.
                    The second is a <see cref="T:RI.Framework.Composition.CompositionContainer" /> if this <see cref="T:RI.Framework.Services.Modularization.ModuleService" /> is added as an export (the modules are then imported through composition).
                    <see cref="P:RI.Framework.Services.Modularization.ModuleService.Modules" /> gives the sequence containing all modules from all sources.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Services.Modularization.ModuleService.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Services.Modularization.ModuleService" />.
            </summary>
        </member>
        <member name="M:RI.Framework.Services.Modularization.ModuleService.RI#Framework#Composition#Model#IImporting#ImportsResolved(RI.Framework.Composition.CompositionFlags,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Services.Modularization.ModuleService.RI#Framework#Composition#Model#IImporting#ImportsResolving(RI.Framework.Composition.CompositionFlags)">
            <inheritdoc />
        </member>
        <member name="P:RI.Framework.Services.Modularization.ModuleService.IsInitialized">
            <inheritdoc />
        </member>
        <member name="P:RI.Framework.Services.Modularization.ModuleService.Modules">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Services.Modularization.ModuleService.AddModule(RI.Framework.Services.Modularization.IModule)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Services.Modularization.ModuleService.Initialize">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Services.Modularization.ModuleService.RemoveModule(RI.Framework.Services.Modularization.IModule)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Services.Modularization.ModuleService.Unload">
            <inheritdoc />
        </member>
        <member name="T:RI.Framework.Services.Modularization.NamespaceDoc">
            <summary>
                Provides a service for modularizing an application.
            </summary>
        </member>
        <member name="T:RI.Framework.Services.IBootstrapper">
            <summary>
                Defines the interface for an application and service bootstrapper.
            </summary>
            <remarks>
                <para>
                    An application and service bootstrapper sets up the composition, initializes the services, and then runs the application.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Services.IBootstrapper.Run">
            <summary>
                Starts the bootstrapping and runs the application.
            </summary>
            <remarks>
                <note type="implement">
                    <see cref="M:RI.Framework.Services.IBootstrapper.Run" /> must only be called once.
                </note>
            </remarks>
            <exception cref="T:System.InvalidOperationException"> <see cref="M:RI.Framework.Services.IBootstrapper.Run" /> was called repeatedly. </exception>
        </member>
        <member name="M:RI.Framework.Services.IBootstrapper.Shutdown">
            <summary>
                Initiates the shutdown of the application.
            </summary>
            <remarks>
                <note type="implement">
                    It must be possible to call <see cref="M:RI.Framework.Services.IBootstrapper.Shutdown" /> multiple times.
                </note>
            </remarks>
            <exception cref="T:System.InvalidOperationException"> <see cref="M:RI.Framework.Services.IBootstrapper.Run" /> was not called before. </exception>
        </member>
        <member name="T:RI.Framework.Services.ServiceLocator">
            <summary>
                Provides a centralized and global locator to lookup services.
            </summary>
            <remarks>
                <para>
                    The actual lookup is performed by handling the <see cref="E:RI.Framework.Services.ServiceLocator.Translate" /> and <see cref="E:RI.Framework.Services.ServiceLocator.Lookup" /> events.
                    This allows to globally retrieve services in a way which is independent on how they are structured, instantiated, and managed.
                </para>
                <para>
                    A &quot;service&quot; can actually be any object/instance which is required to be made globally available (comparable to a singleton).
                </para>
            </remarks>
            <example>
                <para>
                    The following example shows how the <see cref="T:RI.Framework.Services.ServiceLocator" /> can be used to globally access services, a logging service in this case:
                </para>
                <code language="cs">
            <![CDATA[
            // get the logging service
            var logService = ServiceLocator.GetInstance<ILogService>();
            
            // use the logging service if available
            if (logService != null)
            {
                logService.Log(LogLevel.Debug, this.GetType().Name, "Hello debugger.");
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="E:RI.Framework.Services.ServiceLocator.Lookup">
            <summary>
                Raised when a service is to be looked-up by its name.
            </summary>
        </member>
        <member name="E:RI.Framework.Services.ServiceLocator.Translate">
            <summary>
                Raised when a type needs to be translated to a name.
            </summary>
            <remarks>
                This event is raised before <see cref="E:RI.Framework.Services.ServiceLocator.Lookup" /> in case the lookup is specified using a type instead of a name so that the type needs to be translated into a name which then can be used for the actual lookup using <see cref="E:RI.Framework.Services.ServiceLocator.Lookup" />.
            </remarks>
        </member>
        <member name="M:RI.Framework.Services.ServiceLocator.BindToCompositionContainer(RI.Framework.Composition.CompositionContainer)">
            <summary>
                Binds the service locator to a specified composition container which is then used for service lookup.
            </summary>
            <param name="compositionContainer"> The composition container from which the services should be looked-up. </param>
            <remarks>
                <para>
                    <see cref="M:RI.Framework.Composition.CompositionContainer.GetNameOfType(System.Type)" /> is used for type-to-name translation (handling the <see cref="E:RI.Framework.Services.ServiceLocator.Translate" /> event) and <see cref="M:RI.Framework.Composition.CompositionContainer.GetExports``1(System.String)" /> for lookup (handling the <see cref="E:RI.Framework.Services.ServiceLocator.Lookup" /> event).
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="compositionContainer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Services.ServiceLocator.GetInstance``1">
            <summary>
                Retrieves a service instance by its type.
            </summary>
            <typeparam name="T"> The type of the service to retrieve. </typeparam>
            <returns>
                The service instance or null if it cannot be found.
            </returns>
        </member>
        <member name="M:RI.Framework.Services.ServiceLocator.GetInstance``1(System.Type)">
            <summary>
                Retrieves a service instance by its type.
            </summary>
            <param name="type"> The type of the service to retrieve. </param>
            <typeparam name="T"> The type to which the service is converted to. </typeparam>
            <returns>
                The service instance or null if it cannot be found or converted to <typeparamref name="T" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="type" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Services.ServiceLocator.GetInstance``1(System.String)">
            <summary>
                Retrieves a service instance by its name.
            </summary>
            <param name="name"> The name of the service to retrieve. </param>
            <typeparam name="T"> The type to which the service is converted to. </typeparam>
            <returns>
                The service instance or null if it cannot be found or converted to <typeparamref name="T" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="name" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="name" /> is an empty string. </exception>
        </member>
        <member name="M:RI.Framework.Services.ServiceLocator.GetInstance(System.Type)">
            <summary>
                Retrieves a service instance by its type.
            </summary>
            <param name="type"> The type of the service to retrieve. </param>
            <returns>
                The service instance or null if it cannot be found.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="type" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Services.ServiceLocator.GetInstance(System.String)">
            <summary>
                Retrieves a service instance by its name.
            </summary>
            <param name="name"> The name of the service to retrieve. </param>
            <returns>
                The service instance or null if it cannot be found.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="name" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="name" /> is an empty string. </exception>
        </member>
        <member name="T:RI.Framework.Services.NamespaceDoc">
            <summary>
                Contains types for implementing globally available services.
            </summary>
        </member>
        <member name="T:RI.Framework.IO.INI.Elements.CommentIniElement">
            <summary>
                Represents a comment in INI data.
            </summary>
            <remarks>
                <para>
                    See <see cref="T:RI.Framework.IO.INI.IniDocument" /> for more general and detailed information about working with INI data.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.IO.INI.Elements.CommentIniElement.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.IO.INI.Elements.CommentIniElement" />.
            </summary>
            <param name="comment"> The comment. </param>
        </member>
        <member name="P:RI.Framework.IO.INI.Elements.CommentIniElement.Comment">
            <summary>
                Gets or sets the comment.
            </summary>
            <value>
                The comment.
            </value>
            <remarks>
                <note type="note">
                    The value returned by this property is never null.
                    If null is set, it is replaced with <see cref="F:System.String.Empty" />.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Framework.IO.INI.Elements.CommentIniElement.ToString">
            <inheritdoc />
        </member>
        <member name="T:RI.Framework.IO.INI.Elements.SectionIniElement">
            <summary>
                Represents a section header in INI data.
            </summary>
            <remarks>
                <para>
                    See <see cref="T:RI.Framework.IO.INI.IniDocument" /> for more general and detailed information about working with INI data.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.IO.INI.Elements.SectionIniElement.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.IO.INI.Elements.SectionIniElement" />.
            </summary>
            <param name="sectionName"> The section name. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="sectionName" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="sectionName" /> is an empty string. </exception>
        </member>
        <member name="P:RI.Framework.IO.INI.Elements.SectionIniElement.SectionName">
            <summary>
                Gets or sets the section name.
            </summary>
            <value>
                The section name.
            </value>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="value" /> is an empty string. </exception>
        </member>
        <member name="M:RI.Framework.IO.INI.Elements.SectionIniElement.ToString">
            <inheritdoc />
        </member>
        <member name="T:RI.Framework.IO.INI.Elements.TextIniElement">
            <summary>
                Represents arbitrary text in INI data.
            </summary>
            <remarks>
                <para>
                    See <see cref="T:RI.Framework.IO.INI.IniDocument" /> for more general and detailed information about working with INI data.
                </para>
                <para>
                    Arbitrary text is everything in an INI file which is not a section header, comment, or name-value-pair.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.IO.INI.Elements.TextIniElement.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.IO.INI.Elements.TextIniElement" />.
            </summary>
            <param name="text"> The arbitrary text. </param>
        </member>
        <member name="P:RI.Framework.IO.INI.Elements.TextIniElement.Text">
            <summary>
                Gets or sets the arbitrary text.
            </summary>
            <value>
                The arbitrary text.
            </value>
            <remarks>
                <note type="note">
                    The value returned by this property is never null.
                    If null is set, it is replaced with <see cref="F:System.String.Empty" />.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Framework.IO.INI.Elements.TextIniElement.ToString">
            <inheritdoc />
        </member>
        <member name="T:RI.Framework.IO.INI.Elements.ValueIniElement">
            <summary>
                Represents a name-value-pair in INI data.
            </summary>
            <remarks>
                <para>
                    See <see cref="T:RI.Framework.IO.INI.IniDocument" /> for more general and detailed information about working with INI data.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.IO.INI.Elements.ValueIniElement.#ctor(System.String,System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.IO.INI.Elements.ValueIniElement" />.
            </summary>
            <param name="name"> The name. </param>
            <param name="value"> The value. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="name" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="name" /> is an empty string. </exception>
        </member>
        <member name="P:RI.Framework.IO.INI.Elements.ValueIniElement.Name">
            <summary>
                Gets or sets the name.
            </summary>
            <value>
                The name.
            </value>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="value" /> is an empty string. </exception>
        </member>
        <member name="P:RI.Framework.IO.INI.Elements.ValueIniElement.Value">
            <summary>
                Gets or sets the value.
            </summary>
            <value>
                The value.
            </value>
            <remarks>
                <note type="note">
                    The value returned by this property is never null.
                    If null is set, it is replaced with <see cref="F:System.String.Empty" />.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Framework.IO.INI.Elements.ValueIniElement.ToString">
            <inheritdoc />
        </member>
        <member name="T:RI.Framework.IO.INI.Elements.NamespaceDoc">
            <summary>
                Contains INI element types which represent INI data elements.
            </summary>
        </member>
        <member name="T:RI.Framework.IO.INI.IniDocument">
            <summary>
                Contains and manages structured INI data.
            </summary>
            <remarks>
                <para>
                    <b> GENERAL </b>
                </para>
                <para>
                    INI data in an <see cref="T:RI.Framework.IO.INI.IniDocument" /> is stored in the <see cref="P:RI.Framework.IO.INI.IniDocument.Elements" /> property.
                    <see cref="P:RI.Framework.IO.INI.IniDocument.Elements" /> is always kept up to date and all actions performed on an <see cref="T:RI.Framework.IO.INI.IniDocument" /> directly read from or modify <see cref="P:RI.Framework.IO.INI.IniDocument.Elements" />.
                </para>
                <para>
                    <see cref="P:RI.Framework.IO.INI.IniDocument.Elements" /> is a list which contains all the INI elements of the INI data in a sequential order (e.g. as they would appear in an INI file).
                    The INI elements are all of the abstract base type <see cref="T:RI.Framework.IO.INI.IniElement" />, the concrete type depending on the type of the element (<see cref="T:RI.Framework.IO.INI.Elements.SectionIniElement" />, <see cref="T:RI.Framework.IO.INI.Elements.ValueIniElement" />, <see cref="T:RI.Framework.IO.INI.Elements.CommentIniElement" />, <see cref="T:RI.Framework.IO.INI.Elements.TextIniElement" />).
                </para>
                <para>
                    <see cref="P:RI.Framework.IO.INI.IniDocument.Elements" /> can be modified arbitrarily by either using methods of <see cref="T:RI.Framework.IO.INI.IniDocument" /> or by modifying the list itself.
                    The list can contain or be modified to contain any sequence of the four types of INI elements mentioned above.
                    Any sequence of INI elements will be valid as each instance of a derivate of <see cref="T:RI.Framework.IO.INI.IniElement" /> is independent to any other type of INI element.
                </para>
                <note type="important">
                    Be aware that although each INI element is independent of each other, the sequence of INI elements has semantical meaning, depending of the data and its context stored in the INI data.
                    For example, a <see cref="T:RI.Framework.IO.INI.Elements.SectionIniElement" /> is technically independent from its following <see cref="T:RI.Framework.IO.INI.Elements.ValueIniElement" />s, but when processed the <see cref="T:RI.Framework.IO.INI.Elements.SectionIniElement" /> defines the section to which the following <see cref="T:RI.Framework.IO.INI.Elements.ValueIniElement" /> belong.
                </note>
                <note type="important">
                    Be careful when performing actions which insert, remove, or reorder INI elements as this might change the semantical meaning of one or several sections!
                </note>
                <para>
                    <b> ANATOMY OF INI DATA &amp; ELEMENTS </b>
                </para>
                <para>
                    INI data outside an <see cref="T:RI.Framework.IO.INI.IniDocument" /> is organized as text line-by-line (e.g. a string or *.ini file containing the INI data).
                    Inside an <see cref="T:RI.Framework.IO.INI.IniDocument" />, the INI data represented by <see cref="T:RI.Framework.IO.INI.IniElement" />s, stored in <see cref="P:RI.Framework.IO.INI.IniDocument.Elements" />, is on a technical abstraction (reflecting the line-by-line organization), not a semantical abstraction.
                    This means that basically each line of INI data is represented by a seperate <see cref="T:RI.Framework.IO.INI.IniElement" />, depending on the type of line.
                </para>
                <para>
                    There are four types of lines in INI data, each represented with their own derivate of <see cref="T:RI.Framework.IO.INI.IniElement" />:
                    Sections (<see cref="T:RI.Framework.IO.INI.Elements.SectionIniElement" />), Name-Value-Pairs (<see cref="T:RI.Framework.IO.INI.Elements.ValueIniElement" />), Comments (<see cref="T:RI.Framework.IO.INI.Elements.CommentIniElement" />), and Text (<see cref="T:RI.Framework.IO.INI.Elements.TextIniElement" />).
                    Any possible line in a set of INI data will fit into exactly one of those types.
                </para>
                <para>
                    <b> Sections: </b>
                    A section is started by a section header.
                    The section header contains the name of the section.
                    All elements following the section header belong to that section until the next section header appears.
                    So a section includes its section header and all elements following the section header.
                    A section header is a single line, in the form <c> [name of the section] </c>, and is represented using <see cref="T:RI.Framework.IO.INI.Elements.SectionIniElement" />.
                    When INI data is parsed, leading and trailing whitespace of a line is ignored for section headers and the section name must be enclosed in <c> [ </c> and <c> ] </c>.
                    Leading and trailing whitespace of the section name itself is not ignored.
                    There can be multiple sections which have the same name.
                </para>
                <para>
                    <b> Name-Value-Pairs: </b>
                    Name-value-pairs are the actual data intended to be stored and transported by INI data.
                    A name-value-pair is a single line, in the form of <c> name=value </c>, and is represented using <see cref="T:RI.Framework.IO.INI.Elements.ValueIniElement" />.
                    When INI data is parsed, leading and trailing whitespace of both the name and the value is not ignored.
                    There can be multiple name-value-pairs inside the same (or another) section which have the same name.
                </para>
                <para>
                    <b> Comments: </b>
                    A comment is a text which is explicitly marked as a comment and is only intended for annotating the INI data when viewed directly (e.g. opening an *.ini file in a text editor).
                    Comments are not processed by <see cref="T:RI.Framework.IO.INI.IniDocument" /> besides loading/saving them to/from <see cref="P:RI.Framework.IO.INI.IniDocument.Elements" />.
                    A comment is in the form <c> ;comment </c> and represented using <see cref="T:RI.Framework.IO.INI.Elements.CommentIniElement" />.
                    Note that consecutive comment lines will be combined into a single <see cref="T:RI.Framework.IO.INI.Elements.CommentIniElement" />.
                    When INI data is parsed, leading whitespace of a comment is ignored, up to <c> ; </c>, but not ignored in the comment itself.
                </para>
                <para>
                    <b> Text: </b>
                    A text is everything else which is not a section header, name-value-pair, or comment, and is represented using <see cref="T:RI.Framework.IO.INI.Elements.TextIniElement" />
                    Therefore, technically speaking, text elements are actually invalid sections and should not be used in any processing.
                    Text is not processed by <see cref="T:RI.Framework.IO.INI.IniDocument" /> besides loading/saving them to/from <see cref="P:RI.Framework.IO.INI.IniDocument.Elements" />.
                    Note that consecutive text lines will be combined into a single <see cref="T:RI.Framework.IO.INI.Elements.TextIniElement" />.
                </para>
                <note type="note">
                    Note that elements always belong to a section.
                    This is either the section started by the last section header or the default section if no section header appeared before the element.
                    When &quot;outside a section&quot; is mentioned in the description of <see cref="T:RI.Framework.IO.INI.IniDocument" />, that default section is meant.
                </note>
                <para>
                    <b> ESCAPING </b>
                </para>
                <para>
                    INI data uses characters with special meanings to structure elements: <c> [ </c>, <c> ] </c>, <c> = </c>, <c> ; </c>, and <c> CRLF </c> or <c> LF </c> respectively (depending on the used line-ending-style).
                    This means that those special characters cannot appear as-is within section names, names of name-value-pairs, or values of name-value-pairs.
                    Therefore, if such special characters are used in such a way, they need to be escaped (similar to escape sequences such as <c> \r\n </c>).
                </para>
                <para>
                    Another special character is used to start an escape sequence: <c> | </c>.
                    This means that the character after <c> | </c> defines which one of the special characters is to be represented by the escape sequence.
                    The following escape sequences are possible: <c> |[ </c>, <c> |] </c>, <c> |= </c>, <c> |; </c>, <c> |r </c>, <c> |n </c>, <c> || </c>.
                    <c> |r </c> is carriage-return (CR), <c> |n </c> new-line or line-feed (LF), and <c> || </c> is used to represent <c> | </c> itself.
                </para>
                <para>
                    This escaping mechanism makes it possible to have any text, including multi-line text, for names and values.
                    When INI data is read or written by <see cref="T:RI.Framework.IO.INI.IniDocument" />, <see cref="T:RI.Framework.IO.INI.IniReader" />, <see cref="T:RI.Framework.IO.INI.IniWriter" />, the encoding and decoding of those escape sequences is performed automatically.
                </para>
                <para>
                    The <c> | </c> character was choosen to start escape sequences instead of the <c> \ </c> character so that name-value-pairs, which contain windows file or directory paths as their values, are more human-readable.
                    The used escape sequence character can be changed using <see cref="P:RI.Framework.IO.INI.IniSettings.EscapeCharacter" />.
                </para>
            </remarks>
            TODO: Example
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.IO.INI.IniDocument" />.
            </summary>
            <remarks>
                <para>
                    <see cref="P:System.StringComparer.InvariantCultureIgnoreCase" /> is used for name comparison of section names and name-value-pairs.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.IO.INI.IniDocument" />.
            </summary>
            <param name="nameComparer"> The comparer used to compare section names and names of name-value-pairs. </param>
            <remarks>
                <para>
                    <see cref="P:System.StringComparer.InvariantCultureIgnoreCase" /> is used if <paramref name="nameComparer" /> is null.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.#ctor(System.Collections.Generic.IEqualityComparer{System.String},System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.IO.INI.IniDocument" />.
            </summary>
            <param name="sectionNameComparer"> The comparer used to compare section names. </param>
            <param name="valueNameComparer"> The comparer used to compare names of name-value-pairs. </param>
            <remarks>
                <para>
                    <see cref="P:System.StringComparer.InvariantCultureIgnoreCase" /> is used if <paramref name="sectionNameComparer" /> or <paramref name="valueNameComparer" /> is null.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Framework.IO.INI.IniDocument.Count">
            <summary>
                Gets the number of INI elements in <see cref="P:RI.Framework.IO.INI.IniDocument.Elements" />.
            </summary>
            <value>
                The number of INI elements in <see cref="P:RI.Framework.IO.INI.IniDocument.Elements" />.
            </value>
        </member>
        <member name="P:RI.Framework.IO.INI.IniDocument.Elements">
            <summary>
                Gets the list with all INI elements of this INI document.
            </summary>
        </member>
        <member name="P:RI.Framework.IO.INI.IniDocument.SectionNameComparer">
            <summary>
                Gets the comparer used to compare section names.
            </summary>
            <value>
                The comparer used to compare section names.
            </value>
        </member>
        <member name="P:RI.Framework.IO.INI.IniDocument.ValueNameComparer">
            <summary>
                Gets the comparer used to compare names of name-value-pairs.
            </summary>
            <value>
                The comparer used to compare names of name-value-pairs.
            </value>
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.AddComment(System.String)">
            <summary>
                Adds a comment at the end of all elements.
            </summary>
            <param name="comment"> The comment. </param>
            <returns>
                The added comment element.
            </returns>
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.AddSection(System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                Adds the values of a dictionary as a new section.
            </summary>
            <param name="sectionName"> The name of the new section (can be null). </param>
            <param name="mergeSections"> Specifies whether the values should be added to an existing section of the same name if one exists (true) or if a new separate section with the same name should be added (false). </param>
            <param name="values"> The dictionary to add as a section. </param>
            <returns>
                The list of INI elements which were added to <see cref="P:RI.Framework.IO.INI.IniDocument.Elements" />.
                An empty list is returned if no elements were added.
            </returns>
            <remarks>
                <para>
                    If <paramref name="sectionName" /> is null, the values are added outside a section (that is: before the first section header or at the end if no section header exists).
                </para>
                <para>
                    <paramref name="mergeSections" /> is ignored if <paramref name="sectionName" /> is null.
                </para>
                <para>
                    If <paramref name="values" /> is empty, an empty section is added anyways (consisting only of the section header).
                </para>
                <para>
                    This method is used if the same name-value-pair only exists once in a section.
                </para>
            </remarks>
            <exception cref="T:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="sectionName" /> is an empty string. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="values" /> contains name-value-pairs with invalid names. </exception>
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.AddSection(System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.String}})">
            <summary>
                Adds the values of a dictionary as a new section.
            </summary>
            <param name="sectionName"> The name of the new section (can be null). </param>
            <param name="mergeSections"> Specifies whether the values should be added to an existing section of the same name if one exists (true) or if a new separate section with the same name should be added (false). </param>
            <param name="values"> The dictionary to add as a section. </param>
            <returns>
                The list of INI elements which were added to <see cref="P:RI.Framework.IO.INI.IniDocument.Elements" />.
                An empty list is returned if no elements were added.
            </returns>
            <remarks>
                <para>
                    If <paramref name="sectionName" /> is null, the values are added outside a section (that is: before the first section header or at the end if no section header exists).
                </para>
                <para>
                    <paramref name="mergeSections" /> is ignored if <paramref name="sectionName" /> is null.
                </para>
                <para>
                    If <paramref name="values" /> is empty, an empty section is added anyways (consisting only of the section header).
                </para>
                <para>
                    This method is used if the same name-value-pair can exist multiple times in a section.
                </para>
            </remarks>
            <exception cref="T:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="sectionName" /> is an empty string. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="values" /> contains name-value-pairs with invalid names. </exception>
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.AddSectionHeader(System.String)">
            <summary>
                Adds a section header at the end of all elements.
            </summary>
            <param name="sectionName"> The section name. </param>
            <returns>
                The added section header element.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="sectionName" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="sectionName" /> is an empty string. </exception>
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.AddText(System.String)">
            <summary>
                Adds a text at the end of all elements.
            </summary>
            <param name="text"> The text. </param>
            <returns>
                The added text element.
            </returns>
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.AddValue(System.String,System.String)">
            <summary>
                Adds a name-value-pair at the end of all elements.
            </summary>
            <param name="name"> The name. </param>
            <param name="value"> The value. </param>
            <returns>
                The added name-value-pair element.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="name" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="name" /> is an empty string. </exception>
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.AsString">
            <summary>
                Converts this INI document to a string.
            </summary>
            <returns>
                The string of INI data created from this INI document.
            </returns>
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.AsString(RI.Framework.IO.INI.IniWriterSettings)">
            <summary>
                Converts this INI document to a string.
            </summary>
            <param name="settings"> The used INI writer settings or null if default values should be used. </param>
            <returns>
                The string of INI data created from this INI document.
            </returns>
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.Clear">
            <summary>
                Removes all INI elements from <see cref="P:RI.Framework.IO.INI.IniDocument.Elements" />.
            </summary>
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.DeleteValue(System.String,System.String)">
            <summary>
                Deletes the value of a specified name in a specified section.
            </summary>
            <param name="section"> The name of the section (can be null). </param>
            <param name="name"> The name of the value. </param>
            <returns>
                true if the value existed and has been deleted, false otherwise.
            </returns>
            <remarks>
                <para>
                    All matching values of all matching sections are deleted.
                    If <paramref name="section" /> is null, the value is searched and deleted outside any section.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="name" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="section" /> or <paramref name="name" /> is an empty string. </exception>
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.GetSection(System.String)">
            <summary>
                Gets the name-value-pairs of a section as a dictionary.
            </summary>
            <param name="sectionName"> The section name (can be null). </param>
            <returns>
                The dictionary which contains the name-value-pairs of the specified section or null if the specified section does not exist.
                An empty dictionary is returned if the section exists but does not contain any name-value-pairs.
            </returns>
            <remarks>
                <para>
                    If <paramref name="sectionName" /> is null, all values outside a section are returned (that is: before the first section header or all if no section header exists).
                </para>
                <para>
                    The returned dictionary uses <see cref="P:RI.Framework.IO.INI.IniDocument.ValueNameComparer" />.
                </para>
                <para>
                    If the specified section exists multiple times, only the first section is returned as a dictionary.
                    If the same name-value-pair exists multiple times in a section, only the first pair is returned in the dictionary.
                </para>
            </remarks>
            <exception cref="T:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="sectionName" /> is an empty string. </exception>
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.GetSectionAll(System.String)">
            <summary>
                Gets the name-value-pairs of a section as a dictionary.
            </summary>
            <param name="sectionName"> The section name (can be null). </param>
            <returns>
                The dictionary which contains the name-value-pairs of the specified section or null if the specified section does not exist.
                An empty dictionary is returned if the section exists but does not contain any name-value-pairs.
            </returns>
            <remarks>
                <para>
                    If <paramref name="sectionName" /> is null, all values outside a section are returned (that is: before the first section header or all if no section header exists).
                </para>
                <para>
                    The returned dictionary uses <see cref="P:RI.Framework.IO.INI.IniDocument.ValueNameComparer" />.
                </para>
                <para>
                    If the specified section exists multiple times, only the first section is returned as a dictionary.
                    If the same name-value-pair exists multiple times in a section, all pairs are returned in the dictionary.
                </para>
            </remarks>
            <exception cref="T:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="sectionName" /> is an empty string. </exception>
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.GetSectionNames">
            <summary>
                Gets a set of the names of all available sections.
            </summary>
            <returns>
                The set with the names of all available sections.
                An empty set is returned if no sections are available.
            </returns>
            <remarks>
                <para>
                    If values exist outside a section, the returned set also contains null.
                </para>
                <para>
                    The returned set uses <see cref="P:RI.Framework.IO.INI.IniDocument.SectionNameComparer" />.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.GetSections(System.String)">
            <summary>
                Gets the name-value-pairs of a section as dictionaries.
            </summary>
            <param name="sectionName"> The section name (can be null). </param>
            <returns>
                The list which contains all the dictionaries which contain the name-value-pairs of the specified section or null if the specified section does not exist.
                An empty list is returned if the section exists but does not contain any name-value-pairs.
            </returns>
            <remarks>
                <para>
                    If <paramref name="sectionName" /> is null, all values outside a section are returned (that is: before the first section header or all if no section header exists).
                    In that case, the returned list contains only one dictionary.
                </para>
                <para>
                    The returned dictionary uses <see cref="P:RI.Framework.IO.INI.IniDocument.ValueNameComparer" />.
                </para>
                <para>
                    The returned list contains a separate dictionary for each separate section of the specified name.
                    If the same name-value-pair exists multiple times in a section, only the first pair is returned in the corresponding dictionary.
                </para>
            </remarks>
            <exception cref="T:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="sectionName" /> is an empty string. </exception>
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.GetSectionsAll(System.String)">
            <summary>
                Gets the name-value-pairs of a section as dictionaries.
            </summary>
            <param name="sectionName"> The section name (can be null). </param>
            <returns>
                The list which contains all the dictionaries which contain the name-value-pairs of the specified section or null if the specified section does not exist.
                An empty list is returned if the section exists but does not contain any name-value-pairs.
            </returns>
            <remarks>
                <para>
                    If <paramref name="sectionName" /> is null, all values outside a section are returned (that is: before the first section header or all if no section header exists).
                    In that case, the returned list contains only one dictionary.
                </para>
                <para>
                    The returned dictionary uses <see cref="P:RI.Framework.IO.INI.IniDocument.ValueNameComparer" />.
                </para>
                <para>
                    The returned list contains a separate dictionary for each separate section of the specified name.
                    If the same name-value-pair exists multiple times in a section, all pairs are returned in the corresponding dictionary.
                </para>
            </remarks>
            <exception cref="T:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="sectionName" /> is an empty string. </exception>
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.GetValue(System.String,System.String)">
            <summary>
                Gets the value of a specified name in a specified section.
            </summary>
            <param name="section"> The name of the section (can be null). </param>
            <param name="name"> The name of the value. </param>
            <returns>
                The value or null if the value does not exist.
            </returns>
            <remarks>
                <para>
                    The first matching value of the first matching section is returned.
                    If <paramref name="section" /> is null, the value is searched outside any section.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="name" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="section" /> or <paramref name="name" /> is an empty string. </exception>
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.GetValues">
            <summary>
                Gets the name-value-pairs of all sections as a dictionary.
            </summary>
            <returns>
                The dictionary which contains dictionaries (one for each section) which contain the name-value-pairs.
                An empty dictionary is returned if no name-value-pairs exist.
            </returns>
            <remarks>
                <para>
                    The returned outer dictionary uses <see cref="P:RI.Framework.IO.INI.IniDocument.SectionNameComparer" /> and the inner dictionaries use <see cref="P:RI.Framework.IO.INI.IniDocument.ValueNameComparer" />.
                </para>
                <para>
                    An inner dictionary can be empty if the section exists but has no name-value-pairs.
                </para>
                <para>
                    If a section exists multiple times, only the first section is returned as an inner dictionary.
                    If the same name-value-pair exists multiple times in a section, only the first pair is returned in an inner dictionary.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.Load(RI.Framework.IO.INI.IniReader)">
            <summary>
                Loads INI elements from an existing INI reader.
            </summary>
            <param name="reader"> The INI reader from which the elements are loaded. </param>
            <remarks>
                <para>
                    All existing INI elements will be discarded before the new sections are loaded.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="reader" /> is null. </exception>
            <exception cref="T:RI.Framework.IO.INI.IniParsingException"> The INI data read by <paramref name="reader" /> contains invalid elements. </exception>
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.Load(System.String)">
            <summary>
                Loads INI elements from a string.
            </summary>
            <param name="data"> The INI data to load. </param>
            <remarks>
                <para>
                    All existing INI elements will be discarded before the new sections are loaded.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="data" /> is null. </exception>
            <exception cref="T:RI.Framework.IO.INI.IniParsingException"> The INI data read from <paramref name="data" /> contains invalid elements. </exception>
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.Load(System.String,RI.Framework.IO.INI.IniReaderSettings)">
            <summary>
                Loads INI elements from a string.
            </summary>
            <param name="data"> The INI data to load. </param>
            <param name="settings"> The used INI reader settings or null if default values should be used. </param>
            <remarks>
                <para>
                    All existing INI elements will be discarded before the new sections are loaded.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="data" /> is null. </exception>
            <exception cref="T:RI.Framework.IO.INI.IniParsingException"> The INI data read from <paramref name="data" /> contains invalid elements. </exception>
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.Load(System.String,System.Text.Encoding)">
            <summary>
                Loads INI elements from an existing INI file.
            </summary>
            <param name="file"> The path of the INI file to load. </param>
            <param name="encoding"> The encoding for reading the INI file. </param>
            <remarks>
                <para>
                    All existing INI elements will be discarded before the new sections are loaded.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="file" /> or <paramref name="encoding" /> is null. </exception>
            <exception cref="T:RI.Framework.IO.INI.IniParsingException"> The INI data read from <paramref name="file" /> contains invalid elements. </exception>
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.Load(System.String,System.Text.Encoding,RI.Framework.IO.INI.IniReaderSettings)">
            <summary>
                Loads INI elements from an existing INI file.
            </summary>
            <param name="file"> The path of the INI file to load. </param>
            <param name="encoding"> The encoding for reading the INI file. </param>
            <param name="settings"> The used INI reader settings or null if default values should be used. </param>
            <remarks>
                <para>
                    All existing INI elements will be discarded before the new sections are loaded.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="file" /> or <paramref name="encoding" /> is null. </exception>
            <exception cref="T:RI.Framework.IO.INI.IniParsingException"> The INI data read from <paramref name="file" /> contains invalid elements. </exception>
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.MergeSections">
            <summary>
                Merges all sections with the same name into one section.
            </summary>
            <remarks>
                <para>
                    <see cref="P:RI.Framework.IO.INI.IniDocument.SectionNameComparer" /> is used for comparison.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.RemoveComments">
            <summary>
                Removes all comment INI elements from this document.
            </summary>
            <returns>
                true if any comment INI elements were removed, false otherwise.
            </returns>
            <remarks>
                <para>
                    This removes all <see cref="T:RI.Framework.IO.INI.Elements.CommentIniElement" />s from all sections.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.RemoveEmptySections">
            <summary>
                Removes all sections which do not have any name-value-pairs.
            </summary>
            <returns>
                A set of section names which were removed.
                An empty set is returned if no sections were removed.
            </returns>
            <remarks>
                <para>
                    The returned set uses <see cref="P:RI.Framework.IO.INI.IniDocument.SectionNameComparer" />.
                </para>
                <para>
                    If a section only contains text or comment INI elements, the section is considered empty and is removed.
                    Use <see cref="M:RI.Framework.IO.INI.IniDocument.RemoveEmptySections(System.Boolean,System.Boolean)" /> if such elements should count as not-empty.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.RemoveEmptySections(System.Boolean,System.Boolean)">
            <summary>
                Removes all sections which are empty.
            </summary>
            <param name="keepIfText"> Specifies whether sections with text INI elements (<see cref="T:RI.Framework.IO.INI.Elements.TextIniElement" />) are considered not empty. </param>
            <param name="keepIfComments"> Specifies whether sections with comment INI elements (<see cref="T:RI.Framework.IO.INI.Elements.CommentIniElement" />) are considered not empty. </param>
            <returns>
                A set of section names which were removed.
                An empty set is returned if no sections were removed.
            </returns>
            <remarks>
                <para>
                    The returned set uses <see cref="P:RI.Framework.IO.INI.IniDocument.SectionNameComparer" />.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.RemoveSections(System.String)">
            <summary>
                Removes all sections of a specified name.
            </summary>
            <param name="sectionName"> The name of the sections to remove (can be null). </param>
            <returns>
                The list of INI elements which were removed from <see cref="P:RI.Framework.IO.INI.IniDocument.Elements" />.
                An empty list is returned if no elements were removed.
            </returns>
            <remarks>
                <para>
                    If <paramref name="sectionName" /> is null, all values outside a section are removed (that is: before the first section header or all if no section header exists).
                </para>
            </remarks>
            <exception cref="T:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="sectionName" /> is an empty string. </exception>
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.RemoveText">
            <summary>
                Removes all text INI elements from this document.
            </summary>
            <returns>
                true if any text INI elements were removed, false otherwise.
            </returns>
            <remarks>
                <para>
                    This removes all <see cref="T:RI.Framework.IO.INI.Elements.TextIniElement" />s from all sections.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.RemoveTextAndComments">
            <summary>
                Removes all text and comment INI elements from this document.
            </summary>
            <returns>
                true if any text or comment INI elements were removed, false otherwise.
            </returns>
            <remarks>
                <para>
                    This removes all <see cref="T:RI.Framework.IO.INI.Elements.TextIniElement" />s and <see cref="T:RI.Framework.IO.INI.Elements.CommentIniElement" />s from all sections.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.Save(RI.Framework.IO.INI.IniWriter)">
            <summary>
                Saves all INI elements of this INI document to an existing INI writer.
            </summary>
            <param name="writer"> The INI writer to which the elements are saved. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="writer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.Save(System.String,System.Text.Encoding)">
            <summary>
                Saves all INI elements of this INI document to an INI file.
            </summary>
            <param name="file"> The path of the INI file to save. </param>
            <param name="encoding"> The encoding for writing the INI file. </param>
            <remarks>
                <para>
                    The INI file will be overwritten with the INI elements from this INI document.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="file" /> or <paramref name="encoding" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.Save(System.String,System.Text.Encoding,RI.Framework.IO.INI.IniWriterSettings)">
            <summary>
                Saves all INI elements of this INI document to an INI file.
            </summary>
            <param name="file"> The path of the INI file to save. </param>
            <param name="encoding"> The encoding for writing the INI file. </param>
            <param name="settings"> The used INI writer settings or null if default values should be used. </param>
            <remarks>
                <para>
                    The INI file will be overwritten with the INI elements from this INI document.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="file" /> or <paramref name="encoding" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.SetValue(System.String,System.String,System.String)">
            <summary>
                Sets the value of a specified name in a specified section.
            </summary>
            <param name="section"> The name of the section (can be null). </param>
            <param name="name"> The name of the value. </param>
            <param name="value"> The value or null if the value should be removed (similar to <see cref="M:RI.Framework.IO.INI.IniDocument.DeleteValue(System.String,System.String)" />). </param>
            <returns>
                true if the value existed before, false otherwise.
            </returns>
            <remarks>
                <para>
                    The first matching value of the first matching section is set.
                    If <paramref name="section" /> is null, the value is set outside any section.
                </para>
                <para>
                    If the section does not yet exist, a new section is created and the value added at its end.
                    If the section exists but not the value, the value is added at the end of the first matching section.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="name" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="section" /> or <paramref name="name" /> is an empty string. </exception>
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.SetValues(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.String}})">
            <summary>
                Sets the name-value-pairs of sections specified by a dictionary.
            </summary>
            <param name="values"> The dictionary with sections and inner dictionaries for the name-value-pairs. </param>
            <remarks>
                <para>
                    All existing sections and their name-value-pairs which are specified in the outer dictionary will be replaced by the specified values.
                    Sections not specified in the outer dictionary will remain unchanged.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="values" /> contains invalid section names or name-value-pairs with invalid names. </exception>
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.SortElements">
            <summary>
                Sorts the INI elements in all sections based on their names.
            </summary>
            <remarks>
                <para>
                    <see cref="P:System.StringComparer.InvariantCultureIgnoreCase" /> is used for comparison.
                </para>
                <note type="important">
                    Sorting of INI elements in a section does only work reliable if a section only contains <see cref="T:RI.Framework.IO.INI.Elements.ValueIniElement" />s.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.SortElements(System.Collections.Generic.IComparer{System.String})">
            <summary>
                Sorts the INI elements in all sections based on their names.
            </summary>
            <param name="comparer"> The comparer used to compare the names of name-value-pairs. </param>
            <remarks>
                <note type="important">
                    Sorting of INI elements in a section does only work reliable if a section only contains <see cref="T:RI.Framework.IO.INI.Elements.ValueIniElement" />s.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.SortElements(System.Collections.Generic.IComparer{RI.Framework.IO.INI.IniElement})">
            <summary>
                Sorts the INI elements in all sections.
            </summary>
            <param name="comparer"> The comparer used to compare INI elements. </param>
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.SortRegions">
            <summary>
                Sorts the regions based on their names.
            </summary>
            <remarks>
                <para>
                    <see cref="P:System.StringComparer.InvariantCultureIgnoreCase" /> is used for comparison.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.SortRegions(System.Collections.Generic.IComparer{System.String})">
            <summary>
                Sorts the regions based on their names.
            </summary>
            <param name="comparer"> The comparer used to compare the region names. </param>
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.System#ICloneable#Clone">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.IO.INI.IniDocument.Clone">
            <inheritdoc />
        </member>
        <member name="T:RI.Framework.IO.INI.IniElement">
            <summary>
                The base class for all INI elements.
            </summary>
            <remarks>
                <para>
                    See <see cref="T:RI.Framework.IO.INI.IniDocument" /> for more general and detailed information about working with INI data.
                </para>
            </remarks>
        </member>
        <member name="T:RI.Framework.IO.INI.IniParsingException">
            <summary>
                The <see cref="T:RI.Framework.IO.INI.IniParsingException" /> is thrown when invalid INI elements are encountered while parsing INI data.
            </summary>
        </member>
        <member name="M:RI.Framework.IO.INI.IniParsingException.#ctor(System.Int32,RI.Framework.IO.INI.IniReaderError)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.IO.INI.IniParsingException" />.
            </summary>
            <param name="lineNumber"> The line number where the parsing error ocurred. </param>
            <param name="readerError"> The parsing error which ocurred. </param>
        </member>
        <member name="M:RI.Framework.IO.INI.IniParsingException.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.IO.INI.IniParsingException" />.
            </summary>
        </member>
        <member name="M:RI.Framework.IO.INI.IniParsingException.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.IO.INI.IniParsingException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
        </member>
        <member name="M:RI.Framework.IO.INI.IniParsingException.#ctor(System.String,System.Exception)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.IO.INI.IniParsingException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
            <param name="innerException"> The exception which triggered this exception. </param>
        </member>
        <member name="M:RI.Framework.IO.INI.IniParsingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.IO.INI.IniParsingException" />.
            </summary>
            <param name="info"> The serialization data. </param>
            <param name="context"> The type of the source of the serialization data. </param>
        </member>
        <member name="T:RI.Framework.IO.INI.IniReader">
            <summary>
                Implements a forward-only INI reader which iteratively reads INI data.
            </summary>
            <remarks>
                <para>
                    See <see cref="T:RI.Framework.IO.INI.IniDocument" /> for more general and detailed information about working with INI data.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.IO.INI.IniReader.#ctor(System.IO.TextReader)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.IO.INI.IniReader" />.
            </summary>
            <param name="reader"> The used <see cref="T:System.IO.TextReader" />. </param>
            <remarks>
                <para>
                    INI writer settings with default values are used.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="reader" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.IO.INI.IniReader.#ctor(System.IO.TextReader,RI.Framework.IO.INI.IniReaderSettings)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.IO.INI.IniReader" />.
            </summary>
            <param name="reader"> The used <see cref="T:System.IO.TextReader" />. </param>
            <param name="settings"> The used INI reader settings or null if default values should be used. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="reader" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.IO.INI.IniReader.Finalize">
            <summary>
                Garbage collects this instance of <see cref="T:RI.Framework.IO.INI.IniReader" />.
            </summary>
        </member>
        <member name="P:RI.Framework.IO.INI.IniReader.BaseReader">
            <summary>
                Gets the <see cref="T:System.IO.TextReader" /> which is used by this INI reader to read the INI data.
            </summary>
        </member>
        <member name="P:RI.Framework.IO.INI.IniReader.CurrentElement">
            <summary>
                Gets the current INI element which was read during the last call to <see cref="M:RI.Framework.IO.INI.IniReader.ReadNext" />.
            </summary>
            <value>
                The current INI element or null if last call to <see cref="M:RI.Framework.IO.INI.IniReader.ReadNext" /> created an error (<see cref="P:RI.Framework.IO.INI.IniReader.CurrentError" />).
            </value>
            <remarks>
                <para>
                    Before the first call to <see cref="M:RI.Framework.IO.INI.IniReader.ReadNext" />, this property is null.
                </para>
                <para>
                    This property keeps its last value even if <see cref="M:RI.Framework.IO.INI.IniReader.ReadNext" /> returns false.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Framework.IO.INI.IniReader.CurrentError">
            <summary>
                Gets the current error which ocurred during the last call to <see cref="M:RI.Framework.IO.INI.IniReader.ReadNext" />.
            </summary>
            <value>
                The current error.
            </value>
            <remarks>
                <para>
                    Before the first call to <see cref="M:RI.Framework.IO.INI.IniReader.ReadNext" />, this property is <see cref="F:RI.Framework.IO.INI.IniReaderError.None" />.
                </para>
                <para>
                    This property keeps its last value even if <see cref="M:RI.Framework.IO.INI.IniReader.ReadNext" /> returns false.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Framework.IO.INI.IniReader.CurrentLineNumber">
            <summary>
                Gets the current line number in the INI data to which <see cref="P:RI.Framework.IO.INI.IniReader.CurrentElement" /> or <see cref="P:RI.Framework.IO.INI.IniReader.CurrentError" /> corresponds to.
            </summary>
            <value>
                The current line number.
            </value>
            <remarks>
                <para>
                    Before the first call to <see cref="M:RI.Framework.IO.INI.IniReader.ReadNext" />, this property is zero.
                </para>
                <para>
                    This property keeps its last value even if <see cref="M:RI.Framework.IO.INI.IniReader.ReadNext" /> returns false.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Framework.IO.INI.IniReader.Settings">
            <summary>
                Gets the used reader settings for this INI reader.
            </summary>
        </member>
        <member name="M:RI.Framework.IO.INI.IniReader.Close">
            <summary>
                Closes this INI writer and its underlying <see cref="T:System.IO.TextReader" /> (<see cref="P:RI.Framework.IO.INI.IniReader.BaseReader" />).
            </summary>
        </member>
        <member name="M:RI.Framework.IO.INI.IniReader.ReadNext">
            <summary>
                Reads the next INI element from the INI data.
            </summary>
            <returns>
                true if an element was read and <see cref="P:RI.Framework.IO.INI.IniReader.CurrentElement" /> was updated, false if there are no more INI elements (<see cref="P:RI.Framework.IO.INI.IniReader.CurrentElement" /> keeps its last value).
            </returns>
            <remarks>
                <note type="note">
                    The INI data is read line-by-line.
                    Multiple consecutive comment or text lines are combined into a single comment or text line.
                </note>
            </remarks>
            <exception cref="T:System.InvalidOperationException"> The INI reader has been closed/disposed. </exception>
        </member>
        <member name="M:RI.Framework.IO.INI.IniReader.System#IDisposable#Dispose">
            <inheritdoc />
        </member>
        <member name="T:RI.Framework.IO.INI.IniReaderError">
            <summary>
                Describes an error which ocurred during reading INI data using an <see cref="T:RI.Framework.IO.INI.IniReader" />.
            </summary>
        </member>
        <member name="F:RI.Framework.IO.INI.IniReaderError.None">
            <summary>
                No error (no line read or the last line which was read is valid).
            </summary>
        </member>
        <member name="F:RI.Framework.IO.INI.IniReaderError.InvalidSectionName">
            <summary>
                The last line read is a section header containing an invalid section name.
            </summary>
        </member>
        <member name="F:RI.Framework.IO.INI.IniReaderError.InvalidValueName">
            <summary>
                The last line read is a name-value-pair with an invalid name.
            </summary>
        </member>
        <member name="T:RI.Framework.IO.INI.IniReaderSettings">
            <summary>
                Provides INI reader settings.
            </summary>
            <remarks>
                <para>
                    INI reader settings can be used to customize how INI data is read and processed.
                </para>
                <para>
                    See <see cref="T:RI.Framework.IO.INI.IniDocument" /> for more general and detailed information about working with INI data.
                </para>
            </remarks>
        </member>
        <member name="T:RI.Framework.IO.INI.IniSettings">
            <summary>
                Provides basic INI data settings for both readers and writers.
            </summary>
            <remarks>
                <para>
                    See <see cref="T:RI.Framework.IO.INI.IniDocument" /> for more general and detailed information about working with INI data.
                </para>
            </remarks>
        </member>
        <member name="F:RI.Framework.IO.INI.IniSettings.DefaultCommentStart">
            <summary>
                The default character which starts a comment.
            </summary>
            <remarks>
                <para>
                    The default value is <c> ; </c>.
                </para>
            </remarks>
        </member>
        <member name="F:RI.Framework.IO.INI.IniSettings.DefaultEscapeCharacter">
            <summary>
                The default character which is used to escape certain characters.
            </summary>
            <remarks>
                <para>
                    The default value is <c> | </c>.
                </para>
            </remarks>
        </member>
        <member name="F:RI.Framework.IO.INI.IniSettings.DefaultNameValueSeparator">
            <summary>
                The default separator between a name and its value.
            </summary>
            <remarks>
                <para>
                    The default value is <c> = </c>.
                </para>
            </remarks>
        </member>
        <member name="F:RI.Framework.IO.INI.IniSettings.DefaultSectionEnd">
            <summary>
                The default character which ends a section name.
            </summary>
            <remarks>
                <para>
                    The default value is <c> ] </c>.
                </para>
            </remarks>
        </member>
        <member name="F:RI.Framework.IO.INI.IniSettings.DefaultSectionStart">
            <summary>
                The default character which starts a section name.
            </summary>
            <remarks>
                <para>
                    The default value is <c> [ </c>.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Framework.IO.INI.IniSettings.CommentStart">
            <summary>
                Gets or sets the character which starts a comment.
            </summary>
            <value>
                The character which starts a comment.
            </value>
            <remarks>
                <para>
                    The default value is <see cref="F:RI.Framework.IO.INI.IniSettings.DefaultCommentStart" />.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Framework.IO.INI.IniSettings.EscapeCharacter">
            <summary>
                Gets or sets the character which is used to escape certain characters.
            </summary>
            <value>
                The character which is used to escape certain characters.
            </value>
            <remarks>
                <para>
                    The default value is <see cref="F:RI.Framework.IO.INI.IniSettings.DefaultEscapeCharacter" />.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Framework.IO.INI.IniSettings.NameValueSeparator">
            <summary>
                Gets or sets the separator between a name and its value.
            </summary>
            <value>
                The separator between a name and its value.
            </value>
            <remarks>
                <para>
                    The default value is <see cref="F:RI.Framework.IO.INI.IniSettings.DefaultNameValueSeparator" />.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Framework.IO.INI.IniSettings.SectionEnd">
            <summary>
                Gets or sets the character which ends a section name.
            </summary>
            <value>
                The character which ends a section name.
            </value>
            <remarks>
                <para>
                    The default value is <see cref="F:RI.Framework.IO.INI.IniSettings.DefaultSectionEnd" />.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Framework.IO.INI.IniSettings.SectionStart">
            <summary>
                Gets or sets the character which starts a section name.
            </summary>
            <value>
                The character which starts a section name.
            </value>
            <remarks>
                <para>
                    The default value is <see cref="F:RI.Framework.IO.INI.IniSettings.DefaultSectionStart" />.
                </para>
            </remarks>
        </member>
        <member name="T:RI.Framework.IO.INI.IniWriter">
            <summary>
                Implements a forward-only INI writer which iteratively writes INI data.
            </summary>
            <remarks>
                <para>
                    See <see cref="T:RI.Framework.IO.INI.IniDocument" /> for more general and detailed information about working with INI data.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.IO.INI.IniWriter.#ctor(System.IO.TextWriter)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.IO.INI.IniWriter" />.
            </summary>
            <param name="writer"> The used <see cref="T:System.IO.TextWriter" />. </param>
            <remarks>
                <para>
                    INI writer settings with default values are used.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="writer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.IO.INI.IniWriter.#ctor(System.IO.TextWriter,RI.Framework.IO.INI.IniWriterSettings)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.IO.INI.IniWriter" />.
            </summary>
            <param name="writer"> The used <see cref="T:System.IO.TextWriter" />. </param>
            <param name="settings"> The used INI writer settings or null if default values should be used. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="writer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.IO.INI.IniWriter.Finalize">
            <summary>
                Garbage collects this instance of <see cref="T:RI.Framework.IO.INI.IniWriter" />.
            </summary>
        </member>
        <member name="P:RI.Framework.IO.INI.IniWriter.BaseWriter">
            <summary>
                Gets the <see cref="T:System.IO.TextWriter" /> which is used by this INI writer to write the INI data.
            </summary>
        </member>
        <member name="P:RI.Framework.IO.INI.IniWriter.Settings">
            <summary>
                Gets the used writer settings for this INI writer.
            </summary>
        </member>
        <member name="M:RI.Framework.IO.INI.IniWriter.Close">
            <summary>
                Closes this INI writer and its underlying <see cref="T:System.IO.TextWriter" /> (<see cref="P:RI.Framework.IO.INI.IniWriter.BaseWriter" />).
            </summary>
        </member>
        <member name="M:RI.Framework.IO.INI.IniWriter.Flush">
            <summary>
                Flushes all written data to the underlying <see cref="T:System.IO.TextWriter" /> (<see cref="P:RI.Framework.IO.INI.IniWriter.BaseWriter" />).
            </summary>
            <exception cref="T:System.InvalidOperationException"> The INI writer has been closed/disposed. </exception>
        </member>
        <member name="M:RI.Framework.IO.INI.IniWriter.WriteComment(System.String)">
            <summary>
                Writes a comment.
            </summary>
            <param name="comment"> The comment. </param>
            <remarks>
                <para>
                    The comment will not be encoded but if it contains multiple lines, multiple actual comments will be written (one per line).
                </para>
                <para>
                    If <paramref name="comment" /> is null or an empty string, an empty string is written as comment.
                </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException"> The INI writer has been closed/disposed. </exception>
        </member>
        <member name="M:RI.Framework.IO.INI.IniWriter.WriteElement(RI.Framework.IO.INI.IniElement)">
            <summary>
                Writes an INI element.
            </summary>
            <param name="element"> The element to write. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="element" /> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> The INI writer has been closed/disposed. </exception>
        </member>
        <member name="M:RI.Framework.IO.INI.IniWriter.WriteSection(System.String)">
            <summary>
                Writes a section header.
            </summary>
            <param name="sectionName"> The name of the section. </param>
            <remarks>
                <para>
                    The written section name will be encoded which means that certain special characters used in INI files will be replaced with escape sequences.
                    See <see cref="T:RI.Framework.IO.INI.IniDocument" /> for more details.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="sectionName" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="sectionName" /> is an empty string. </exception>
            <exception cref="T:System.InvalidOperationException"> The INI writer has been closed/disposed. </exception>
        </member>
        <member name="M:RI.Framework.IO.INI.IniWriter.WriteText(System.String)">
            <summary>
                Writes arbitrary text.
            </summary>
            <param name="text"> The text. </param>
            <remarks>
                <para>
                    The text will not be encoded but if it contains multiple lines, multiple actual text lines will be written.
                </para>
                <para>
                    If <paramref name="text" /> is null or an empty string, an empty string is written as text.
                </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException"> The INI writer has been closed/disposed. </exception>
        </member>
        <member name="M:RI.Framework.IO.INI.IniWriter.WriteValue(System.String,System.String)">
            <summary>
                Writes a name-value-pair.
            </summary>
            <param name="name"> The name. </param>
            <param name="value"> The value. </param>
            <remarks>
                <para>
                    The written name and value will be encoded which means that certain special characters used in INI files will be replaced with escape sequences.
                    See <see cref="T:RI.Framework.IO.INI.IniDocument" /> for more details.
                </para>
                <para>
                    If <paramref name="value" /> is null or an empty string, an empty string is written as value.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="name" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="name" /> is an empty string. </exception>
            <exception cref="T:System.InvalidOperationException"> The INI writer has been closed/disposed. </exception>
        </member>
        <member name="M:RI.Framework.IO.INI.IniWriter.System#IDisposable#Dispose">
            <inheritdoc />
        </member>
        <member name="T:RI.Framework.IO.INI.IniWriterSettings">
            <summary>
                Provides INI writer settings.
            </summary>
            <remarks>
                <para>
                    INI writer settings can be used to customize how INI data is generated and formated.
                </para>
                <para>
                    See <see cref="T:RI.Framework.IO.INI.IniDocument" /> for more general and detailed information about working with INI data.
                </para>
            </remarks>
        </member>
        <member name="F:RI.Framework.IO.INI.IniWriterSettings.DefaultEmptyLineBeforeSectionHeader">
            <summary>
                The default whether an additional new line is written before a section header.
            </summary>
            <remarks>
                <para>
                    The default value is true.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Framework.IO.INI.IniWriterSettings.EmptyLineBeforeSectionHeader">
            <summary>
                Gets or sets whether an additional new line is written before a section header.
            </summary>
            <value>
                true if an additional new line is written before a section header, false otherwise.
            </value>
            <remarks>
                <para>
                    The default value is <see cref="F:RI.Framework.IO.INI.IniWriterSettings.DefaultEmptyLineBeforeSectionHeader" />.
                </para>
            </remarks>
        </member>
        <member name="T:RI.Framework.IO.INI.NamespaceDoc">
            <summary>
                Contains types to process INI data.
            </summary>
        </member>
        <member name="T:RI.Framework.IO.Paths.DirectoryPath">
            <summary>
                Describes a path to a directory.
            </summary>
            <remarks>
                <para>
                    <see cref="T:RI.Framework.IO.Paths.DirectoryPath" /> uses <see cref="T:RI.Framework.IO.Paths.PathProperties" /> to extract and store path information.
                    See <see cref="T:RI.Framework.IO.Paths.PathProperties" /> for more details about the supported types of directory paths.
                </para>
                <para>
                    <see cref="T:RI.Framework.IO.Paths.DirectoryPath" /> provides more directory path specific functionalities compared to <see cref="T:System.String" /> and offers a more consistent way of working with paths than <see cref="T:System.IO.Path" />.
                    It can be implicitly converted to a <see cref="T:System.String" /> to work seamless with APIs using <see cref="T:System.String" /> for paths.
                </para>
                <para>
                    See <see cref="T:RI.Framework.IO.Paths.FilePath" /> for an example how to use <see cref="T:RI.Framework.IO.Paths.DirectoryPath" /> and <see cref="T:RI.Framework.IO.Paths.FilePath" />.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.IO.Paths.DirectoryPath.GetCurrentDirectory">
            <summary>
                Gets the path to the current working directory.
            </summary>
            <returns>
                The path to the current working directory.
            </returns>
        </member>
        <member name="M:RI.Framework.IO.Paths.DirectoryPath.GetTempDirectory">
            <summary>
                Gets the path to the current temporary directory.
            </summary>
            <returns>
                The path to the current temporary directory.
            </returns>
        </member>
        <member name="M:RI.Framework.IO.Paths.DirectoryPath.op_Implicit(System.String)~RI.Framework.IO.Paths.DirectoryPath">
            <summary>
                Implicit conversion of a <see cref="T:System.String" /> to <see cref="T:RI.Framework.IO.Paths.DirectoryPath" />.
            </summary>
            <param name="path"> The path to convert to a directory path. </param>
        </member>
        <member name="M:RI.Framework.IO.Paths.DirectoryPath.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.IO.Paths.DirectoryPath" />.
            </summary>
            <param name="path"> The path. </param>
            <remarks>
                <para>
                    Using this constructor, wildcards and relative paths are not allowed and the type of the path must be clearly determinable.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="path" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.IO.Paths.DirectoryPath.#ctor(System.String,System.Boolean,System.Boolean,System.Nullable{RI.Framework.IO.Paths.PathType})">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.IO.Paths.DirectoryPath" />.
            </summary>
            <param name="path"> The path. </param>
            <param name="allowWildcards"> Specifies whether wildcards are allowed or not. </param>
            <param name="allowRelatives"> Specifies whether relative directory names are allowed or not. </param>
            <param name="assumedType"> Optionally specifies the type of the path which is assumed if the type cannot be clearly determined through analysis of <paramref name="path" />. </param>
            <remarks>
                <para>
                    See <see cref="M:RI.Framework.IO.Paths.PathProperties.FromPath(System.String,System.Boolean,System.Boolean,System.Nullable{RI.Framework.IO.Paths.PathType})" /> for more details about the parameters, especially <paramref name="assumedType" />.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="path" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.InvalidPathArgumentException"> <paramref name="path" /> is not a valid directory path. </exception>
        </member>
        <member name="M:RI.Framework.IO.Paths.DirectoryPath.#ctor(RI.Framework.IO.Paths.PathProperties)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.IO.Paths.DirectoryPath" />.
            </summary>
            <param name="path"> The <see cref="T:RI.Framework.IO.Paths.PathProperties" /> object which describes the path. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="path" /> is null. </exception>
        </member>
        <member name="P:RI.Framework.IO.Paths.DirectoryPath.DirectoryName">
            <summary>
                Gets the name of the directory.
            </summary>
            <value>
                The name of the directory.
            </value>
        </member>
        <member name="P:RI.Framework.IO.Paths.DirectoryPath.Exists">
            <summary>
                Gets whether the directory exists.
            </summary>
            <value>
                true if the directory exists, false otherwise.
            </value>
            <remarks>
                <note type="note"> <see cref="P:RI.Framework.IO.Paths.DirectoryPath.Exists" /> does not throw exceptions besides <see cref="T:System.InvalidOperationException" />. For example, if the directory exists but the user does not have access permissions, the directory is not of a compatible path type used on the current system, etc., false is returned. </note>
            </remarks>
            <exception cref="T:System.InvalidOperationException"> The directory contains wildcards. </exception>
        </member>
        <member name="P:RI.Framework.IO.Paths.DirectoryPath.Parent">
            <summary>
                Gets the parent directory.
            </summary>
            <value>
                The parent directory or null if this directory is a root or does not have a parent directory.
            </value>
        </member>
        <member name="M:RI.Framework.IO.Paths.DirectoryPath.Append(System.Collections.Generic.IEnumerable{RI.Framework.IO.Paths.DirectoryPath})">
            <summary>
                Creates a new directory path by appending one or more additional directory paths.
            </summary>
            <param name="directories"> A sequence with one or more directory paths to append. </param>
            <returns>
                The new directory path with all appended directories.
            </returns>
            <remarks>
                <para>
                    If <paramref name="directories" /> is an empty sequence, the same instance as this directory path is returned without any changes.
                </para>
                <para>
                    <paramref name="directories" /> is only enumerated once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="directories" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.InvalidPathArgumentException"> <paramref name="directories" /> contains at least one <see cref="T:RI.Framework.IO.Paths.DirectoryPath" /> which is rooted. </exception>
        </member>
        <member name="M:RI.Framework.IO.Paths.DirectoryPath.Append(RI.Framework.IO.Paths.DirectoryPath[])">
            <summary>
                Creates a new directory path by appending one or more additional directory paths.
            </summary>
            <param name="directories"> An array with one or more directory paths to append. </param>
            <returns>
                The new directory path with all appended directories.
            </returns>
            <remarks>
                <para>
                    If <paramref name="directories" /> is an empty array, the same instance as this directory path is returned without any changes.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="directories" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.InvalidPathArgumentException"> <paramref name="directories" /> contains at least one <see cref="T:RI.Framework.IO.Paths.DirectoryPath" /> which is rooted. </exception>
        </member>
        <member name="M:RI.Framework.IO.Paths.DirectoryPath.Append(RI.Framework.IO.Paths.FilePath)">
            <summary>
                Creates a new file path by appending an existing relative file path to this directory.
            </summary>
            <param name="file"> The file path to append. </param>
            <returns>
                The new file path with this directory and the appended file path.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="file" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.InvalidPathArgumentException"> <paramref name="file" /> is a rooted file path. </exception>
        </member>
        <member name="M:RI.Framework.IO.Paths.DirectoryPath.ChangeDirectoryName(System.String)">
            <summary>
                Creates a new directory path with this directories parent directory but another directory name.
            </summary>
            <param name="directoryName"> The new directory name. </param>
            <returns>
                The new directory path.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="directoryName" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.InvalidPathArgumentException"> <paramref name="directoryName" /> is not a valid new directory name. </exception>
        </member>
        <member name="M:RI.Framework.IO.Paths.DirectoryPath.ChangeParent(RI.Framework.IO.Paths.DirectoryPath)">
            <summary>
                Creates a new directory path with this directory name but another parent directory.
            </summary>
            <param name="newParent"> The new parent directory. </param>
            <returns>
                The new directory path.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="newParent" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.IO.Paths.DirectoryPath.Create">
            <summary>
                Creates the directory if it does not exists or leaves an existing directory unchanged.
            </summary>
            <returns>
                true if the directory was newly created, false if the directory already existed.
            </returns>
            <exception cref="T:System.InvalidOperationException"> The directory contains wildcards. </exception>
            <exception cref="T:System.IO.IOException"> The directory path is actually an existing file or a part of its parent is not available. </exception>
            <exception cref="T:System.UnauthorizedAccessException"> The user does not have the required permissions. </exception>
            <exception cref="T:System.IO.PathTooLongException"> Although being a valid directory path, the directory path is too long for the current system to be used. </exception>
            <exception cref="T:System.NotSupportedException"> The directory is not of a compatible path type used on the current system. </exception>
        </member>
        <member name="M:RI.Framework.IO.Paths.DirectoryPath.Delete">
            <summary>
                Deletes the directory and all its files and subdirectories.
            </summary>
            <returns>
                true if the directory existed and was deleted, false otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException"> The directory contains wildcards. </exception>
            <exception cref="T:System.IO.IOException"> The directory path is actually an existing file, the directory is read-only, the directory is the current working directory, the directory contains files which cannot be deleted, or the directory is in use. </exception>
            <exception cref="T:System.UnauthorizedAccessException"> The user does not have the required permissions. </exception>
            <exception cref="T:System.IO.PathTooLongException"> Although being a valid directory path, the directory path is too long for the current system to be used. </exception>
        </member>
        <member name="M:RI.Framework.IO.Paths.DirectoryPath.ToAbsolutePath(RI.Framework.IO.Paths.DirectoryPath)">
            <summary>
                Creates an absolute directory path out of this directory path relative to a specified root path.
            </summary>
            <param name="root"> The root path. </param>
            <returns>
                The absolute directory path using <paramref name="root" />.
            </returns>
            <remarks>
                <para>
                    If this directory path is already absolute, nothing is done and the same directory path is returned.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="root" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.InvalidPathArgumentException"> <paramref name="root" /> is not a rooted path. </exception>
        </member>
        <member name="M:RI.Framework.IO.Paths.DirectoryPath.ToRelativePath(RI.Framework.IO.Paths.DirectoryPath)">
            <summary>
                Creates a relative directory path out of this directory path relative to a specified root path.
            </summary>
            <param name="root"> The root path. </param>
            <returns>
                The relative directory path relative to <paramref name="root" />.
            </returns>
            <remarks>
                <para>
                    If this directory path is already relative, nothing is done and the same directory path is returned.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="root" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.InvalidPathArgumentException"> <paramref name="root" /> is not a rooted path. </exception>
        </member>
        <member name="M:RI.Framework.IO.Paths.DirectoryPath.CloneInternal">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.IO.Paths.DirectoryPath.Clone">
            <inheritdoc />
        </member>
        <member name="T:RI.Framework.IO.Paths.FilePath">
            <summary>
                Describes a path to a file.
            </summary>
            <remarks>
                <para>
                    <see cref="T:RI.Framework.IO.Paths.FilePath" /> uses <see cref="T:RI.Framework.IO.Paths.PathProperties" /> to extract and store path information.
                    See <see cref="T:RI.Framework.IO.Paths.PathProperties" /> for more details about the supported types of file paths.
                </para>
                <para>
                    <see cref="T:RI.Framework.IO.Paths.FilePath" /> provides more file path specific functionalities compared to <see cref="T:System.String" /> and offers a more consistent way of working with paths than <see cref="T:System.IO.Path" />.
                    It can be implicitly converted to a <see cref="T:System.String" /> to work seamless with APIs using <see cref="T:System.String" /> for paths.
                </para>
            </remarks>
            TODO: Example
        </member>
        <member name="M:RI.Framework.IO.Paths.FilePath.GetTemporaryFile">
            <summary>
                Creates a temporary zero-byte file and returns its path.
            </summary>
            <returns>
                The path to the newly created temporary file.
            </returns>
        </member>
        <member name="M:RI.Framework.IO.Paths.FilePath.op_Implicit(System.String)~RI.Framework.IO.Paths.FilePath">
            <summary>
                Implicit conversion of a <see cref="T:System.String" /> to <see cref="T:RI.Framework.IO.Paths.FilePath" />.
            </summary>
            <param name="path"> The path to convert to a file path. </param>
        </member>
        <member name="M:RI.Framework.IO.Paths.FilePath.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.IO.Paths.FilePath" />.
            </summary>
            <param name="path"> The path. </param>
            <remarks>
                <para>
                    Using this constructor, wildcards and relative paths are not allowed and the type of the path must be clearly determinable.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="path" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.IO.Paths.FilePath.#ctor(System.String,System.Boolean,System.Boolean,System.Nullable{RI.Framework.IO.Paths.PathType})">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.IO.Paths.FilePath" />.
            </summary>
            <param name="path"> The path. </param>
            <param name="allowWildcards"> Specifies whether wildcards are allowed or not. </param>
            <param name="allowRelatives"> Specifies whether relative directory names are allowed or not. </param>
            <param name="assumedType"> Optionally specifies the type of the path which is assumed if the type cannot be clearly determined through analysis of <paramref name="path" />. </param>
            <remarks>
                <para>
                    See <see cref="M:RI.Framework.IO.Paths.PathProperties.FromPath(System.String,System.Boolean,System.Boolean,System.Nullable{RI.Framework.IO.Paths.PathType})" /> for more details about the parameters, especially <paramref name="assumedType" />.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="path" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.InvalidPathArgumentException"> <paramref name="path" /> is not a valid file path. </exception>
        </member>
        <member name="M:RI.Framework.IO.Paths.FilePath.#ctor(RI.Framework.IO.Paths.PathProperties)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.IO.Paths.FilePath" />.
            </summary>
            <param name="path"> The <see cref="T:RI.Framework.IO.Paths.PathProperties" /> object which describes the path. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="path" /> is null. </exception>
        </member>
        <member name="P:RI.Framework.IO.Paths.FilePath.Directory">
            <summary>
                Gets the directory path of the file.
            </summary>
            <value>
                The directory path of the file or null if the file path does not specify a directory.
            </value>
        </member>
        <member name="P:RI.Framework.IO.Paths.FilePath.Exists">
            <summary>
                Gets whether the file exists.
            </summary>
            <value>
                true if the file exists, false otherwise.
            </value>
            <remarks>
                <note type="note"> <see cref="P:RI.Framework.IO.Paths.FilePath.Exists" /> does not throw exceptions besides <see cref="T:System.InvalidOperationException" />. For example, if the file exists but the user does not have access permissions, the file is not of a compatible path type used on the current system, etc., false is returned. </note>
            </remarks>
            <exception cref="T:System.InvalidOperationException"> The file contains wildcards. </exception>
        </member>
        <member name="P:RI.Framework.IO.Paths.FilePath.ExtensionWithDot">
            <summary>
                Gets the extension of the file name (with the dot).
            </summary>
            <value>
                The extension of the file name (with the dot) or null if the file name does not have an extension.
            </value>
            <remarks>
                <para>
                    If the file name ends with a dot, this property has the value of an empty string.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Framework.IO.Paths.FilePath.ExtensionWithoutDot">
            <summary>
                Gets the extension of the file name (without the dot).
            </summary>
            <value>
                The extension of the file name (without the dot) or null if the file name does not have an extension.
            </value>
            <remarks>
                <para>
                    If the file name ends with a dot, this property has the value of an empty string.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Framework.IO.Paths.FilePath.FileName">
            <summary>
                Gets the file name of the file path.
            </summary>
            <value>
                The file name of the file path, including name and extension.
            </value>
        </member>
        <member name="P:RI.Framework.IO.Paths.FilePath.FileNameWithoutExtension">
            <summary>
                Gets the file name without its extension.
            </summary>
            <value>
                The file name without its extension.
            </value>
        </member>
        <member name="M:RI.Framework.IO.Paths.FilePath.ChangeDirectory(RI.Framework.IO.Paths.DirectoryPath)">
            <summary>
                Creates a new file path with this file name but another directory.
            </summary>
            <param name="directory"> The new directory path. </param>
            <returns>
                The new file path.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="directory" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.IO.Paths.FilePath.ChangeExtension(System.String)">
            <summary>
                Creates a new file path with this file name and directory but another extension.
            </summary>
            <param name="extension"> The new extension. </param>
            <returns>
                The new file path.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="extension" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.InvalidPathArgumentException"> The existing file name (without extension) plus <paramref name="extension" /> do not form a valid new file name. </exception>
        </member>
        <member name="M:RI.Framework.IO.Paths.FilePath.ChangeFileName(System.String)">
            <summary>
                Creates a new file path with this directory but another file name (including extension).
            </summary>
            <param name="fileName"> The new file name including its extension. </param>
            <returns>
                The new file path.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="fileName" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.InvalidPathArgumentException"> <paramref name="fileName" /> is not a valid new file name. </exception>
        </member>
        <member name="M:RI.Framework.IO.Paths.FilePath.ChangeFileNameWithoutExtension(System.String)">
            <summary>
                Creates a new file path with this directory but another file name (keeping this extension).
            </summary>
            <param name="fileNameWithoutExtension"> The new file name without its extension. </param>
            <returns>
                The new file path.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="fileNameWithoutExtension" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.InvalidPathArgumentException"> <paramref name="fileNameWithoutExtension" /> plus the existing extension do not form a valid new file name. </exception>
        </member>
        <member name="M:RI.Framework.IO.Paths.FilePath.Create">
            <summary>
                Creates the file if it does not exist or overwrites an existing file with a new file of zero length.
            </summary>
            <returns>
                true if the file was newly created, false if the file already existed and was reset to zero length.
            </returns>
            <exception cref="T:System.InvalidOperationException"> The file contains wildcards. </exception>
            <exception cref="T:System.IO.IOException"> The file is in use. </exception>
            <exception cref="T:System.UnauthorizedAccessException"> The user does not have the required permissions, the file is read-only, or the file is an executable which is in use. </exception>
            <exception cref="T:System.IO.PathTooLongException"> Although being a valid file path, the file path is too long for the current system to be used. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"> The files directory does not exist or is not available. </exception>
            <exception cref="T:System.NotSupportedException"> The file is not of a compatible path type used on the current system. </exception>
        </member>
        <member name="M:RI.Framework.IO.Paths.FilePath.Delete">
            <summary>
                Deletes the file.
            </summary>
            <returns>
                true if the file existed and was deleted, false otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException"> The file contains wildcards. </exception>
            <exception cref="T:System.IO.IOException"> The file is in use. </exception>
            <exception cref="T:System.UnauthorizedAccessException"> The user does not have the required permissions, the file is read-only, or the file is an executable which is in use. </exception>
            <exception cref="T:System.IO.PathTooLongException"> Although being a valid file path, the file path is too long for the current system to be used. </exception>
        </member>
        <member name="M:RI.Framework.IO.Paths.FilePath.ReadBytes">
            <summary>
                Reads all binary data from the file.
            </summary>
            <returns>
                All binary data from the file or null if the file does not exist.
            </returns>
            <exception cref="T:System.InvalidOperationException"> The file contains wildcards. </exception>
            <exception cref="T:System.IO.IOException"> The file is in use. </exception>
            <exception cref="T:System.UnauthorizedAccessException"> The user does not have the required permissions or the file is an executable which is in use. </exception>
            <exception cref="T:System.IO.PathTooLongException"> Although being a valid file path, the file path is too long for the current system to be used. </exception>
        </member>
        <member name="M:RI.Framework.IO.Paths.FilePath.ReadText">
            <summary>
                Reads all text from the file.
            </summary>
            <returns>
                All text from the file or null if the file does not exist.
            </returns>
            <remarks>
                <para>
                    The current systems default encoding (<see cref="P:System.Text.Encoding.Default" />) is used.
                </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException"> The file contains wildcards. </exception>
            <exception cref="T:System.IO.IOException"> The file is in use. </exception>
            <exception cref="T:System.UnauthorizedAccessException"> The user does not have the required permissions or the file is an executable which is in use. </exception>
            <exception cref="T:System.IO.PathTooLongException"> Although being a valid file path, the file path is too long for the current system to be used. </exception>
        </member>
        <member name="M:RI.Framework.IO.Paths.FilePath.ReadText(System.Text.Encoding)">
            <summary>
                Reads all text from the file.
            </summary>
            <param name="encoding"> The encoding used to read the file. </param>
            <returns>
                All text from the file or null if the file does not exist.
            </returns>
            <remarks>
                <para>
                    The current systems default encoding (<see cref="P:System.Text.Encoding.Default" />) is used if <paramref name="encoding" /> is null.
                </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException"> The file contains wildcards. </exception>
            <exception cref="T:System.IO.IOException"> The file is in use. </exception>
            <exception cref="T:System.UnauthorizedAccessException"> The user does not have the required permissions or the file is an executable which is in use. </exception>
            <exception cref="T:System.IO.PathTooLongException"> Although being a valid file path, the file path is too long for the current system to be used. </exception>
        </member>
        <member name="M:RI.Framework.IO.Paths.FilePath.ToAbsolutePath(RI.Framework.IO.Paths.DirectoryPath)">
            <summary>
                Creates an absolute file path out of this file path relative to a specified root path.
            </summary>
            <param name="root"> The root path. </param>
            <returns>
                The absolute file path using <paramref name="root" />.
            </returns>
            <remarks>
                <para>
                    If this file path is already absolute, nothing is done and the same file path is returned.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="root" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.InvalidPathArgumentException"> <paramref name="root" /> is not a rooted path. </exception>
        </member>
        <member name="M:RI.Framework.IO.Paths.FilePath.ToRelativePath(RI.Framework.IO.Paths.DirectoryPath)">
            <summary>
                Creates a relative file path out of this file path relative to a specified root path.
            </summary>
            <param name="root"> The root path. </param>
            <returns>
                The relative file path relative to <paramref name="root" />.
            </returns>
            <remarks>
                <para>
                    If this file path is already relative, nothing is done and the same file path is returned.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="root" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.InvalidPathArgumentException"> <paramref name="root" /> is not a rooted path. </exception>
        </member>
        <member name="M:RI.Framework.IO.Paths.FilePath.WriteBytes(System.Byte[])">
            <summary>
                Writes binary data to the file.
            </summary>
            <param name="data"> The data to write (can be null to write zero bytes). </param>
            <returns>
                true if the file was newly created, false if it already existed and was overwritten with the specified data.
            </returns>
            <remarks>
                <para>
                    The file is created if it does not already exist.
                    If it already exists, the fille is overwritten with a new file.
                </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException"> The file contains wildcards. </exception>
            <exception cref="T:System.IO.IOException"> The file is in use. </exception>
            <exception cref="T:System.UnauthorizedAccessException"> The user does not have the required permissions, the file is read-only, or the file is an executable which is in use. </exception>
            <exception cref="T:System.IO.PathTooLongException"> Although being a valid file path, the file path is too long for the current system to be used. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"> The files directory does not exist or is not available. </exception>
            <exception cref="T:System.NotSupportedException"> The file is not of a compatible path type used on the current system. </exception>
        </member>
        <member name="M:RI.Framework.IO.Paths.FilePath.WriteText(System.String)">
            <summary>
                Writes text to the file.
            </summary>
            <param name="text"> The text to write. </param>
            <returns>
                true if the file was newly created, false if it already existed and was overwritten with the specified text.
            </returns>
            <remarks>
                <para>
                    The current systems default encoding (<see cref="P:System.Text.Encoding.Default" />) is used.
                </para>
                <para>
                    The file is created if it does not already exist.
                    If it already exists, the fille is overwritten with a new file.
                </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException"> The file contains wildcards. </exception>
            <exception cref="T:System.IO.IOException"> The file is in use. </exception>
            <exception cref="T:System.UnauthorizedAccessException"> The user does not have the required permissions, the file is read-only, or the file is an executable which is in use. </exception>
            <exception cref="T:System.IO.PathTooLongException"> Although being a valid file path, the file path is too long for the current system to be used. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"> The files directory does not exist or is not available. </exception>
            <exception cref="T:System.NotSupportedException"> The file is not of a compatible path type used on the current system. </exception>
        </member>
        <member name="M:RI.Framework.IO.Paths.FilePath.WriteText(System.String,System.Text.Encoding)">
            <summary>
                Writes text to the file.
            </summary>
            <param name="text"> The text to write (can be null to write an empty string). </param>
            <param name="encoding"> The encoding used to write the file. </param>
            <returns>
                true if the file was newly created, false if it already existed and was overwritten with the specified text.
            </returns>
            <remarks>
                <para>
                    The current systems default encoding (<see cref="P:System.Text.Encoding.Default" />) is used if <paramref name="encoding" /> is null.
                </para>
                <para>
                    The file is created if it does not already exist.
                    If it already exists, the fille is overwritten with a new file.
                </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException"> The file contains wildcards. </exception>
            <exception cref="T:System.IO.IOException"> The file is in use. </exception>
            <exception cref="T:System.UnauthorizedAccessException"> The user does not have the required permissions, the file is read-only, or the file is an executable which is in use. </exception>
            <exception cref="T:System.IO.PathTooLongException"> Although being a valid file path, the file path is too long for the current system to be used. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"> The files directory does not exist or is not available. </exception>
            <exception cref="T:System.NotSupportedException"> The file is not of a compatible path type used on the current system. </exception>
        </member>
        <member name="M:RI.Framework.IO.Paths.FilePath.CloneInternal">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.IO.Paths.FilePath.Clone">
            <inheritdoc />
        </member>
        <member name="T:RI.Framework.IO.Paths.PathError">
            <summary>
                Specifies the error in an invalid path.
            </summary>
        </member>
        <member name="F:RI.Framework.IO.Paths.PathError.None">
            <summary>
                The path is valid.
            </summary>
        </member>
        <member name="F:RI.Framework.IO.Paths.PathError.Empty">
            <summary>
                The path is empty or null.
            </summary>
        </member>
        <member name="F:RI.Framework.IO.Paths.PathError.WildcardsNotAllowed">
            <summary>
                The path contains wildcards although they are not allowed.
            </summary>
        </member>
        <member name="F:RI.Framework.IO.Paths.PathError.InvalidCharacter">
            <summary>
                The path contains invalid characters.
            </summary>
        </member>
        <member name="F:RI.Framework.IO.Paths.PathError.InvalidDirectorySeparator">
            <summary>
                The path contains an invalid directory separator (e.g. a forward slash in a Windows path).
            </summary>
        </member>
        <member name="F:RI.Framework.IO.Paths.PathError.RepeatedDirectorySeparator">
            <summary>
                The path contains two directory separators next to each other with no name in between.
            </summary>
        </member>
        <member name="F:RI.Framework.IO.Paths.PathError.AmbiguousType">
            <summary>
                The type of the path is ambiguous as it cannot be clearly determined.
            </summary>
        </member>
        <member name="F:RI.Framework.IO.Paths.PathError.WrongType">
            <summary>
                The type of the path is not of the expected type.
            </summary>
        </member>
        <member name="F:RI.Framework.IO.Paths.PathError.EmptyName">
            <summary>
                The path contains parts with empty names (e.g. only whitespace between two directory separators).
            </summary>
        </member>
        <member name="F:RI.Framework.IO.Paths.PathError.RelativesNotAllowed">
            <summary>
                The path contains relative parts although they are not allowed.
            </summary>
        </member>
        <member name="F:RI.Framework.IO.Paths.PathError.RelativeGoesBeyondRoot">
            <summary>
                The path contains relative parts which reference higher up than the root of the path (e.g. c:\data\..\..\dir).
            </summary>
        </member>
        <member name="T:RI.Framework.IO.Paths.PathProperties">
            <summary>
                Describes a path and its properties.
            </summary>
            <remarks>
                <para>
                    <see cref="T:RI.Framework.IO.Paths.PathProperties" /> analyzes a path and contains, besides the path itself, several properties which describe the characteristics of the path.
                    For invalid paths, an error description is provided (using <see cref="P:RI.Framework.IO.Paths.PathProperties.Error" />).
                </para>
                <para>
                    <see cref="T:RI.Framework.IO.Paths.PathProperties" /> supports Windows, Unix, and UNC style paths.
                </para>
            </remarks>
        </member>
        <member name="F:RI.Framework.IO.Paths.PathProperties.FileExtensionSeparator">
            <summary>
                The separator character between a file name and its extension.
            </summary>
        </member>
        <member name="F:RI.Framework.IO.Paths.PathProperties.RelativeSame">
            <summary>
                The string which can be used as a relative directory name to indicate the same level or current directory.
            </summary>
        </member>
        <member name="F:RI.Framework.IO.Paths.PathProperties.RelativeUp">
            <summary>
                The string which can be used as a relative directory name to point one level upwards.
            </summary>
        </member>
        <member name="F:RI.Framework.IO.Paths.PathProperties.UncDirectorySeparator">
            <summary>
                The directory separator used in UNC style paths.
            </summary>
        </member>
        <member name="F:RI.Framework.IO.Paths.PathProperties.UnixDirectorySeparator">
            <summary>
                The directory separator used in Unix style paths.
            </summary>
        </member>
        <member name="F:RI.Framework.IO.Paths.PathProperties.WildcardMore">
            <summary>
                The wildcard character which is a placeholder for zero, one, or more characters.
            </summary>
        </member>
        <member name="F:RI.Framework.IO.Paths.PathProperties.WildcardOne">
            <summary>
                The wildcard character which is a placeholder for exactly one characters.
            </summary>
        </member>
        <member name="F:RI.Framework.IO.Paths.PathProperties.WindowsDirectorySeparator">
            <summary>
                The directory separator used in Windows style paths.
            </summary>
        </member>
        <member name="F:RI.Framework.IO.Paths.PathProperties.WindowsDriveSeparator">
            <summary>
                The separator character between the drive and the path in a rooted Windows style path.
            </summary>
        </member>
        <member name="F:RI.Framework.IO.Paths.PathProperties.InvalidPathCharacters">
            <summary>
                All invalid path characters.
            </summary>
            <remarks>
                <para>
                    These characters are invalid for both directory and file paths.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.IO.Paths.PathProperties.FromPath(System.String,System.Boolean,System.Boolean,System.Nullable{RI.Framework.IO.Paths.PathType})">
            <summary>
                Analyzes a path and returns the results as an instance of <see cref="T:RI.Framework.IO.Paths.PathProperties" />.
            </summary>
            <param name="path"> The path to analyze. </param>
            <param name="allowWildcards"> Specifies whether wildcards are allowed or not. </param>
            <param name="allowRelatives"> Specifies whether relative directory names are allowed or not. </param>
            <param name="assumedType"> Optionally specifies the type of the path which is assumed if the type cannot be clearly determined through analysis of <paramref name="path" />. </param>
            <returns>
                The instance of <see cref="T:RI.Framework.IO.Paths.PathProperties" /> which describes the path.
            </returns>
            <remarks>
                <note type="note">
                    Invalid paths will return a valid <see cref="T:RI.Framework.IO.Paths.PathProperties" /> instance with the <see cref="P:RI.Framework.IO.Paths.PathProperties.Error" /> property set accordingly.
                </note>
                <para>
                    If <paramref name="assumedType" /> is null and the path cannot be unambiguously determined from <paramref name="path" />, the path is considered invalid and <see cref="P:RI.Framework.IO.Paths.PathProperties.Error" /> is set to <see cref="F:RI.Framework.IO.Paths.PathError.AmbiguousType" />.
                    If <paramref name="assumedType" /> is not null and the path type determined through analysis of <paramref name="path" /> does not match with <paramref name="assumedType" />, the path is considered invalid and <see cref="P:RI.Framework.IO.Paths.PathProperties.Error" /> is set to <see cref="F:RI.Framework.IO.Paths.PathError.WrongType" />.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="assumedType" /> is <see cref="F:RI.Framework.IO.Paths.PathType.Invalid"/>. </exception>
        </member>
        <member name="M:RI.Framework.IO.Paths.PathProperties.MakeAbsolute(RI.Framework.IO.Paths.PathProperties,RI.Framework.IO.Paths.PathProperties)">
            <summary>
                Makes an absolute path out of a path relative to a rooted path.
            </summary>
            <param name="root"> The rooted path. </param>
            <param name="path"> The path relative to <paramref name="root" />. </param>
            <returns>
                The instance of <see cref="T:RI.Framework.IO.Paths.PathProperties" /> which describes the absolute path.
            </returns>
            <remarks>
                <para>
                    If <paramref name="path" /> is already absolute, nothing is done and the same path is returned.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="root" /> or <paramref name="path" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.InvalidPathArgumentException"> <paramref name="root" /> or <paramref name="path" /> is an invalid path, <paramref name="root" /> is not a rooted path, or <paramref name="root" /> and <paramref name="path" /> are not of the same type. </exception>
        </member>
        <member name="M:RI.Framework.IO.Paths.PathProperties.MakeRelative(RI.Framework.IO.Paths.PathProperties,RI.Framework.IO.Paths.PathProperties)">
            <summary>
                Makes a relative path out of a rooted path compared to another rooted path.
            </summary>
            <param name="root"> The rooted path. </param>
            <param name="path"> The path to be made relative compared to <paramref name="root" />. </param>
            <returns>
                The instance of <see cref="T:RI.Framework.IO.Paths.PathProperties" /> which describes the relative path.
            </returns>
            <remarks>
                <para>
                    If <paramref name="path" /> is already relative, nothing is done and the same path is returned.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="root" /> or <paramref name="path" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.InvalidPathArgumentException"> <paramref name="root" /> or <paramref name="path" /> is an invalid path, <paramref name="root" /> is not a rooted path, or <paramref name="root" /> and <paramref name="path" /> are not of the same type. </exception>
        </member>
        <member name="P:RI.Framework.IO.Paths.PathProperties.Error">
            <summary>
                Gets the error of the path.
            </summary>
            <value>
                The error of the path.
                <see cref="F:RI.Framework.IO.Paths.PathError.None" /> if the path is valid.
            </value>
        </member>
        <member name="P:RI.Framework.IO.Paths.PathProperties.HasRelatives">
            <summary>
                Gets whether the path contains relative directory names.
            </summary>
            <value>
                true if the path contains relative directory names, false otherwise
            </value>
        </member>
        <member name="P:RI.Framework.IO.Paths.PathProperties.HasWildcards">
            <summary>
                Gets whether the path contains wildcards.
            </summary>
            <value>
                true if the path contains wildcards, false otherwise.
            </value>
        </member>
        <member name="P:RI.Framework.IO.Paths.PathProperties.IsRoot">
            <summary>
                Gets whether the path is a root.
            </summary>
            <value>
                true if the path is a root, false otherwise.
            </value>
        </member>
        <member name="P:RI.Framework.IO.Paths.PathProperties.IsRooted">
            <summary>
                Gets whether the path is rooted or absolute respectively.
            </summary>
            <value>
                true if the path is rooted, false otherwise.
            </value>
        </member>
        <member name="P:RI.Framework.IO.Paths.PathProperties.IsValid">
            <summary>
                Gets whether the path is valid.
            </summary>
            <value>
                true if the path is valid, false otherwise.
            </value>
        </member>
        <member name="P:RI.Framework.IO.Paths.PathProperties.Name">
            <summary>
                Gets the name of the path.
            </summary>
            <value>
                The name of the path.
            </value>
            <remarks>
                <para>
                    The name of a path is the last element in the path, e.g. the file name of a file path or the directory name of a directory path.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Framework.IO.Paths.PathProperties.Parent">
            <summary>
                Gets the parent of the path.
            </summary>
            <value>
                The parent of the path or null if the path is a root or does not have a parent.
            </value>
        </member>
        <member name="P:RI.Framework.IO.Paths.PathProperties.PartsNormalized">
            <summary>
                Gets the array with all normalized (but still unresolved) parts of the path.
            </summary>
            <value>
                The array with all normalized (but still unresolved) parts of the path.
            </value>
            <remarks>
                <para>
                    Each part of the path is either the root or a directory.
                </para>
                <para>
                    Normalization includes removal of unnecessary leading or trailing directory separators.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Framework.IO.Paths.PathProperties.PartsResolved">
            <summary>
                Gets the array with all normalized and resolved parts of the path.
            </summary>
            <value>
                The array with all normalized and resolved parts of the path.
            </value>
            <remarks>
                <para>
                    Each part of the path is either the root or a directory.
                </para>
                <para>
                    Resolving includes normalization and resolving of relative directory names.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Framework.IO.Paths.PathProperties.PathNormalized">
            <summary>
                Gets the normalized path.
            </summary>
            <value>
                The normalized path.
            </value>
            <remarks>
                <para>
                    Normalization includes removal of unnecessary leading or trailing directory separators.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Framework.IO.Paths.PathProperties.PathOriginal">
            <summary>
                Gets the original path.
            </summary>
            <value>
                The original path as provided to <see cref="M:RI.Framework.IO.Paths.PathProperties.FromPath(System.String,System.Boolean,System.Boolean,System.Nullable{RI.Framework.IO.Paths.PathType})" />.
            </value>
        </member>
        <member name="P:RI.Framework.IO.Paths.PathProperties.PathResolved">
            <summary>
                Gets the resolved path.
            </summary>
            <value>
                The resolved path.
            </value>
            <remarks>
                <para>
                    Resolving includes normalization and resolving of relative directory names.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Framework.IO.Paths.PathProperties.Root">
            <summary>
                Gets the root of the path.
            </summary>
            <value>
                The root of the path or null if the path has no root or is not rooted respectively.
            </value>
        </member>
        <member name="P:RI.Framework.IO.Paths.PathProperties.Type">
            <summary>
                Gets the type of the path.
            </summary>
            <value>
                The type of the path.
            </value>
        </member>
        <member name="M:RI.Framework.IO.Paths.PathProperties.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.IO.Paths.PathProperties.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.IO.Paths.PathProperties.ToString">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.IO.Paths.PathProperties.Clone">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.IO.Paths.PathProperties.System#ICloneable#Clone">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.IO.Paths.PathProperties.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.IO.Paths.PathProperties.CompareTo(RI.Framework.IO.Paths.PathProperties)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.IO.Paths.PathProperties.Equals(RI.Framework.IO.Paths.PathProperties)">
            <inheritdoc />
        </member>
        <member name="T:RI.Framework.IO.Paths.PathString">
            <summary>
                Base class for specialized path objects (<see cref="T:RI.Framework.IO.Paths.FilePath" />, <see cref="T:RI.Framework.IO.Paths.DirectoryPath" />).
            </summary>
        </member>
        <member name="M:RI.Framework.IO.Paths.PathString.Compare(RI.Framework.IO.Paths.PathString,RI.Framework.IO.Paths.PathString)">
            <summary>
                Compares two <see cref="T:RI.Framework.IO.Paths.PathString" />s for order.
            </summary>
            <param name="x"> The first <see cref="T:RI.Framework.IO.Paths.PathString" />. </param>
            <param name="y"> The second <see cref="T:RI.Framework.IO.Paths.PathString" />. </param>
            <returns> The order of <paramref name="y" /> compared to <paramref name="x" />. </returns>
            <remarks>
                See <see cref="M:RI.Framework.IO.Paths.PathString.CompareTo(RI.Framework.IO.Paths.PathString)" /> for more details.
            </remarks>
        </member>
        <member name="M:RI.Framework.IO.Paths.PathString.Equals(RI.Framework.IO.Paths.PathString,RI.Framework.IO.Paths.PathString)">
            <summary>
                Compares two <see cref="T:RI.Framework.IO.Paths.PathString" />s for equality.
            </summary>
            <param name="x"> The first <see cref="T:RI.Framework.IO.Paths.PathString" />. </param>
            <param name="y"> The second <see cref="T:RI.Framework.IO.Paths.PathString" />. </param>
            <returns> The equality of <paramref name="y" /> compared to <paramref name="x" />. </returns>
            <remarks>
                See <see cref="M:RI.Framework.IO.Paths.PathString.Equals(RI.Framework.IO.Paths.PathString)" /> for more details.
            </remarks>
        </member>
        <member name="M:RI.Framework.IO.Paths.PathString.op_Equality(RI.Framework.IO.Paths.PathString,RI.Framework.IO.Paths.PathString)">
            <summary>
                Compares two <see cref="T:RI.Framework.IO.Paths.PathString" />s for equality.
            </summary>
            <param name="x"> The first <see cref="T:RI.Framework.IO.Paths.PathString" />. </param>
            <param name="y"> The second <see cref="T:RI.Framework.IO.Paths.PathString" />. </param>
            <returns> The equality of <paramref name="y" /> compared to <paramref name="x" />. </returns>
            <remarks>
                See <see cref="M:RI.Framework.IO.Paths.PathString.Equals(RI.Framework.IO.Paths.PathString)" /> for more details.
            </remarks>
        </member>
        <member name="M:RI.Framework.IO.Paths.PathString.op_GreaterThan(RI.Framework.IO.Paths.PathString,RI.Framework.IO.Paths.PathString)">
            <summary>
                Compares two <see cref="T:RI.Framework.IO.Paths.PathString" />s for order.
            </summary>
            <param name="x"> The first <see cref="T:RI.Framework.IO.Paths.PathString" />. </param>
            <param name="y"> The second <see cref="T:RI.Framework.IO.Paths.PathString" />. </param>
            <returns> The order of <paramref name="y" /> compared to <paramref name="x" />. </returns>
            <remarks>
                See <see cref="M:RI.Framework.IO.Paths.PathString.CompareTo(RI.Framework.IO.Paths.PathString)" /> for more details.
            </remarks>
        </member>
        <member name="M:RI.Framework.IO.Paths.PathString.op_GreaterThanOrEqual(RI.Framework.IO.Paths.PathString,RI.Framework.IO.Paths.PathString)">
            <summary>
                Compares two <see cref="T:RI.Framework.IO.Paths.PathString" />s for order.
            </summary>
            <param name="x"> The first <see cref="T:RI.Framework.IO.Paths.PathString" />. </param>
            <param name="y"> The second <see cref="T:RI.Framework.IO.Paths.PathString" />. </param>
            <returns> The order of <paramref name="y" /> compared to <paramref name="x" />. </returns>
            <remarks>
                See <see cref="M:RI.Framework.IO.Paths.PathString.CompareTo(RI.Framework.IO.Paths.PathString)" /> for more details.
            </remarks>
        </member>
        <member name="M:RI.Framework.IO.Paths.PathString.op_Implicit(RI.Framework.IO.Paths.PathString)~System.String">
            <summary>
                Implicit conversion of a <see cref="T:RI.Framework.IO.Paths.PathString" /> to <see cref="T:System.String" />.
            </summary>
            <param name="path"> The path to convert to a string. </param>
        </member>
        <member name="M:RI.Framework.IO.Paths.PathString.op_Inequality(RI.Framework.IO.Paths.PathString,RI.Framework.IO.Paths.PathString)">
            <summary>
                Compares two <see cref="T:RI.Framework.IO.Paths.PathString" />s for equality.
            </summary>
            <param name="x"> The first <see cref="T:RI.Framework.IO.Paths.PathString" />. </param>
            <param name="y"> The second <see cref="T:RI.Framework.IO.Paths.PathString" />. </param>
            <returns> The equality of <paramref name="y" /> compared to <paramref name="x" />. </returns>
            <remarks>
                See <see cref="M:RI.Framework.IO.Paths.PathString.Equals(RI.Framework.IO.Paths.PathString)" /> for more details.
            </remarks>
        </member>
        <member name="M:RI.Framework.IO.Paths.PathString.op_LessThan(RI.Framework.IO.Paths.PathString,RI.Framework.IO.Paths.PathString)">
            <summary>
                Compares two <see cref="T:RI.Framework.IO.Paths.PathString" />s for order.
            </summary>
            <param name="x"> The first <see cref="T:RI.Framework.IO.Paths.PathString" />. </param>
            <param name="y"> The second <see cref="T:RI.Framework.IO.Paths.PathString" />. </param>
            <returns> The order of <paramref name="y" /> compared to <paramref name="x" />. </returns>
            <remarks>
                See <see cref="M:RI.Framework.IO.Paths.PathString.CompareTo(RI.Framework.IO.Paths.PathString)" /> for more details.
            </remarks>
        </member>
        <member name="M:RI.Framework.IO.Paths.PathString.op_LessThanOrEqual(RI.Framework.IO.Paths.PathString,RI.Framework.IO.Paths.PathString)">
            <summary>
                Compares two <see cref="T:RI.Framework.IO.Paths.PathString" />s for order.
            </summary>
            <param name="x"> The first <see cref="T:RI.Framework.IO.Paths.PathString" />. </param>
            <param name="y"> The second <see cref="T:RI.Framework.IO.Paths.PathString" />. </param>
            <returns> The order of <paramref name="y" /> compared to <paramref name="x" />. </returns>
            <remarks>
                See <see cref="M:RI.Framework.IO.Paths.PathString.CompareTo(RI.Framework.IO.Paths.PathString)" /> for more details.
            </remarks>
        </member>
        <member name="P:RI.Framework.IO.Paths.PathString.HasRelatives">
            <inheritdoc cref="P:RI.Framework.IO.Paths.PathProperties.HasRelatives" />
        </member>
        <member name="P:RI.Framework.IO.Paths.PathString.HasWildcards">
            <inheritdoc cref="P:RI.Framework.IO.Paths.PathProperties.HasWildcards" />
        </member>
        <member name="P:RI.Framework.IO.Paths.PathString.IsRoot">
            <inheritdoc cref="P:RI.Framework.IO.Paths.PathProperties.IsRoot" />
        </member>
        <member name="P:RI.Framework.IO.Paths.PathString.IsRooted">
            <inheritdoc cref="P:RI.Framework.IO.Paths.PathProperties.IsRooted" />
        </member>
        <member name="P:RI.Framework.IO.Paths.PathString.PathNormalized">
            <inheritdoc cref="P:RI.Framework.IO.Paths.PathProperties.PathNormalized" />
        </member>
        <member name="P:RI.Framework.IO.Paths.PathString.PathOriginal">
            <inheritdoc cref="P:RI.Framework.IO.Paths.PathProperties.PathOriginal" />
        </member>
        <member name="P:RI.Framework.IO.Paths.PathString.PathResolved">
            <inheritdoc cref="P:RI.Framework.IO.Paths.PathProperties.PathResolved" />
        </member>
        <member name="P:RI.Framework.IO.Paths.PathString.Root">
            <inheritdoc cref="P:RI.Framework.IO.Paths.PathProperties.Root" />
        </member>
        <member name="P:RI.Framework.IO.Paths.PathString.Type">
            <inheritdoc cref="P:RI.Framework.IO.Paths.PathProperties.Type" />
        </member>
        <member name="M:RI.Framework.IO.Paths.PathString.CompareTo(System.String)">
            <inheritdoc cref="M:RI.Framework.IO.Paths.PathString.CompareTo(RI.Framework.IO.Paths.PathString)" />
        </member>
        <member name="M:RI.Framework.IO.Paths.PathString.CompareTo(RI.Framework.IO.Paths.PathProperties)">
            <inheritdoc cref="M:RI.Framework.IO.Paths.PathString.CompareTo(RI.Framework.IO.Paths.PathString)" />
        </member>
        <member name="M:RI.Framework.IO.Paths.PathString.Equals(System.String)">
            <inheritdoc cref="M:RI.Framework.IO.Paths.PathString.Equals(RI.Framework.IO.Paths.PathString)" />
        </member>
        <member name="M:RI.Framework.IO.Paths.PathString.Equals(RI.Framework.IO.Paths.PathProperties)">
            <inheritdoc cref="M:RI.Framework.IO.Paths.PathString.Equals(RI.Framework.IO.Paths.PathString)" />
        </member>
        <member name="M:RI.Framework.IO.Paths.PathString.GetPathProperties">
            <summary>
                Gets the properties of the path represented by this <see cref="T:RI.Framework.IO.Paths.PathString" />.
            </summary>
            <returns>
                The properties of the path represented by this <see cref="T:RI.Framework.IO.Paths.PathString" />
            </returns>
        </member>
        <member name="M:RI.Framework.IO.Paths.PathString.CloneInternal">
            <summary>
                Clones this <see cref="T:RI.Framework.IO.Paths.PathString" /> instance.
            </summary>
            <returns>
                The clone of this <see cref="T:RI.Framework.IO.Paths.PathString" /> instance.
            </returns>
        </member>
        <member name="M:RI.Framework.IO.Paths.PathString.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.IO.Paths.PathString.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.IO.Paths.PathString.ToString">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.IO.Paths.PathString.System#ICloneable#Clone">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.IO.Paths.PathString.RI#Framework#Utilities#ObjectModel#ICloneable{RI#Framework#IO#Paths#PathString}#Clone">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.IO.Paths.PathString.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.IO.Paths.PathString.CompareTo(RI.Framework.IO.Paths.PathString)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.IO.Paths.PathString.Equals(RI.Framework.IO.Paths.PathString)">
            <inheritdoc />
        </member>
        <member name="T:RI.Framework.IO.Paths.PathType">
            <summary>
                Specifies the type of a path.
            </summary>
        </member>
        <member name="F:RI.Framework.IO.Paths.PathType.Invalid">
            <summary>
                The path is not a valid path.
            </summary>
        </member>
        <member name="F:RI.Framework.IO.Paths.PathType.Windows">
            <summary>
                The path is a Windows-style path (e.g. d:\data\file.ext).
            </summary>
        </member>
        <member name="F:RI.Framework.IO.Paths.PathType.Unix">
            <summary>
                The path is a UNIX style path (e.g. /dev/null).
            </summary>
        </member>
        <member name="F:RI.Framework.IO.Paths.PathType.Unc">
            <summary>
                The path is a UNC style path (e.g. \\server\share).
            </summary>
        </member>
        <member name="T:RI.Framework.IO.Paths.NamespaceDoc">
            <summary>
                Contains utilities for working with paths.
            </summary>
        </member>
        <member name="T:RI.Framework.IO.NamespaceDoc">
            <summary>
                Contains utilities for working with I/O in general.
            </summary>
        </member>
        <member name="T:RI.Framework.Utilities.Comparison.EqualityComparison`1">
            <summary>
                Implements an equality comparer based on an equality comparison function.
            </summary>
            <typeparam name="T"> The type of objects to compare for equality. </typeparam>
            <remarks>
                <para>
                    This equality comparer can be used if an <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> or <see cref="T:System.Collections.IEqualityComparer" /> is required but equality comparison should be handled by a custom function or lambda expression.
                </para>
                <note type="important">
                    Be aware of the behaviour of <see cref="T:RI.Framework.Utilities.Comparison.EqualityComparison`1" /> regarding hash values.
                    See <see cref="M:RI.Framework.Utilities.Comparison.EqualityComparison`1.#ctor(System.Func{`0,`0,System.Boolean})" /> and <see cref="M:RI.Framework.Utilities.Comparison.EqualityComparison`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})" /> for more details.
                </note>
            </remarks>
            <example>
                <para>
                    The following example shows how an <see cref="T:RI.Framework.Utilities.Comparison.EqualityComparison`1" /> can be used to check for integers which have the same remainder when divided by 5:
                </para>
                <code language="cs">
             <![CDATA[
             // create a list of integers
             var numbers = new List<int> { 0, 1, 4, 5, 12 };
            
             // create the comparer, including a hash value calculation function
             // what we do: two integers are considered the same if they have the same remainder when divided by 5
             var comparer = new EqualityComparison<int>(
                 (x,y) => (x % 5) == (y % 5),
                 (obj) => obj % 5 );
             
             // lets use the comparer to check whether we have some numbers in the list or not
             numbers.Contains(0, comparer); //returns "true" because of 0 in the list
             numbers.Contains(1, comparer); //returns "true" because of 1 in the list
             numbers.Contains(2, comparer); //returns "true" because of 12 in the list
             numbers.Contains(3, comparer); //returns "false"
             numbers.Contains(4, comparer); //returns "true" because of 4 in the list
             numbers.Contains(5, comparer); //returns "true" because of 0 in the list
             ]]>
             </code>
            </example>
        </member>
        <member name="M:RI.Framework.Utilities.Comparison.EqualityComparison`1.#ctor(System.Func{`0,`0,System.Boolean})">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Comparison.EqualityComparison`1" />.
            </summary>
            <param name="comparer"> The function which is used to compare two objects of type <typeparamref name="T" />. </param>
            <remarks>
                <para>
                    The <see cref="T:RI.Framework.Utilities.Comparison.EqualityComparison`1" /> created with this constructor uses the objects (of type <typeparamref name="T" />) own <see cref="M:System.Object.GetHashCode" /> method for calculating hash values.
                </para>
                <para>
                    Therefore, the <see cref="T:RI.Framework.Utilities.Comparison.EqualityComparison`1" /> created with this constructor should not be used in scenarios where hash values are used, e.g. as the equality comparer of a <see cref="T:System.Collections.Generic.HashSet`1" /> or <see cref="T:System.Collections.Generic.Dictionary`2" />, if the hash value calculation of the objects own <see cref="M:System.Object.GetHashCode" /> method does not correspond to the equality comparison performed by <paramref name="comparer" />.
                    If those do not correspond but it is still used for hash values, performance might be severly impacted or, depending on the usage of the hash values, other strange side-effects might occur.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.Comparison.EqualityComparison`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Comparison.EqualityComparison`1" />.
            </summary>
            <param name="comparer"> The function which is used to compare two objects of type <typeparamref name="T" />. </param>
            <param name="hasher"> The function which is used to get the hash value of an object of type <typeparamref name="T" />. Can be null to use the objects own <see cref="M:System.Object.GetHashCode" /> method. </param>
            <remarks>
                <para>
                    The <see cref="T:RI.Framework.Utilities.Comparison.EqualityComparison`1" /> created with this constructor uses the custom hash value function as specified by <paramref name="hasher" /> for calculating hash values.
                    This means that the hash value generated by <paramref name="hasher" /> must correspond to the equality comparison performed by <paramref name="comparer" />.
                </para>
                <para>
                    Therefore, the <see cref="T:RI.Framework.Utilities.Comparison.EqualityComparison`1" /> created with this constructor can be used in scenarios which uses hash values, e.g. as the equality comparer of a <see cref="T:System.Collections.Generic.HashSet`1" /> or <see cref="T:System.Collections.Generic.Dictionary`2" />.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="P:RI.Framework.Utilities.Comparison.EqualityComparison`1.Comparer">
            <summary>
                Gets the function used to compare two objects.
            </summary>
            <value>
                The function used to compare two objects.
            </value>
        </member>
        <member name="P:RI.Framework.Utilities.Comparison.EqualityComparison`1.Hasher">
            <summary>
                Gets the function used to calculate the hash value of an object.
            </summary>
            <value>
                The function used to calculate the hash value of an object.
            </value>
            <remarks>
                <para>
                    This delegate always points to the function which eventually does the calculation of the hash value.
                    If the <see cref="T:RI.Framework.Utilities.Comparison.EqualityComparison`1" /> was constructed specifying a hash function (using the <see cref="M:RI.Framework.Utilities.Comparison.EqualityComparison`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})" /> constructor) the delegate points to that function, otherwise it points to an anonymous function which encapsulates <typeparamref name="T" />.<see cref="M:System.Object.GetHashCode" />.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Utilities.Comparison.EqualityComparison`1.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)">
            <inheritdoc cref="M:RI.Framework.Utilities.Comparison.EqualityComparison`1.Equals(`0,`0)" />
            <remarks>
                <note type="note">
                    The return value is always false if one or both of <paramref name="x" /> and <paramref name="y" /> is null or not of type <typeparamref name="T" />.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Framework.Utilities.Comparison.EqualityComparison`1.System#Collections#IEqualityComparer#GetHashCode(System.Object)">
            <inheritdoc cref="M:RI.Framework.Utilities.Comparison.EqualityComparison`1.GetHashCode(`0)" />
            <remarks>
                <note type="note">
                    The return value is always zero if <paramref name="obj" /> is null or not of type <typeparamref name="T" />.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Framework.Utilities.Comparison.EqualityComparison`1.Equals(`0,`0)">
            <summary>
                Compares two objects.
            </summary>
            <param name="x"> The first object to compare. </param>
            <param name="y"> The second object to compare </param>
            <returns>
                true if both objects are considered equal, false otherwise.
            </returns>
        </member>
        <member name="M:RI.Framework.Utilities.Comparison.EqualityComparison`1.GetHashCode(`0)">
            <summary>
                Gets the hash value of an object.
            </summary>
            <param name="obj"> The object. </param>
            <returns>
                The hash value of an object.
            </returns>
            <remarks>
                The hash value is calculated depending on how the <see cref="T:RI.Framework.Utilities.Comparison.EqualityComparison`1" /> was constructed, see <see cref="M:RI.Framework.Utilities.Comparison.EqualityComparison`1.#ctor(System.Func{`0,`0,System.Boolean})" /> and <see cref="M:RI.Framework.Utilities.Comparison.EqualityComparison`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})" /> for more details.
            </remarks>
        </member>
        <member name="T:RI.Framework.Utilities.Comparison.OrderComparison`1">
            <summary>
                Implements an order comparer based on a order comparison function.
            </summary>
            <typeparam name="T"> The type of objects to compare for order. </typeparam>
            <remarks>
                <para>
                    This order comparer can be used if an <see cref="T:System.Collections.Generic.IComparer`1" /> or <see cref="T:System.Collections.IComparer" /> is required but order comparison should be handled by a custom function or lambda expression.
                </para>
            </remarks>
            <example>
                <para>
                    The following example shows how an <see cref="T:RI.Framework.Utilities.Comparison.OrderComparison`1" /> can be used to sort strings based on some customized ordering behaviour:
                </para>
                <code language="cs">
              <![CDATA[
              // create a list of strings we want to sort
              var names = new List<string> { "Andrew", "Charles", "Bob" };
             
              // create the comparer
              // what we do: longer strings are always "greater than" shorter strings, strings of equal length use default case-insensitive comparison
              var comparer = new OrderComparison<string>((x,y) => x.Length != y.Length ? x.Length.CompareTo(y.Length) : StringComparer.OrdinalIgnoreCase.Compare(x, y));
              
              // sort the strings based on our customized comparison
              names.Sort(comparer);
              ]]>
              </code>
            </example>
        </member>
        <member name="M:RI.Framework.Utilities.Comparison.OrderComparison`1.#ctor(System.Func{`0,`0,System.Int32})">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Comparison.OrderComparison`1" />.
            </summary>
            <param name="comparer"> The function which is used to compare two objects of type <typeparamref name="T" />. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.Comparison.OrderComparison`1.#ctor(System.Boolean,System.Func{`0,`0,System.Int32})">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Comparison.OrderComparison`1" />.
            </summary>
            <param name="reverseOrder"> Specifies whether the comparison uses reversed order (multiplying the comparison result by -1) or not. </param>
            <param name="comparer"> The function which is used to compare two objects of type <typeparamref name="T" />. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="P:RI.Framework.Utilities.Comparison.OrderComparison`1.Comparer">
            <summary>
                Gets the function used to compare two objects.
            </summary>
            <value>
                The function used to compare two objects.
            </value>
        </member>
        <member name="P:RI.Framework.Utilities.Comparison.OrderComparison`1.ReverseOrder">
            <summary>
                Gets whether the comparison is done in reverse order (multiplying the comparison result by -1) or not.
            </summary>
            <value>
                true if the comparison is done in reverse order (multiplying the comparison result by -1), false otherwise.
            </value>
        </member>
        <member name="M:RI.Framework.Utilities.Comparison.OrderComparison`1.System#Collections#IComparer#Compare(System.Object,System.Object)">
            <inheritdoc cref="M:RI.Framework.Utilities.Comparison.OrderComparison`1.Compare(`0,`0)" />
            <remarks>
                <note type="note">
                    The return value is always -1 if one or both of <paramref name="x" /> and <paramref name="y" /> is null or not of type <typeparamref name="T" />.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Framework.Utilities.Comparison.OrderComparison`1.Compare(`0,`0)">
            <summary>
                Compares two objects.
            </summary>
            <param name="x"> The first object to compare. </param>
            <param name="y"> The second object to compare </param>
            <returns>
                The value which indicates wheter x is less than y (return value &lt; 0), equals y (return value = 0), or greater than y (return value &gt; 0).
            </returns>
        </member>
        <member name="T:RI.Framework.Utilities.Comparison.NamespaceDoc">
            <summary>
                Contains utilities for customized comparing of objects.
            </summary>
        </member>
        <member name="T:RI.Framework.Utilities.DateTimeExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.DateTime" /> type.
            </summary>
        </member>
        <member name="M:RI.Framework.Utilities.DateTimeExtensions.ToIso8601(System.DateTime)">
            <summary>
                Converts a date and time to an ISO8601 round-trip compatible string.
            </summary>
            <param name="dateTime"> The date and time. </param>
            <returns>
                The date and time as an ISO8601 round-trip compatible string.
                Example: <c> 2016-02-01T14:30:50.3330000 </c>
            </returns>
        </member>
        <member name="M:RI.Framework.Utilities.DateTimeExtensions.ToIso8601(System.DateTimeOffset)">
            <summary>
                Converts a date and time with UTC offset to an ISO8601 round-trip compatible string.
            </summary>
            <param name="dateTimeOffset"> The date and time with offset. </param>
            <returns>
                The date and time with offset as an ISO8601 round-trip compatible string.
                Example: <c> 2016-02-01T14:30:50.3330000+02:00 </c>
            </returns>
        </member>
        <member name="M:RI.Framework.Utilities.DateTimeExtensions.ToSortableString(System.DateTime)">
            <summary>
                Converts a date and time into a sortable string.
            </summary>
            <param name="dateTime"> The date and time. </param>
            <returns>
                The date and time as a sortable string in the following format yyyyMMddHHmmssfff with no separator between the units.
                Example: <c> 20160201143050333 </c>
            </returns>
        </member>
        <member name="M:RI.Framework.Utilities.DateTimeExtensions.ToSortableString(System.DateTime,System.Char)">
            <summary>
                Converts a date and time into a sortable string.
            </summary>
            <param name="dateTime"> The date and time. </param>
            <param name="separator"> The separator between each unit of the date and time. </param>
            <returns>
                The date and time as a sortable string in the following format yyyy-MM-dd-HH-mm-ss-fff where the dash is the used separator.
                Example: <c> 2016_02_01_14_30_50_333 </c> when used with the underscore as a separator.
            </returns>
        </member>
        <member name="M:RI.Framework.Utilities.DateTimeExtensions.ToSortableString(System.DateTime,System.String)">
            <summary>
                Converts a date and time into a sortable string.
            </summary>
            <param name="dateTime"> The date and time. </param>
            <param name="separator"> The separator between each unit of the date and time. Can be null to use no separator. </param>
            <returns>
                The date and time as a sortable string in the following format yyyy-MM-dd-HH-mm-ss-fff where the dash is the used separator.
                Example: <c> 2016_02_01_14_30_50_333 </c> when used with the underscore as a separator.
            </returns>
        </member>
        <member name="T:RI.Framework.Utilities.DoubleExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.Double" /> type.
            </summary>
        </member>
        <member name="M:RI.Framework.Utilities.DoubleExtensions.GetValueOrDefault(System.Double)">
            <summary>
                Gets the number or the default value (0.0) if a double precision floating point number is "NaN"/"Not-a-Number" or infinity (positive or negative).
            </summary>
            <param name="value"> The double precision floating point number. </param>
            <returns>
                Zero if the number is "NaN"/"Not-a-Number" or infinity (either positive or negative), <paramref name="value" /> otherwise.
            </returns>
        </member>
        <member name="M:RI.Framework.Utilities.DoubleExtensions.GetValueOrDefault(System.Double,System.Double)">
            <summary>
                Gets the number or a specified default value if a double precision floating point number is "NaN"/"Not-a-Number" or infinity (positive or negative).
            </summary>
            <param name="value"> The double precision floating point number. </param>
            <param name="valueIfNanOrInfinity"> The value to return when <paramref name="value" /> is "NaN"/"Not-a-Number" or infinity. </param>
            <returns>
                <paramref name="valueIfNanOrInfinity" /> if the number is "NaN"/"Not-a-Number" or infinity (either positive or negative), <paramref name="value" /> otherwise.
            </returns>
        </member>
        <member name="M:RI.Framework.Utilities.DoubleExtensions.IsInfinity(System.Double)">
            <summary>
                Determines whether a double precision floating point number is infinity (positive or negative).
            </summary>
            <param name="value"> The double precision floating point number. </param>
            <returns>
                true if the number is infinity (either positive or negative), false otherwise.
            </returns>
        </member>
        <member name="M:RI.Framework.Utilities.DoubleExtensions.IsNan(System.Double)">
            <summary>
                Determines whether a double precision floating point number is "NaN"/"Not-a-Number".
            </summary>
            <param name="value"> The double precision floating point number. </param>
            <returns>
                true if the number is "NaN"/"Not-a-Number", false otherwise.
            </returns>
        </member>
        <member name="M:RI.Framework.Utilities.DoubleExtensions.IsNanOrInfinity(System.Double)">
            <summary>
                Determines whether a double precision floating point number is "NaN"/"Not-a-Number" or infinity (positive or negative).
            </summary>
            <param name="value"> The double precision floating point number. </param>
            <returns> </returns>
            <returns>
                true if the number is "NaN"/"Not-a-Number" or infinity (either positive or negative), false otherwise.
            </returns>
        </member>
        <member name="M:RI.Framework.Utilities.DoubleExtensions.IsNumber(System.Double)">
            <summary>
                Determines whether a double precision floating point number is neither "NaN"/"Not-a-Number" nor infinity (positive or negative).
            </summary>
            <param name="value"> The double precision floating point number. </param>
            <returns>
                true if the number is neither "NaN"/"Not-a-Number" nor infinity (either positive or negative) but rather a real number, false otherwise.
            </returns>
        </member>
        <member name="T:RI.Framework.Utilities.ExceptionExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.Exception" /> type.
            </summary>
        </member>
        <member name="M:RI.Framework.Utilities.ExceptionExtensions.ToDetailedString(System.Exception)">
            <summary>
                Creates a detailed string representation of an exception.
            </summary>
            <param name="exception"> The exception. </param>
            <returns>
                The detailed string representation of the exception.
            </returns>
            <remarks>
                <note type="note">
                    The created string representation is not intented for serializing or storing an exception, it is only used for logging and debugging purposes.
                </note>
                <para>
                    A single space character is used as an indentation string for inner exceptions.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Utilities.ExceptionExtensions.ToDetailedString(System.Exception,System.String)">
            <summary>
                Creates a detailed string representation of an exception.
            </summary>
            <param name="exception"> The exception. </param>
            <param name="indentString"> An indentation string which is used to indent inner exceptions in the string. </param>
            <returns>
                The detailed string representation of the exception.
            </returns>
            <remarks>
                <note type="note">
                    The created string representation is not intented for serializing or storing an exception, it is only used for logging and debugging purposes.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Framework.Utilities.ExceptionExtensions.ToDetailedString(System.Exception,System.Char)">
            <summary>
                Creates a detailed string representation of an exception.
            </summary>
            <param name="exception"> The exception. </param>
            <param name="indentChar"> An indentation character which is used to indent inner exceptions in the string. </param>
            <returns>
                The detailed string representation of the exception.
            </returns>
            <remarks>
                <note type="note">
                    The created string representation is not intented for serializing or storing an exception, it is only used for logging and debugging purposes.
                </note>
            </remarks>
        </member>
        <member name="T:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException">
            <summary>
                The <see cref="T:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException" /> is thrown when a string argument is empty (has a length of zero or only whitespaces) when it should not be.
            </summary>
        </member>
        <member name="M:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException" />.
            </summary>
        </member>
        <member name="M:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException" />.
            </summary>
            <param name="paramName"> The parameter which has an empty string. </param>
        </member>
        <member name="M:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException.#ctor(System.String,System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException" />.
            </summary>
            <param name="paramName"> The parameter which has an empty string. </param>
            <param name="message"> The message which describes the exception. </param>
        </member>
        <member name="M:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException.#ctor(System.String,System.Exception)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
            <param name="innerException"> The exception which triggered this exception. </param>
        </member>
        <member name="M:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException" />.
            </summary>
            <param name="info"> The serialization data. </param>
            <param name="context"> The type of the source of the serialization data. </param>
        </member>
        <member name="T:RI.Framework.Utilities.Exceptions.InvalidPathArgumentException">
            <summary>
                The <see cref="T:RI.Framework.Utilities.Exceptions.InvalidPathArgumentException" /> is thrown when an argument is not a valid path or a path of an unexpected type.
            </summary>
        </member>
        <member name="M:RI.Framework.Utilities.Exceptions.InvalidPathArgumentException.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Exceptions.InvalidPathArgumentException" />.
            </summary>
        </member>
        <member name="M:RI.Framework.Utilities.Exceptions.InvalidPathArgumentException.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Exceptions.InvalidPathArgumentException" />.
            </summary>
            <param name="paramName"> The parameter whose type is invalid. </param>
        </member>
        <member name="M:RI.Framework.Utilities.Exceptions.InvalidPathArgumentException.#ctor(System.String,RI.Framework.IO.Paths.PathError)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Exceptions.InvalidPathArgumentException" />.
            </summary>
            <param name="paramName"> The parameter whose type is invalid. </param>
            <param name="error"> The path error as analyzed by <see cref="T:RI.Framework.IO.Paths.PathProperties" />. </param>
        </member>
        <member name="M:RI.Framework.Utilities.Exceptions.InvalidPathArgumentException.#ctor(System.String,System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Exceptions.InvalidPathArgumentException" />.
            </summary>
            <param name="paramName"> The parameter whose type is invalid. </param>
            <param name="message"> The message which describes the exception. </param>
        </member>
        <member name="M:RI.Framework.Utilities.Exceptions.InvalidPathArgumentException.#ctor(System.String,System.Exception)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Exceptions.InvalidPathArgumentException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
            <param name="innerException"> The exception which triggered this exception. </param>
        </member>
        <member name="M:RI.Framework.Utilities.Exceptions.InvalidPathArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Exceptions.InvalidPathArgumentException" />.
            </summary>
            <param name="info"> The serialization data. </param>
            <param name="context"> The type of the source of the serialization data. </param>
        </member>
        <member name="T:RI.Framework.Utilities.Exceptions.InvalidTypeArgumentException">
            <summary>
                The <see cref="T:RI.Framework.Utilities.Exceptions.InvalidTypeArgumentException" /> is thrown when an argument is not of an expected or compatible type.
            </summary>
        </member>
        <member name="M:RI.Framework.Utilities.Exceptions.InvalidTypeArgumentException.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Exceptions.InvalidTypeArgumentException" />.
            </summary>
        </member>
        <member name="M:RI.Framework.Utilities.Exceptions.InvalidTypeArgumentException.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Exceptions.InvalidTypeArgumentException" />.
            </summary>
            <param name="paramName"> The parameter whose type is invalid. </param>
        </member>
        <member name="M:RI.Framework.Utilities.Exceptions.InvalidTypeArgumentException.#ctor(System.String,System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Exceptions.InvalidTypeArgumentException" />.
            </summary>
            <param name="paramName"> The parameter whose type is invalid. </param>
            <param name="message"> The message which describes the exception. </param>
        </member>
        <member name="M:RI.Framework.Utilities.Exceptions.InvalidTypeArgumentException.#ctor(System.String,System.Exception)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Exceptions.InvalidTypeArgumentException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
            <param name="innerException"> The exception which triggered this exception. </param>
        </member>
        <member name="M:RI.Framework.Utilities.Exceptions.InvalidTypeArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Exceptions.InvalidTypeArgumentException" />.
            </summary>
            <param name="info"> The serialization data. </param>
            <param name="context"> The type of the source of the serialization data. </param>
        </member>
        <member name="T:RI.Framework.Utilities.Exceptions.NotAnEnumerationArgumentException">
            <summary>
                The <see cref="T:RI.Framework.Utilities.Exceptions.NotAnEnumerationArgumentException" /> is thrown when an argument is not of an enumeration type when it should be.
            </summary>
        </member>
        <member name="M:RI.Framework.Utilities.Exceptions.NotAnEnumerationArgumentException.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Exceptions.NotAnEnumerationArgumentException" />.
            </summary>
        </member>
        <member name="M:RI.Framework.Utilities.Exceptions.NotAnEnumerationArgumentException.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Exceptions.NotAnEnumerationArgumentException" />.
            </summary>
            <param name="paramName"> The parameter which is not an enumeration. </param>
        </member>
        <member name="M:RI.Framework.Utilities.Exceptions.NotAnEnumerationArgumentException.#ctor(System.String,System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Exceptions.NotAnEnumerationArgumentException" />.
            </summary>
            <param name="paramName"> The parameter which is not an enumeration. </param>
            <param name="message"> The message which describes the exception. </param>
        </member>
        <member name="M:RI.Framework.Utilities.Exceptions.NotAnEnumerationArgumentException.#ctor(System.String,System.Exception)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Exceptions.NotAnEnumerationArgumentException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
            <param name="innerException"> The exception which triggered this exception. </param>
        </member>
        <member name="M:RI.Framework.Utilities.Exceptions.NotAnEnumerationArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Exceptions.NotAnEnumerationArgumentException" />.
            </summary>
            <param name="info"> The serialization data. </param>
            <param name="context"> The type of the source of the serialization data. </param>
        </member>
        <member name="T:RI.Framework.Utilities.Exceptions.NotFiniteArgumentException">
            <summary>
                The <see cref="T:RI.Framework.Utilities.Exceptions.NotFiniteArgumentException" /> is thrown when a floating point argument is not a finite number (means: it is "NaN"/"Not-a-Number" or infinity (either positive or negative)), when it should not be.
            </summary>
        </member>
        <member name="M:RI.Framework.Utilities.Exceptions.NotFiniteArgumentException.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Exceptions.NotFiniteArgumentException" />.
            </summary>
        </member>
        <member name="M:RI.Framework.Utilities.Exceptions.NotFiniteArgumentException.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Exceptions.NotFiniteArgumentException" />.
            </summary>
            <param name="paramName"> The parameter which has a not-finite number. </param>
        </member>
        <member name="M:RI.Framework.Utilities.Exceptions.NotFiniteArgumentException.#ctor(System.String,System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Exceptions.NotFiniteArgumentException" />.
            </summary>
            <param name="paramName"> The parameter which has a not-finite number. </param>
            <param name="message"> The message which describes the exception. </param>
        </member>
        <member name="M:RI.Framework.Utilities.Exceptions.NotFiniteArgumentException.#ctor(System.String,System.Exception)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Exceptions.NotFiniteArgumentException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
            <param name="innerException"> The exception which triggered this exception. </param>
        </member>
        <member name="M:RI.Framework.Utilities.Exceptions.NotFiniteArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Exceptions.NotFiniteArgumentException" />.
            </summary>
            <param name="info"> The serialization data. </param>
            <param name="context"> The type of the source of the serialization data. </param>
        </member>
        <member name="T:RI.Framework.Utilities.Exceptions.NotReadableStreamArgumentException">
            <summary>
                The <see cref="T:RI.Framework.Utilities.Exceptions.NotReadableStreamArgumentException" /> is thrown when a <see cref="T:System.IO.Stream" /> argument cannot be read when it should be.
            </summary>
        </member>
        <member name="M:RI.Framework.Utilities.Exceptions.NotReadableStreamArgumentException.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Exceptions.NotReadableStreamArgumentException" />.
            </summary>
        </member>
        <member name="M:RI.Framework.Utilities.Exceptions.NotReadableStreamArgumentException.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Exceptions.NotReadableStreamArgumentException" />.
            </summary>
            <param name="paramName"> The parameter which is a not readable <see cref="T:System.IO.Stream" />. </param>
        </member>
        <member name="M:RI.Framework.Utilities.Exceptions.NotReadableStreamArgumentException.#ctor(System.String,System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Exceptions.NotReadableStreamArgumentException" />.
            </summary>
            <param name="paramName"> The parameter which is a not readable <see cref="T:System.IO.Stream" />. </param>
            <param name="message"> The message which describes the exception. </param>
        </member>
        <member name="M:RI.Framework.Utilities.Exceptions.NotReadableStreamArgumentException.#ctor(System.String,System.Exception)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Exceptions.NotReadableStreamArgumentException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
            <param name="innerException"> The exception which triggered this exception. </param>
        </member>
        <member name="M:RI.Framework.Utilities.Exceptions.NotReadableStreamArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Exceptions.NotReadableStreamArgumentException" />.
            </summary>
            <param name="info"> The serialization data. </param>
            <param name="context"> The type of the source of the serialization data. </param>
        </member>
        <member name="T:RI.Framework.Utilities.Exceptions.NotSeekableStreamArgumentException">
            <summary>
                The <see cref="T:RI.Framework.Utilities.Exceptions.NotSeekableStreamArgumentException" /> is thrown when a <see cref="T:System.IO.Stream" /> argument cannot be accessed randomly (&quot;seeked&quot;) when it should be.
            </summary>
        </member>
        <member name="M:RI.Framework.Utilities.Exceptions.NotSeekableStreamArgumentException.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Exceptions.NotSeekableStreamArgumentException" />.
            </summary>
        </member>
        <member name="M:RI.Framework.Utilities.Exceptions.NotSeekableStreamArgumentException.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Exceptions.NotSeekableStreamArgumentException" />.
            </summary>
            <param name="paramName"> The parameter which is a not randomly accessible <see cref="T:System.IO.Stream" />. </param>
        </member>
        <member name="M:RI.Framework.Utilities.Exceptions.NotSeekableStreamArgumentException.#ctor(System.String,System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Exceptions.NotSeekableStreamArgumentException" />.
            </summary>
            <param name="paramName"> The parameter which is a not randomly accessible <see cref="T:System.IO.Stream" />. </param>
            <param name="message"> The message which describes the exception. </param>
        </member>
        <member name="M:RI.Framework.Utilities.Exceptions.NotSeekableStreamArgumentException.#ctor(System.String,System.Exception)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Exceptions.NotSeekableStreamArgumentException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
            <param name="innerException"> The exception which triggered this exception. </param>
        </member>
        <member name="M:RI.Framework.Utilities.Exceptions.NotSeekableStreamArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Exceptions.NotSeekableStreamArgumentException" />.
            </summary>
            <param name="info"> The serialization data. </param>
            <param name="context"> The type of the source of the serialization data. </param>
        </member>
        <member name="T:RI.Framework.Utilities.Exceptions.NotWriteableStreamArgumentException">
            <summary>
                The <see cref="T:RI.Framework.Utilities.Exceptions.NotWriteableStreamArgumentException" /> is thrown when a <see cref="T:System.IO.Stream" /> argument cannot be written when it should be.
            </summary>
        </member>
        <member name="M:RI.Framework.Utilities.Exceptions.NotWriteableStreamArgumentException.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Exceptions.NotWriteableStreamArgumentException" />.
            </summary>
        </member>
        <member name="M:RI.Framework.Utilities.Exceptions.NotWriteableStreamArgumentException.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Exceptions.NotWriteableStreamArgumentException" />.
            </summary>
            <param name="paramName"> The parameter which is a not writeable <see cref="T:System.IO.Stream" />. </param>
        </member>
        <member name="M:RI.Framework.Utilities.Exceptions.NotWriteableStreamArgumentException.#ctor(System.String,System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Exceptions.NotWriteableStreamArgumentException" />.
            </summary>
            <param name="paramName"> The parameter which is a not writeable <see cref="T:System.IO.Stream" />. </param>
            <param name="message"> The message which describes the exception. </param>
        </member>
        <member name="M:RI.Framework.Utilities.Exceptions.NotWriteableStreamArgumentException.#ctor(System.String,System.Exception)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Exceptions.NotWriteableStreamArgumentException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
            <param name="innerException"> The exception which triggered this exception. </param>
        </member>
        <member name="M:RI.Framework.Utilities.Exceptions.NotWriteableStreamArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Exceptions.NotWriteableStreamArgumentException" />.
            </summary>
            <param name="info"> The serialization data. </param>
            <param name="context"> The type of the source of the serialization data. </param>
        </member>
        <member name="T:RI.Framework.Utilities.Exceptions.NamespaceDoc">
            <summary>
                Contains generally used exceptions.
            </summary>
        </member>
        <member name="T:RI.Framework.Utilities.FloatExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.Single" /> type.
            </summary>
        </member>
        <member name="M:RI.Framework.Utilities.FloatExtensions.GetValueOrDefault(System.Single)">
            <summary>
                Gets the number or the default value (0.0f) if a single precision floating point number is "NaN"/"Not-a-Number" or infinity (positive or negative).
            </summary>
            <param name="value"> The single precision floating point number. </param>
            <returns>
                Zero if the number is "NaN"/"Not-a-Number" or infinity (either positive or negative), <paramref name="value" /> otherwise.
            </returns>
        </member>
        <member name="M:RI.Framework.Utilities.FloatExtensions.GetValueOrDefault(System.Single,System.Single)">
            <summary>
                Gets the number or a specified default value if a single precision floating point number is "NaN"/"Not-a-Number" or infinity (positive or negative).
            </summary>
            <param name="value"> The single precision floating point number. </param>
            <param name="valueIfNanOrInfinity"> The value to return when <paramref name="value" /> is "NaN"/"Not-a-Number" or infinity. </param>
            <returns>
                <paramref name="valueIfNanOrInfinity" /> if the number is "NaN"/"Not-a-Number" or infinity (either positive or negative), <paramref name="value" /> otherwise.
            </returns>
        </member>
        <member name="M:RI.Framework.Utilities.FloatExtensions.IsInfinity(System.Single)">
            <summary>
                Determines whether a single precision floating point number is infinity (positive or negative).
            </summary>
            <param name="value"> The single precision floating point number. </param>
            <returns>
                true if the number is infinity (either positive or negative), false otherwise.
            </returns>
        </member>
        <member name="M:RI.Framework.Utilities.FloatExtensions.IsNan(System.Single)">
            <summary>
                Determines whether a single precision floating point number is "NaN"/"Not-a-Number".
            </summary>
            <param name="value"> The single precision floating point number. </param>
            <returns>
                true if the number is "NaN"/"Not-a-Number", false otherwise.
            </returns>
        </member>
        <member name="M:RI.Framework.Utilities.FloatExtensions.IsNanOrInfinity(System.Single)">
            <summary>
                Determines whether a single precision floating point number is "NaN"/"Not-a-Number" or infinity (positive or negative).
            </summary>
            <param name="value"> The single precision floating point number. </param>
            <returns> </returns>
            <returns>
                true if the number is "NaN"/"Not-a-Number" or infinity (either positive or negative), false otherwise.
            </returns>
        </member>
        <member name="M:RI.Framework.Utilities.FloatExtensions.IsNumber(System.Single)">
            <summary>
                Determines whether a single precision floating point number is neither "NaN"/"Not-a-Number" nor infinity (positive or negative).
            </summary>
            <param name="value"> The single precision floating point number. </param>
            <returns>
                true if the number is neither "NaN"/"Not-a-Number" nor infinity (either positive or negative) but rather a real number, false otherwise.
            </returns>
        </member>
        <member name="T:RI.Framework.Utilities.ObjectModel.ICloneable`1">
            <summary>
                Defines an interface to implement type-safe cloning.
            </summary>
            <typeparam name="T"> The type to clone. </typeparam>
        </member>
        <member name="M:RI.Framework.Utilities.ObjectModel.ICloneable`1.Clone">
            <summary>
                Clones the object.
            </summary>
            <returns> The cloned object. </returns>
            <remarks>
                <note type="implement">
                    Whether it is a deep or shallow clone depends on the implementing type and its context.
                </note>
            </remarks>
        </member>
        <member name="T:RI.Framework.Utilities.ObjectModel.NamespaceDoc">
            <summary>
                Contains types for creating object models.
            </summary>
        </member>
        <member name="T:RI.Framework.Utilities.RandomExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.Random" /> type.
            </summary>
        </member>
        <member name="M:RI.Framework.Utilities.RandomExtensions.FillStream(System.Random,System.IO.Stream,System.Int32)">
            <summary>
                Fills a <see cref="T:System.IO.Stream" /> with random bytes.
            </summary>
            <param name="randomizer"> The randomizer to use. </param>
            <param name="stream"> The <see cref="T:System.IO.Stream" /> to fill. </param>
            <param name="length"> The amount of bytes to fill in the <see cref="T:System.IO.Stream" /> at its current position. </param>
            <returns>
                The number of written bytes to the <see cref="T:System.IO.Stream" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> or <paramref name="stream" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.NotWriteableStreamArgumentException"> <paramref name="stream" /> is not writeable. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="length" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.RandomExtensions.NextBoolean(System.Random)">
            <summary>
                Returns random true or false.
            </summary>
            <param name="randomizer"> The randomizer to use. </param>
            <returns>
                true or false.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.RandomExtensions.NextByte(System.Random)">
            <summary>
                Gets a random byte value.
            </summary>
            <param name="randomizer"> The randomizer to use. </param>
            <returns>
                A random byte value between 0 (inclusive) and 255 (inclusive).
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.RandomExtensions.NextByte(System.Random,System.Byte)">
            <summary>
                Gets a random byte value.
            </summary>
            <param name="randomizer"> The randomizer to use. </param>
            <param name="max"> The allowed maximum value (inclusive). </param>
            <returns>
                A random byte value between 0 (inclusive) and <paramref name="max" /> (inclusive).
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.RandomExtensions.NextByte(System.Random,System.Byte,System.Byte)">
            <summary>
                Gets a random byte value.
            </summary>
            <param name="randomizer"> The randomizer to use. </param>
            <param name="min"> The allowed minimum value (inclusive). </param>
            <param name="max"> The allowed maximum value (inclusive). </param>
            <returns>
                A random byte value between <paramref name="min" /> (inclusive) and <paramref name="max" /> (inclusive).
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.RandomExtensions.NextBytes(System.Random,System.Byte[],System.Int32)">
            <summary>
                Fills a byte array with random values.
            </summary>
            <param name="randomizer"> The randomizer to use. </param>
            <param name="buffer"> The byte array to fill. </param>
            <param name="offset"> The offset in the byte array at which the random fill starts. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="offset" /> is less than zero or outside the length of the array. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.RandomExtensions.NextBytes(System.Random,System.Byte[],System.Int32,System.Int32)">
            <summary>
                Fills a byte array with random values.
            </summary>
            <param name="randomizer"> The randomizer to use. </param>
            <param name="buffer"> The byte array to fill. </param>
            <param name="offset"> The offset in the byte array at which the random fill starts. </param>
            <param name="count"> The number of bytes to fill with random values, beginning at <paramref name="offset" />. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="offset" /> or <paramref name="count" /> is less than zero or the range specified by <paramref name="offset" /> and <paramref name="count" /> is outside the length of the array. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.RandomExtensions.NextBytes(System.Random,System.Int32)">
            <summary>
                Gets a byte array of a specified length filled with random bytes.
            </summary>
            <param name="randomizer"> The randomizer to use. </param>
            <param name="length"> The number of randomized bytes in the array. </param>
            <returns>
                The byte array which contains the specified number of randomized bytes.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="length" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.RandomExtensions.NextChance(System.Random,System.Double)">
            <summary>
                Returns random true or false depending on a specified chance.
            </summary>
            <param name="randomizer"> The randomizer to use. </param>
            <param name="chance"> The chance to return true, between 0.0 (never) and 1.0 (always). </param>
            <returns>
                true or false based on the specified chance.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> is null. </exception>
            <exception cref="T:System.NotFiniteNumberException"> <paramref name="chance" /> is either "NaN"/"Not-a-Number" or infinity (positive or negative). </exception>
        </member>
        <member name="M:RI.Framework.Utilities.RandomExtensions.NextDateTime(System.Random)">
            <summary>
                Gets a random date and time value.
            </summary>
            <param name="randomizer"> The randomizer to use. </param>
            <returns>
                A random date and time value between 0001-01-01 00:00:00 (inclusive) and 9999-12-31 23:59:59 (exclusive).
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.RandomExtensions.NextDateTime(System.Random,System.DateTime,System.DateTime)">
            <summary>
                Gets a random date and time value.
            </summary>
            <param name="randomizer"> The randomizer to use. </param>
            <param name="min"> The allowed minimum date and time (inclusive). </param>
            <param name="max"> The allowed maximum date and time (exclusive). </param>
            <returns>
                A random date and time value between <paramref name="min" /> (inclusive) and <paramref name="max" /> (exclusive).
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.RandomExtensions.NextDouble(System.Random,System.Double)">
            <summary>
                Gets a random double precision floating point value.
            </summary>
            <param name="randomizer"> The randomizer to use. </param>
            <param name="max"> The allowed maximum value (exclusive). </param>
            <returns>
                A random double precision floating point value between 0.0 (inclusive) and <paramref name="max" /> (exclusive).
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.RandomExtensions.NextDouble(System.Random,System.Double,System.Double)">
            <summary>
                Gets a random double precision floating point value.
            </summary>
            <param name="randomizer"> The randomizer to use. </param>
            <param name="min"> The allowed minimum value (inclusive). </param>
            <param name="max"> The allowed maximum value (exclusive). </param>
            <returns>
                A random double precision floating point value between <paramref name="min" /> (inclusive) and <paramref name="max" /> (exclusive).
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> is null. </exception>
            <exception cref="T:System.NotFiniteNumberException"> <paramref name="min" /> or <paramref name="max" /> is either "NaN"/"Not-a-Number" or infinity (positive or negative). </exception>
        </member>
        <member name="M:RI.Framework.Utilities.RandomExtensions.NextGaussian(System.Random,System.Double,System.Double)">
            <summary>
                Gets a normally distributed random number.
            </summary>
            <param name="randomizer"> The randomizer to use. </param>
            <param name="mu"> The distributions mean. </param>
            <param name="sigma"> The standard deviation of the distribution. </param>
            <returns>
                A normally distributed random double precision floating point value.
            </returns>
            <remarks>
                See <see href="https://en.wikipedia.org/wiki/Box-Muller_transform"> https://en.wikipedia.org/wiki/Box-Muller_transform </see> for details about the used algorithm.
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> is null. </exception>
            <exception cref="T:System.NotFiniteNumberException"> <paramref name="mu" /> or <paramref name="sigma" /> is either "NaN"/"Not-a-Number" or infinity (positive or negative). </exception>
        </member>
        <member name="M:RI.Framework.Utilities.RandomExtensions.NextLoremIpsum(System.Random,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Generates a random sentence of readable text.
            </summary>
            <param name="randomizer"> The randomizer to use. </param>
            <param name="words"> The number of words in the sentence. </param>
            <param name="startWithLoremIpsum"> Indicates whether the sentence should start with &quot;lorem ipsum dolor sit amet&quot;. </param>
            <param name="startWithCapital"> Indicates whether the first letter of the sentence should be a capital letter. </param>
            <param name="endWithPeriod"> Indicates whether the sentence should end with a period. </param>
            <returns>
                The string with the amount of specified words.
            </returns>
            <remarks>
                <para>
                    The returned string is a text in a pseudo-language which has no real meaning but appears to be &quot;real&quot; (somewhat resembling latin).
                    For example: Sed cursus ante dapibus diam.
                    See <see href="https://en.wikipedia.org/wiki/Lorem_ipsum"> https://en.wikipedia.org/wiki/Lorem_ipsum </see> for details about &quot;Lorem ipsum&quot;.
                </para>
                <para>
                    The first call of <see cref="M:RI.Framework.Utilities.RandomExtensions.NextLoremIpsum(System.Random,System.Int32,System.Boolean,System.Boolean,System.Boolean)" /> takes longer time as subsequent calls because the list of available words is prepared during the first call.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="words" /> is less than zero or <paramref name="startWithLoremIpsum" /> is true and <paramref name="words" /> is less than five. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.RandomExtensions.NextTimeSpan(System.Random)">
            <summary>
                Gets a random time span value.
            </summary>
            <param name="randomizer"> The randomizer to use. </param>
            <returns>
                A random time span value between 0 (inclusive) and approx. 10'675'199 days (exclusive).
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.RandomExtensions.NextTimeSpan(System.Random,System.TimeSpan,System.TimeSpan)">
            <summary>
                Gets a random time span value.
            </summary>
            <param name="randomizer"> The randomizer to use. </param>
            <param name="min"> The allowed minimum time span (inclusive). </param>
            <param name="max"> The allowed maximum time span (exclusive). </param>
            <returns>
                A random time span value between <paramref name="min" /> (inclusive) and <paramref name="max" /> (exclusive).
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.RandomExtensions.NextTriangular(System.Random,System.Double,System.Double,System.Double)">
            <summary>
                Gets a triangular distributed random number.
            </summary>
            <param name="randomizer"> The randomizer to use. </param>
            <param name="min"> The allowed minimum value. </param>
            <param name="max"> The allowed maximum value. </param>
            <param name="mode"> The most frequent value. </param>
            <returns>
                A triangular distributed random double precision floating point value.
            </returns>
            <remarks>
                See <see href="https://en.wikipedia.org/wiki/Triangular_distribution"> https://en.wikipedia.org/wiki/Triangular_distribution </see> for details about the used algorithm.
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> is null. </exception>
            <exception cref="T:System.NotFiniteNumberException"> <paramref name="min" />, <paramref name="max" />, or <paramref name="mode" /> is either "NaN"/"Not-a-Number" or infinity (positive or negative). </exception>
        </member>
        <member name="M:RI.Framework.Utilities.RandomExtensions.Shuffle``1(System.Random,System.Collections.Generic.IList{``0})">
            <summary>
                Shuffles all items of a list randomly.
            </summary>
            <typeparam name="T"> The type of items in <paramref name="list" />. </typeparam>
            <param name="randomizer"> The randomizer to use. </param>
            <param name="list"> The list to be shuffled. </param>
            <returns>
                The number of shuffled items.
                Zero if the list contains no items.
            </returns>
            <remarks>
                <para>
                    Shuffling of items is done in-place, so during shuffling some items might appear twice in the list.
                </para>
                <para>
                    This is a O(n) operation where n is the number of items in <paramref name="list" />.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> or <paramref name="list" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.RandomExtensions.Shuffle``1(System.Random,System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
                Shuffles all items of a list, starting at a specified index, randomly.
            </summary>
            <typeparam name="T"> The type of items in <paramref name="list" />. </typeparam>
            <param name="randomizer"> The randomizer to use. </param>
            <param name="list"> The list to be shuffled. </param>
            <param name="index"> The index at which the shuffling starts. </param>
            <returns>
                The number of shuffled items.
                Zero if <paramref name="index" /> points to the end of the list (or is the same as the number of items in the list respectively).
            </returns>
            <remarks>
                <para>
                    Shuffling of items is done in-place, so during shuffling some items might appear twice in the list.
                </para>
                <para>
                    This is a O(n) operation where n is the number of items in <paramref name="list" /> minus <paramref name="index" />.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> or <paramref name="list" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="index" /> is less than zero or specifies an index outside the size of the list. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.RandomExtensions.Shuffle``1(System.Random,System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
                Shuffles items of a list in a specified range randomly.
            </summary>
            <typeparam name="T"> The type of items in <paramref name="list" />. </typeparam>
            <param name="randomizer"> The randomizer to use. </param>
            <param name="list"> The list to be shuffled. </param>
            <param name="index"> The index at which the shuffling starts. </param>
            <param name="count"> The number of items to shuffle, starting at <paramref name="index" />. </param>
            <returns>
                The number of shuffled items.
                Zero if <paramref name="count" /> is zero.
            </returns>
            <remarks>
                <para>
                    Shuffling of items is done in-place, so during shuffling some items might appear twice in the list.
                </para>
                <para>
                    This is a O(n) operation where n is <paramref name="count" />.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> or <paramref name="list" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="index" /> or <paramref name="count" /> is less than zero or specifies a range outside the size of the list. </exception>
        </member>
        <member name="T:RI.Framework.Utilities.Reflection.AssemblyExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.Reflection.Assembly" /> type.
            </summary>
        </member>
        <member name="M:RI.Framework.Utilities.Reflection.AssemblyExtensions.GetAssemblyVersion(System.Reflection.Assembly)">
            <summary>
                Gets the assembly version of an assembly.
            </summary>
            <param name="assembly"> The assembly. </param>
            <returns>
                The assembly version of the assembly or null if the version could not be determined.
            </returns>
            <remarks>
                <para>
                    The <see cref="T:System.Reflection.AssemblyVersionAttribute" /> is used to determine the assembly version of an assembly.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="assembly" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.Reflection.AssemblyExtensions.GetCompany(System.Reflection.Assembly)">
            <summary>
                Gets the company of an assembly.
            </summary>
            <param name="assembly"> The assembly. </param>
            <returns>
                The company of the assembly or null if the company could not be determined.
            </returns>
            <remarks>
                <para>
                    The <see cref="T:System.Reflection.AssemblyCompanyAttribute" /> is used to determine the company of an assembly.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="assembly" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.Reflection.AssemblyExtensions.GetCopyright(System.Reflection.Assembly)">
            <summary>
                Gets the copyright of an assembly.
            </summary>
            <param name="assembly"> The assembly. </param>
            <returns>
                The copyright of the assembly or null if the copyright could not be determined.
            </returns>
            <remarks>
                <para>
                    The <see cref="T:System.Reflection.AssemblyCopyrightAttribute" /> is used to determine the copyright of an assembly.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="assembly" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.Reflection.AssemblyExtensions.GetDescription(System.Reflection.Assembly)">
            <summary>
                Gets the description of an assembly.
            </summary>
            <param name="assembly"> The assembly. </param>
            <returns>
                The description of the assembly or null if the description could not be determined.
            </returns>
            <remarks>
                <para>
                    The <see cref="T:System.Reflection.AssemblyDescriptionAttribute" /> is used to determine the description of an assembly.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="assembly" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.Reflection.AssemblyExtensions.GetFile(System.Reflection.Assembly)">
            <summary>
                Gets the file of an assembly.
            </summary>
            <param name="assembly"> The assembly. </param>
            <returns>
                The file of the assembly or null if the file could not be determined.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="assembly" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.Reflection.AssemblyExtensions.GetFileVersion(System.Reflection.Assembly)">
            <summary>
                Gets the file version of an assembly.
            </summary>
            <param name="assembly"> The assembly. </param>
            <returns>
                The file version of the assembly or null if the version could not be determined.
            </returns>
            <remarks>
                <para>
                    The <see cref="T:System.Reflection.AssemblyFileVersionAttribute" /> is used to determine the file version of an assembly.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="assembly" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.Reflection.AssemblyExtensions.GetGuid(System.Reflection.Assembly,System.Boolean,System.Boolean)">
            <summary>
                Gets a GUID associated with an assembly.
            </summary>
            <param name="assembly"> The assembly. </param>
            <param name="ignoreGuidAttribute"> Specifies whether <see cref="T:System.Runtime.InteropServices.GuidAttribute" /> is ignored for determining the GUID of the assembly. </param>
            <param name="ignoreVersion"> Specifies whether the assemblies version should be ignored for determining the GUID of the assembly. </param>
            <returns>
                The GUID of the assembly.
            </returns>
            <remarks>
                <para>
                    If <paramref name="ignoreGuidAttribute" /> is false and the assembly has a <see cref="T:System.Runtime.InteropServices.GuidAttribute" />, the GUID from that attribute is returned.
                </para>
                <para>
                    If <paramref name="ignoreGuidAttribute" /> is true or <see cref="T:System.Runtime.InteropServices.GuidAttribute" /> is not defined, the following is used to calculate a GUID:
                    <see cref="P:System.Reflection.AssemblyName.Name" /> when <paramref name="ignoreVersion" /> is true, <see cref="P:System.Reflection.AssemblyName.FullName" /> otherwise.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="assembly" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.Reflection.AssemblyExtensions.GetInformationalVersion(System.Reflection.Assembly)">
            <summary>
                Gets the informational version of an assembly.
            </summary>
            <param name="assembly"> The assembly. </param>
            <returns>
                The informational version of the assembly or null if the version could not be determined.
            </returns>
            <remarks>
                <para>
                    The <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute" /> is used to determine the informational version of an assembly.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="assembly" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.Reflection.AssemblyExtensions.GetProduct(System.Reflection.Assembly)">
            <summary>
                Gets the product name of an assembly.
            </summary>
            <param name="assembly"> The assembly. </param>
            <returns>
                The product name of the assembly or null if the product name could not be determined.
            </returns>
            <remarks>
                <para>
                    The <see cref="T:System.Reflection.AssemblyProductAttribute" /> is used to determine the product name of an assembly.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="assembly" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.Reflection.AssemblyExtensions.GetTitle(System.Reflection.Assembly)">
            <summary>
                Gets the title of an assembly.
            </summary>
            <param name="assembly"> The assembly. </param>
            <returns>
                The title of the assembly or null if the title could not be determined.
            </returns>
            <remarks>
                <para>
                    The <see cref="T:System.Reflection.AssemblyTitleAttribute" /> is used to determine the title of an assembly.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="assembly" /> is null. </exception>
        </member>
        <member name="T:RI.Framework.Utilities.Reflection.TypeExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.Type" /> type.
            </summary>
        </member>
        <member name="M:RI.Framework.Utilities.Reflection.TypeExtensions.GetInheritance(System.Type,System.Boolean)">
            <summary>
                Gets all types the specified type inherits from.
            </summary>
            <param name="type"> The type of which the inheritance list should be returned. </param>
            <param name="includeSelf"> Specifies whether <paramref name="type" /> is also included in the returned inheritance list. </param>
            <returns>
                The list with all types <paramref name="type" /> inherits from.
                The list is empty if the type is <see cref="T:System.Object" /> and <paramref name="includeSelf" /> is false.
                The list starts with the root type of the inheritance, which is always <see cref="T:System.Object" />.
            </returns>
            <remarks>
                <note type="note">
                    The returned inheritance list does only contain base classes but not interfaces.
                </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="type" /> is null. </exception>
        </member>
        <member name="T:RI.Framework.Utilities.Reflection.NamespaceDoc">
            <summary>
                Contains utilities for reflection.
            </summary>
        </member>
        <member name="T:RI.Framework.Utilities.StringExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.String" /> type.
            </summary>
            <remarks>
                <para>
                    Note that some of the functionality provided by this class is rather specialized and intended to be used for certain string parsing/processing purposes.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
                Determines whether a specified string occurs in a string.
            </summary>
            <param name="str"> The string. </param>
            <param name="value"> The string to find in the string. </param>
            <param name="comparisonType"> The string comparison used to find the string. </param>
            <returns>
                true if <paramref name="value" /> is an empty string or it occurs at least once in the string, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> or <paramref name="value" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.ContainsWhitespace(System.String)">
            <summary>
                Determines whether a specified string contains any whitespace characters.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                true if the string contains any whistespace characters, false otherwise.
                If the string has a length of zero, false is returned.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.DoubleOccurrence(System.String,System.Char)">
            <summary>
                Doubles each occurence of a specified character in a string.
            </summary>
            <param name="str"> The string. </param>
            <param name="chr"> The character of which each occurence is doubled. </param>
            <returns>
                The resulting string with each specified character occurence doubled.
            </returns>
            <remarks>
                <para>
                    Doubling occurrences is done on a per-character basis and case-sensitive.
                </para>
                <para>
                    For example, when doubling the occurence for 'A', the string "" results in "", "A" in "AA", "AA" in "AAAA", "ABC" in "AABC", etc.
                </para>
                <para>
                    This is the same as using <see cref="M:RI.Framework.Utilities.StringExtensions.ModifyOccurrence(System.String,System.Char,System.Double,System.Int32)" /> with a factor of 2.0 and offset of 0.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.EndsWithCount(System.String,System.Char,System.StringComparison)">
            <summary>
                Counts how many times a string ends with a specified character.
            </summary>
            <param name="str"> The string. </param>
            <param name="value"> The character to count when occuring at the end of the string. </param>
            <param name="comparisonType"> The string comparison used to find the character. </param>
            <returns>
                The number of times the specified character appears in succession at the end of the string.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.EndsWithCount(System.String,System.String,System.StringComparison)">
            <summary>
                Counts how many times a string ends with a specified string.
            </summary>
            <param name="str"> The string. </param>
            <param name="value"> The string to count when occuring at the end of the string. </param>
            <param name="comparisonType"> The string comparison used to find the string. </param>
            <returns>
                The number of times the specified string appears in succession at the end of the string.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> or <paramref name="value" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="value" /> is a string with zero length. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.Escape(System.String)">
            <summary>
                Converts a string into another string where certain special characters are converted to escape sequences.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The resulting string with special characters converted to escape sequences.
            </returns>
            <remarks>
                <para>
                    An escape sequence always starts with \ followed by a single character specifying the escape sequence, e.g. \n for new-line.
                </para>
                <para>
                    The following special characters are escaped: \a, \b, \f, \n, \r, \t, \v, \, ', ".
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.HalveOccurrence(System.String,System.Char)">
            <summary>
                Halves each occurence of a specified character in a string.
            </summary>
            <param name="str"> The string. </param>
            <param name="chr"> The character of which each occurence is halved. </param>
            <returns>
                The resulting string with each specified character occurrence halved.
            </returns>
            <remarks>
                <para>
                    Halving occurrences is done on a per-character basis and case-sensitive.
                </para>
                <para>
                    For example, when halving the occurence for 'A', the string "" results in "", "A" in "", "AA" results in "A", "AAA" in "A", "AAAA" in "AA", "ABC" in "BC", etc.
                </para>
                <para>
                    This is the same as using <see cref="M:RI.Framework.Utilities.StringExtensions.ModifyOccurrence(System.String,System.Char,System.Double,System.Int32)" /> with a factor of 0.5 and offset of 0.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.IsEmpty(System.String)">
            <summary>
                Determines whether a string is empty.
            </summary>
            <param name="str"> The string </param>
            <returns>
                true if the string is empty, false otherwise.
            </returns>
            <remarks>
                <para>
                    A string is considered empty if has a length of zero or contains only whitespaces.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.Join(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Joins a sequence of strings together into one string without a separator between each string element.
            </summary>
            <param name="values"> The sequence of strings to join together </param>
            <returns>
                The resulting string with each string element concatenated to the next.
                The resulting string has a length of zero if the sequence contains no string elements or only string elements of zero length.
            </returns>
            <remarks>
                <para>
                    <paramref name="values" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.Join(System.Collections.Generic.IEnumerable{System.String},System.Char)">
            <summary>
                Joins a sequence of strings together into one string with a specified separator character between each string element.
            </summary>
            <param name="values"> The sequence of strings to join together </param>
            <param name="separator"> The used separator character. </param>
            <returns>
                The resulting string with each string element concatenated to the next, separated by the specified separator character.
                The resulting string has a length of zero if the sequence contains no string elements or only string elements of zero length.
            </returns>
            <remarks>
                <para>
                    <paramref name="values" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.Join(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
                Joins a sequence of strings together into one string with a specified separator string between each string element.
            </summary>
            <param name="values"> The sequence of strings to join together </param>
            <param name="separator"> The used separator string. Can be null or <see cref="T:System.String" />.<see cref="F:System.String.Empty" /> if no separator should be used. </param>
            <returns>
                The resulting string with each string element concatenated to the next, separated by the specified separator string.
                The resulting string has a length of zero if the sequence contains no string elements or only string elements of zero length.
            </returns>
            <remarks>
                <para>
                    <paramref name="values" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.ModifyOccurrence(System.String,System.Char,System.Double,System.Int32)">
            <summary>
                Modifies each occurence of a specified character in a string by a specified factor and/or offset.
            </summary>
            <param name="str"> The string. </param>
            <param name="chr"> The character of which each occurence is modified. </param>
            <param name="factor"> The factor used by which each occurence is modified. </param>
            <param name="offset"> The offset used by which each occurence is modified. </param>
            <returns>
                The resulting string with each specified character occurence modified.
            </returns>
            <remarks>
                <para>
                    Modifying occurrences is done on a per-character basis and case-sensitive.
                </para>
                <para>
                    Example with <paramref name="factor" /> of 3.0 and <paramref name="offset" /> of 0 for the character 'A': "" -> "", "A" -> "AAA", "AA" -> "AAAAAA", "AAA" -> "AAAAAAAAA", "ABC" -> "AAABC", etc.
                    Example with <paramref name="factor" /> of 0.0 and <paramref name="offset" /> of 1 for the character 'A': "" -> "", "A" -> "AA", "AA" -> "AAA", "AAAA" -> "AAAAA",  "ABC" -> "AABC", etc.
                </para>
                <para>
                    If <paramref name="factor" /> both and <paramref name="offset" /> are used (<paramref name="factor" /> not 1.0 and <paramref name="offset" /> not 0), the resulting character count is ((original count * <paramref name="factor" />) + <paramref name="offset" />).
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.NotFiniteArgumentException"> <paramref name="factor" /> is "NaN"/"Not-a-Number" or infinity (either positive or negative). </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.NormalizeLineBreaks(System.String)">
            <summary>
                Normalizes all line breaks in a string.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The string with all its line breaks normalized.
            </returns>
            <remarks>
                <para>
                    Normalizing line breaks means that all <c> CRLF </c>, <c> CR </c>, and <c> LF </c> are replaced with the value of <see cref="P:System.Environment.NewLine" />.
                </para>
                <note type="important">
                    Be aware that normalization of line breaks destroys all carriage returns (<c> CR </c>) which are not part of a line break!
                </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.Repeat(System.Char,System.Int32)">
            <summary>
                Repeats a character a specified number of times without a separator between each character.
            </summary>
            <param name="chr"> The character. </param>
            <param name="count"> The number of times the character is repeated. </param>
            <returns>
                The resulting string with the repeated character.
                If <paramref name="count" /> is zero, the resulting string has a length of zero.
                If <paramref name="count" /> is one, the resulting string consists only of the specified character.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="count" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.Repeat(System.Char,System.Int32,System.Char)">
            <summary>
                Repeats a character a specified number of times with a specified separator between each character.
            </summary>
            <param name="chr"> The character. </param>
            <param name="count"> The number of times the character is repeated. </param>
            <param name="separator"> The used separator. </param>
            <returns>
                The resulting string with the repeated character.
                If <paramref name="count" /> is zero, the resulting string has a length of zero.
                If <paramref name="count" /> is one, the resulting string consists only of the specified character.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="count" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.Repeat(System.Char,System.Int32,System.String)">
            <summary>
                Repeats a character a specified number of times with a specified separator between each character.
            </summary>
            <param name="chr"> The character. </param>
            <param name="count"> The number of times the character is repeated. </param>
            <param name="separator"> The used separator. Can be null or <see cref="T:System.String" />.<see cref="F:System.String.Empty" /> if no separator should be used. </param>
            <returns>
                The resulting string with the repeated character.
                If <paramref name="count" /> is zero, the resulting string has a length of zero.
                If <paramref name="count" /> is one, the resulting string consists only of the specified character.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="count" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.Repeat(System.String,System.Int32)">
            <summary>
                Repeats a string a specified number of times without a separator between each string.
            </summary>
            <param name="str"> The string. </param>
            <param name="count"> The number of times the string is repeated. </param>
            <returns>
                The resulting string with the repeated string.
                If <paramref name="count" /> is zero, the resulting string has a length of zero.
                If <paramref name="count" /> is one, the resulting string consists only of the specified string.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="count" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.Repeat(System.String,System.Int32,System.Char)">
            <summary>
                Repeats a string a specified number of times with a specified separator between each string.
            </summary>
            <param name="str"> The string. </param>
            <param name="count"> The number of times the string is repeated. </param>
            <param name="separator"> The used separator. </param>
            <returns>
                The resulting string with the repeated string.
                If <paramref name="count" /> is zero, the resulting string has a length of zero.
                If <paramref name="count" /> is one, the resulting string consists only of the specified string.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="count" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.Repeat(System.String,System.Int32,System.String)">
            <summary>
                Repeats a string a specified number of times with a specified separator between each string.
            </summary>
            <param name="str"> The string. </param>
            <param name="count"> The number of times the string is repeated. </param>
            <param name="separator"> The used separator. Can be null or <see cref="T:System.String" />.<see cref="F:System.String.Empty" /> if no separator should be used. </param>
            <returns>
                The resulting string with the repeated string.
                If <paramref name="count" /> is zero, the resulting string has a length of zero.
                If <paramref name="count" /> is one, the resulting string consists only of the specified string.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="count" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.ReplaceSingleStart(System.String,System.String,System.String,System.StringComparison)">
            <summary>
                Searchs a specified token in a string and replaces its occurence with a specified replacement, but only if the last character in the string, before a found token begins, is not the same as the first character of the specified token.
            </summary>
            <param name="str"> The string. </param>
            <param name="token"> The token to find and replace. </param>
            <param name="replacement"> The replacement for each found token. </param>
            <param name="comparisonType"> The string comparison used to find the token. </param>
            <returns>
                The resulting string where each token is replaced by the replacement.
            </returns>
            <remarks>
                <para>
                    The replacement only happens if the character before a found token is not the same as the first character of the token.
                    For example, when using "|x" as token and "X" as replacement, the string "ab|xcd" becomes "abXcd" but the string "ab||xcd" remains unchanged.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" />, <paramref name="token" />, or <paramref name="replacement" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.Split(System.String,System.StringSplitOptions,System.Char[])">
            <summary>
                Splits a string into pieces at each of the specified characters, excluding the characters from the resulting pieces.
            </summary>
            <param name="str"> The string. </param>
            <param name="options"> The splitting options. </param>
            <param name="separator"> Zero, one, or more characters at which the string is split. </param>
            <returns>
                The array of string pieces.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.Split(System.String,System.String[])">
            <summary>
                Splits a string into pieces at each of the specified strings, excluding the strings from the resulting pieces.
            </summary>
            <param name="str"> The string. </param>
            <param name="separator"> Zero, one, or more strings at which the string is split. </param>
            <returns>
                The array of string pieces.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.Split(System.String,System.StringSplitOptions,System.String[])">
            <summary>
                Splits a string into pieces at each of the specified strings, excluding the strings from the resulting pieces.
            </summary>
            <param name="str"> The string. </param>
            <param name="options"> The splitting options. </param>
            <param name="separator"> Zero, one, or more strings at which the string is split. </param>
            <returns>
                The array of string pieces.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.SplitLines(System.String)">
            <summary>
                Splits a string into an array of strings at each line break.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The array of strings containing each line of the original string as a separate element.
            </returns>
            <remarks>
                <para>
                    Both CRLF and LF or \r\n and \n respectively are considered line breaks.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.SplitLines(System.String,System.StringSplitOptions)">
            <summary>
                Splits a string into an array of strings at each line break.
            </summary>
            <param name="str"> The string. </param>
            <param name="options"> The splitting options. </param>
            <returns>
                The array of strings containing each line of the original string as a separate element.
            </returns>
            <remarks>
                <para>
                    Both CRLF and LF or \r\n and \n respectively are considered line breaks.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.SplitWhere(System.String,RI.Framework.Utilities.StringSplitPredicate)">
            <summary>
                Splits a string into pieces at positions determined by a specified predicate function.
            </summary>
            <param name="str"> The string. </param>
            <param name="predicate"> The function which determines at which positions a string is splitted. </param>
            <returns>
                The array of string pieces.
                If the specified predicate function never indicates a split position (never returns true), the array has only one element, equal to <paramref name="str" />.
            </returns>
            <remarks>
                <para>
                    For more details about how to use the predicate function, see <see cref="T:RI.Framework.Utilities.StringSplitPredicate" />.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> or <paramref name="predicate" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.SplitWhere(System.String,System.StringSplitOptions,RI.Framework.Utilities.StringSplitPredicate)">
            <summary>
                Splits a string into pieces at positions determined by a specified predicate function.
            </summary>
            <param name="str"> The string. </param>
            <param name="options"> The splitting options. </param>
            <param name="predicate"> The function which determines at which positions a string is splitted. </param>
            <returns>
                The array of string pieces.
                If the specified predicate function never indicates a split position (never returns true), the array has only one element, equal to <paramref name="str" />.
            </returns>
            <remarks>
                <para>
                    For more details about how to use the predicate function, see <see cref="T:RI.Framework.Utilities.StringSplitPredicate" />.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> or <paramref name="predicate" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.StartsWithCount(System.String,System.Char,System.StringComparison)">
            <summary>
                Counts how many times a string starts with a specified character.
            </summary>
            <param name="str"> The string. </param>
            <param name="value"> The character to count when occuring at the start of the string. </param>
            <param name="comparisonType"> The string comparison used to find the character. </param>
            <returns>
                The number of times the specified character appears in succession at the start of the string.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.StartsWithCount(System.String,System.String,System.StringComparison)">
            <summary>
                Counts how many times a string starts with a specified string.
            </summary>
            <param name="str"> The string. </param>
            <param name="value"> The string to count when occuring at the start of the string. </param>
            <param name="comparisonType"> The string comparison used to find the string. </param>
            <returns>
                The number of times the specified string appears in succession at the start of the string.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> or <paramref name="value" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="value" /> is a string with zero length. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.ToBoolean(System.String)">
            <summary>
                Attempts to convert a string into a boolean.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The boolean value represented by the string (true or false) if the string can be converted into a boolean, null otherwise.
            </returns>
            <remarks>
                <para>
                    The following strings will return true: &quot;true&quot;, &quot;yes&quot;, &quot;1&quot;, &quot;on&quot;.
                </para>
                <para>
                    The following strings will return false: &quot;false&quot;, &quot;no&quot;, &quot;0&quot;, &quot;off&quot;.
                </para>
                <para>
                    Any other string will return null.
                </para>
                <para>
                    The conversion is case-insensitive. Whitespace is not ignored and must be trimmed before if necessary (e.g. using <see cref="M:System.String.Trim" />).
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.ToByte(System.String)">
            <summary>
                Attempts to convert a string into an unsigned byte value.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The unsigned byte value represented by the string if the string can be converted into an unsigned byte, null otherwise.
            </returns>
            <remarks>
                <para>
                    <see cref="T:System.Globalization.NumberStyles" />.<see cref="F:System.Globalization.NumberStyles.Any" /> and <see cref="T:System.Globalization.CultureInfo" />.<see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> are used for parsing.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.ToByte(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
                Attempts to convert a string into an unsigned byte value.
            </summary>
            <param name="str"> The string. </param>
            <param name="style"> The number styles which are to be expected in the string. </param>
            <param name="provider"> An object that supplies culture-specific formatting information for parsing the string. Can be null to use the current threads culture. </param>
            <returns>
                The unsigned byte value represented by the string if the string can be converted into an unsigned byte, null otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.ToByteInvariant(System.String)">
            <summary>
                Attempts to convert a string into an unsigned byte value.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The unsigned byte value represented by the string if the string can be converted into an unsigned byte, null otherwise.
            </returns>
            <remarks>
                <para>
                    <see cref="T:System.Globalization.NumberStyles" />.<see cref="F:System.Globalization.NumberStyles.Any" /> and <see cref="T:System.Globalization.CultureInfo" />.<see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> are used for parsing.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.ToDateTimeFromSortable(System.String)">
            <summary>
                Attempts to convert a string into a date and time.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The date and time represented by the string if the string is a date and time as produced by <see cref="M:RI.Framework.Utilities.DateTimeExtensions.ToSortableString(System.DateTime)" />, null otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.ToDateTimeFromSortable(System.String,System.Char)">
            <summary>
                Attempts to convert a string into a date and time.
            </summary>
            <param name="str"> The string. </param>
            <param name="separator"> The expected separator between each unit of the date and time. </param>
            <returns>
                The date and time represented by the string if the string is a date and time as produced by <see cref="M:RI.Framework.Utilities.DateTimeExtensions.ToSortableString(System.DateTime,System.Char)" />, null otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.ToDateTimeFromSortable(System.String,System.String)">
            <summary>
                Attempts to convert a string into a date and time.
            </summary>
            <param name="str"> The string. </param>
            <param name="separator"> The expected separator between each unit of the date and time. </param>
            <returns>
                The date and time represented by the string if the string is a date and time as produced by <see cref="M:RI.Framework.Utilities.DateTimeExtensions.ToSortableString(System.DateTime,System.String)" />, null otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.ToDouble(System.String)">
            <summary>
                Attempts to convert a string into double precision floating point value.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The double precision floating point value represented by the string if the string can be converted into a floating point, null otherwise.
            </returns>
            <remarks>
                <para>
                    <see cref="T:System.Globalization.NumberStyles" />.<see cref="F:System.Globalization.NumberStyles.Any" /> and <see cref="T:System.Globalization.CultureInfo" />.<see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> are used for parsing.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.ToDouble(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
                Attempts to convert a string into double precision floating point value.
            </summary>
            <param name="str"> The string. </param>
            <param name="style"> The number styles which are to be expected in the string. </param>
            <param name="provider"> An object that supplies culture-specific formatting information for parsing the string. Can be null to use the current threads culture. </param>
            <returns>
                The double precision floating point value represented by the string if the string can be converted into a floating point, null otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.ToDoubleInvariant(System.String)">
            <summary>
                Attempts to convert a string into double precision floating point value.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The double precision floating point value represented by the string if the string can be converted into a floating point, null otherwise.
            </returns>
            <remarks>
                <para>
                    <see cref="T:System.Globalization.NumberStyles" />.<see cref="F:System.Globalization.NumberStyles.Any" /> and <see cref="T:System.Globalization.CultureInfo" />.<see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> are used for parsing.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.ToEnum(System.String,System.Type)">
            <summary>
                Attempts to convert a string into a specified enumeration type.
            </summary>
            <param name="str"> The string. </param>
            <param name="enumType"> The enumeration type. </param>
            <returns>
                The enumeration value represented by the string if the string can be converted into the specified enumeration type, null otherwise.
            </returns>
            <remarks>
                <note type="note">
                    This method is considered very slow.
                </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> or <paramref name="enumType" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.NotAnEnumerationArgumentException"> <paramref name="enumType" /> is not an enumeration type. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.ToEnum``1(System.String)">
            <summary>
                Attempts to convert a string into a specified enumeration type.
            </summary>
            <typeparam name="T"> The enumeration type. </typeparam>
            <param name="str"> The string. </param>
            <returns>
                The enumeration value represented by the string if the string can be converted into the specified enumeration type, null otherwise.
            </returns>
            <remarks>
                <note type="note">
                    This method is considered very slow.
                </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
            <exception cref="T:RI.Framework.Utilities.Exceptions.NotAnEnumerationArgumentException"> <typeparamref name="T" /> is not an enumeration type. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.ToFloat(System.String)">
            <summary>
                Attempts to convert a string into single precision floating point value.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The single precision floating point value represented by the string if the string can be converted into a floating point, null otherwise.
            </returns>
            <remarks>
                <para>
                    <see cref="T:System.Globalization.NumberStyles" />.<see cref="F:System.Globalization.NumberStyles.Any" /> and <see cref="T:System.Globalization.CultureInfo" />.<see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> are used for parsing.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.ToFloat(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
                Attempts to convert a string into single precision floating point value.
            </summary>
            <param name="str"> The string. </param>
            <param name="style"> The number styles which are to be expected in the string. </param>
            <param name="provider"> An object that supplies culture-specific formatting information for parsing the string. Can be null to use the current threads culture. </param>
            <returns>
                The single precision floating point value represented by the string if the string can be converted into a floating point, null otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.ToFloatInvariant(System.String)">
            <summary>
                Attempts to convert a string into single precision floating point value.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The single precision floating point value represented by the string if the string can be converted into a floating point, null otherwise.
            </returns>
            <remarks>
                <para>
                    <see cref="T:System.Globalization.NumberStyles" />.<see cref="F:System.Globalization.NumberStyles.Any" /> and <see cref="T:System.Globalization.CultureInfo" />.<see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> are used for parsing.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.ToGuid(System.String)">
            <summary>
                Attempts to convert a string into a <see cref="T:System.Guid" /> value.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The <see cref="T:System.Guid" /> value represented by the string if the string can be converted into a <see cref="T:System.Guid" />, null otherwise.
            </returns>
            <remarks>
                <note type="note">
                    This method is considered very slow.
                </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.ToInt16(System.String)">
            <summary>
                Attempts to convert a string into a signed short.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The signed short value represented by the string if the string can be converted into a signed short, null otherwise.
            </returns>
            <remarks>
                <para>
                    <see cref="T:System.Globalization.NumberStyles" />.<see cref="F:System.Globalization.NumberStyles.Any" /> and <see cref="T:System.Globalization.CultureInfo" />.<see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> are used for parsing.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.ToInt16(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
                Attempts to convert a string into a signed short.
            </summary>
            <param name="str"> The string. </param>
            <param name="style"> The number styles which are to be expected in the string. </param>
            <param name="provider"> An object that supplies culture-specific formatting information for parsing the string. Can be null to use the current threads culture. </param>
            <returns>
                The signed short value represented by the string if the string can be converted into a signed short, null otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.ToInt16Invariant(System.String)">
            <summary>
                Attempts to convert a string into a signed short.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The signed short value represented by the string if the string can be converted into a signed short, null otherwise.
            </returns>
            <remarks>
                <para>
                    <see cref="T:System.Globalization.NumberStyles" />.<see cref="F:System.Globalization.NumberStyles.Any" /> and <see cref="T:System.Globalization.CultureInfo" />.<see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> are used for parsing.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.ToInt32(System.String)">
            <summary>
                Attempts to convert a string into a signed int.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The signed int value represented by the string if the string can be converted into a signed int, null otherwise.
            </returns>
            <remarks>
                <para>
                    <see cref="T:System.Globalization.NumberStyles" />.<see cref="F:System.Globalization.NumberStyles.Any" /> and <see cref="T:System.Globalization.CultureInfo" />.<see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> are used for parsing.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.ToInt32(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
                Attempts to convert a string into a signed int.
            </summary>
            <param name="str"> The string. </param>
            <param name="style"> The number styles which are to be expected in the string. </param>
            <param name="provider"> An object that supplies culture-specific formatting information for parsing the string. Can be null to use the current threads culture. </param>
            <returns>
                The signed int value represented by the string if the string can be converted into a signed int, null otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.ToInt32Invariant(System.String)">
            <summary>
                Attempts to convert a string into a signed int.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The signed int value represented by the string if the string can be converted into a signed int, null otherwise.
            </returns>
            <remarks>
                <para>
                    <see cref="T:System.Globalization.NumberStyles" />.<see cref="F:System.Globalization.NumberStyles.Any" /> and <see cref="T:System.Globalization.CultureInfo" />.<see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> are used for parsing.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.ToInt64(System.String)">
            <summary>
                Attempts to convert a string into a signed long.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The signed long value represented by the string if the string can be converted into a signed long, null otherwise.
            </returns>
            <remarks>
                <para>
                    <see cref="T:System.Globalization.NumberStyles" />.<see cref="F:System.Globalization.NumberStyles.Any" /> and <see cref="T:System.Globalization.CultureInfo" />.<see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> are used for parsing.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.ToInt64(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
                Attempts to convert a string into a signed long.
            </summary>
            <param name="str"> The string. </param>
            <param name="style"> The number styles which are to be expected in the string. </param>
            <param name="provider"> An object that supplies culture-specific formatting information for parsing the string. Can be null to use the current threads culture. </param>
            <returns>
                The signed long value represented by the string if the string can be converted into a signed long, null otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.ToInt64Invariant(System.String)">
            <summary>
                Attempts to convert a string into a signed long.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The signed long value represented by the string if the string can be converted into a signed long, null otherwise.
            </returns>
            <remarks>
                <see cref="T:System.Globalization.NumberStyles" />.<see cref="F:System.Globalization.NumberStyles.Any" /> and <see cref="T:System.Globalization.CultureInfo" />.<see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> are used for parsing.
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.ToSByte(System.String)">
            <summary>
                Attempts to convert a string into a signed byte value.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The signed byte value represented by the string if the string can be converted into a signed byte, null otherwise.
            </returns>
            <remarks>
                <para>
                    <see cref="T:System.Globalization.NumberStyles" />.<see cref="F:System.Globalization.NumberStyles.Any" /> and <see cref="T:System.Globalization.CultureInfo" />.<see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> are used for parsing.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.ToSByte(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
                Attempts to convert a string into a signed byte value.
            </summary>
            <param name="str"> The string. </param>
            <param name="style"> The number styles which are to be expected in the string. </param>
            <param name="provider"> An object that supplies culture-specific formatting information for parsing the string. Can be null to use the current threads culture. </param>
            <returns>
                The signed byte value represented by the string if the string can be converted into a signed byte, null otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.ToSByteInvariant(System.String)">
            <summary>
                Attempts to convert a string into a signed byte value.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The signed byte value represented by the string if the string can be converted into a signed byte, null otherwise.
            </returns>
            <remarks>
                <para>
                    <see cref="T:System.Globalization.NumberStyles" />.<see cref="F:System.Globalization.NumberStyles.Any" /> and <see cref="T:System.Globalization.CultureInfo" />.<see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> are used for parsing.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.ToUInt16(System.String)">
            <summary>
                Attempts to convert a string into an unsigned short.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The unsigned short value represented by the string if the string can be converted into an unsigned short, null otherwise.
            </returns>
            <remarks>
                <para>
                    <see cref="T:System.Globalization.NumberStyles" />.<see cref="F:System.Globalization.NumberStyles.Any" /> and <see cref="T:System.Globalization.CultureInfo" />.<see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> are used for parsing.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.ToUInt16(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
                Attempts to convert a string into an unsigned short.
            </summary>
            <param name="str"> The string. </param>
            <param name="style"> The number styles which are to be expected in the string. </param>
            <param name="provider"> An object that supplies culture-specific formatting information for parsing the string. Can be null to use the current threads culture. </param>
            <returns>
                The unsigned short value represented by the string if the string can be converted into an unsigned short, null otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.ToUInt16Invariant(System.String)">
            <summary>
                Attempts to convert a string into an unsigned short.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The unsigned short value represented by the string if the string can be converted into an unsigned short, null otherwise.
            </returns>
            <remarks>
                <para>
                    <see cref="T:System.Globalization.NumberStyles" />.<see cref="F:System.Globalization.NumberStyles.Any" /> and <see cref="T:System.Globalization.CultureInfo" />.<see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> are used for parsing.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.ToUInt32(System.String)">
            <summary>
                Attempts to convert a string into an unsigned int.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The unsigned int value represented by the string if the string can be converted into an unsigned int, null otherwise.
            </returns>
            <remarks>
                <para>
                    <see cref="T:System.Globalization.NumberStyles" />.<see cref="F:System.Globalization.NumberStyles.Any" /> and <see cref="T:System.Globalization.CultureInfo" />.<see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> are used for parsing.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.ToUInt32(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
                Attempts to convert a string into an unsigned int.
            </summary>
            <param name="str"> The string. </param>
            <param name="style"> The number styles which are to be expected in the string. </param>
            <param name="provider"> An object that supplies culture-specific formatting information for parsing the string. Can be null to use the current threads culture. </param>
            <returns>
                The unsigned int value represented by the string if the string can be converted into an unsigned int, null otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.ToUInt32Invariant(System.String)">
            <summary>
                Attempts to convert a string into an unsigned int.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The unsigned int value represented by the string if the string can be converted into an unsigned int, null otherwise.
            </returns>
            <remarks>
                <para>
                    <see cref="T:System.Globalization.NumberStyles" />.<see cref="F:System.Globalization.NumberStyles.Any" /> and <see cref="T:System.Globalization.CultureInfo" />.<see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> are used for parsing.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.ToUInt64(System.String)">
            <summary>
                Attempts to convert a string into an unsigned long.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The unsigned long value represented by the string if the string can be converted into an unsigned long, null otherwise.
            </returns>
            <remarks>
                <para>
                    <see cref="T:System.Globalization.NumberStyles" />.<see cref="F:System.Globalization.NumberStyles.Any" /> and <see cref="T:System.Globalization.CultureInfo" />.<see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> are used for parsing.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.ToUInt64(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
                Attempts to convert a string into an unsigned long.
            </summary>
            <param name="str"> The string. </param>
            <param name="style"> The number styles which are to be expected in the string. </param>
            <param name="provider"> An object that supplies culture-specific formatting information for parsing the string. Can be null to use the current threads culture. </param>
            <returns>
                The unsigned long value represented by the string if the string can be converted into an unsigned long, null otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.ToUInt64Invariant(System.String)">
            <summary>
                Attempts to convert a string into an unsigned long.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The unsigned long value represented by the string if the string can be converted into an unsigned long, null otherwise.
            </returns>
            <remarks>
                <para>
                    <see cref="T:System.Globalization.NumberStyles" />.<see cref="F:System.Globalization.NumberStyles.Any" /> and <see cref="T:System.Globalization.CultureInfo" />.<see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> are used for parsing.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.ToVersion(System.String)">
            <summary>
                Attempts to convert a string into a <see cref="T:System.Version" /> value.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The <see cref="T:System.Version" /> value represented by the string if the string can be converted into a <see cref="T:System.Version" />, null otherwise.
            </returns>
            <remarks>
                <note type="note">
                    This method is considered very slow.
                </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.StringExtensions.Unescape(System.String)">
            <summary>
                Converts a string into another string where escape sequences are converted back to certain special characters.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The resulting string with escape sequences converted back to special characters.
            </returns>
            <remarks>
                <para>
                    An escape sequence always starts with \ followed by a single character specifying the escape sequence, e.g. \n for new-line.
                </para>
                <para>
                    The following special characters are un-escaped: \a, \b, \f, \n, \r, \t, \v, \, ', ".
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="T:RI.Framework.Utilities.StringSplitPredicate">
            <summary>
                Defines a delegate which can be used with the <see cref="T:RI.Framework.Utilities.StringExtensions" />.<see cref="M:RI.Framework.Utilities.StringExtensions.SplitWhere(System.String,System.StringSplitOptions,RI.Framework.Utilities.StringSplitPredicate)" /> and <see cref="T:RI.Framework.Utilities.StringExtensions" />.<see cref="M:RI.Framework.Utilities.StringExtensions.SplitWhere(System.String,RI.Framework.Utilities.StringSplitPredicate)" /> method to implement custom splitting of strings by testing between each character of the string whether it is a split position.
            </summary>
            <param name="str"> The whole string which is being splitted. </param>
            <param name="currentToken"> The current token, which is the string starting at the last split position up to and including the index specified by <paramref name="previous" />. </param>
            <param name="previous"> The index of the previous character. </param>
            <param name="next"> The index of the next character. </param>
            <returns>
                true if a split position between <paramref name="previous" /> and <paramref name="next" /> has been found.
            </returns>
            <remarks>
                <para>
                    Split testing always happens between characters so that when a split position is found (the return value of <see cref="T:RI.Framework.Utilities.StringSplitPredicate" /> is true), the character at the index <paramref name="previous" /> goes into the previous token while the character at the index <paramref name="next" /> goes into the next token.
                </para>
                <para>
                    <see cref="T:RI.Framework.Utilities.StringSplitPredicate" /> is called before the first character, between each following character, and after the last character of a string to test whether to split the string at that position.
                    Therefore, before the first character, <paramref name="previous" /> is -1 and <paramref name="next" /> is 0, after the first character <paramref name="previous" /> is 0 and <paramref name="next" /> is 1, and so forth, and after the last character <paramref name="previous" /> is n-1 and <paramref name="next" /> is n where n is the length of the string.
                </para>
            </remarks>
        </member>
        <member name="T:RI.Framework.Utilities.Text.CommandLine">
            <summary>
                Used to parse and/or build command line strings including executable, parameters, and/or literals.
            </summary>
            <remarks>
                <para>
                    A command line consists of the following: <c> [executable] [parameter 1 [parameter 2] ... [parameter n]] [literal 1 [literal 2] ... [literal n]]. </c>
                </para>
                <para>
                    Example 1: <c> myprogram.exe -name1=value1 literal1 literal2 </c>
                </para>
                <para>
                    Example 2: <c> &quot;d:\my folder\my program.exe&quot; -name1=&quot;Some value with whitespace and \&quot;quotes\&quot;&quot; SomeLiteral &quot;Another literal&quot; </c>
                </para>
                <para>
                    A command line can have:
                    Zero or one executable.
                    Zero, one, or multiple parameters.
                    Zero, one, or multiple literals.
                </para>
                <para>
                    If an executable is used, it is always at the beginning of the command line.
                    An executable supports whitespaces when wrapped in quotes.
                </para>
                <para>
                    Parameters are always name/value pairs which start with a minus sign and which separates the name and the value with an equal sign.
                    A parameter name and value supports whitespaces and quotes when wrapped in quotes, where the quotes need to be escaped.
                    Note that parameters can also consist of only the name, e.g. <c> -name </c>, without the equal sign or any value.
                </para>
                <para>
                    Literals are just a list of strings (e.g. a list of files).
                    A literal supports whitespaces and quotes when wrapped in quotes, where the quotes need to be escaped.
                </para>
                <para>
                    When parsing command lines, the order of parameters and literals does not matter, they can be mixed as needed.
                </para>
            </remarks>
            TODO: Example
        </member>
        <member name="M:RI.Framework.Utilities.Text.CommandLine.Parse(System.String,System.Boolean)">
            <summary>
                Parses a command line string and returns a <see cref="T:RI.Framework.Utilities.Text.CommandLine" /> object for it.
            </summary>
            <param name="commandLine"> The command line string to parse. </param>
            <param name="startsWithExecutable"> Indicates whether the command line string starts with an executable. </param>
            <returns>
                The <see cref="T:RI.Framework.Utilities.Text.CommandLine" /> created by parsing the command line string.
            </returns>
            <remarks>
                <para>
                    No deep error checking is performed on the parsed command line string so any string can be parsed and is considered a valid command line.
                    Invalid command lines will result in strange content of the <see cref="T:RI.Framework.Utilities.Text.CommandLine" />.
                </para>
                <para>
                    Because an executable cannot be distinguished from a literal, it must be specified whether the command line string starts with an executable.
                    For example, on Windows, a full process command line (e.g. as retrieved using <see cref="P:System.Environment.CommandLine" />) usually starts with the executable of the process.
                </para>
                <para>
                    <see cref="T:System.StringComparer" />.<see cref="P:System.StringComparer.InvariantCultureIgnoreCase" /> is used to distinguish parameter names.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="commandLine" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.Text.CommandLine.Parse(System.String,System.Boolean,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
                Parses a command line string and returns a <see cref="T:RI.Framework.Utilities.Text.CommandLine" /> object for it.
            </summary>
            <param name="commandLine"> The command line string to parse. </param>
            <param name="startsWithExecutable"> Indicates whether the command line string starts with an executable. </param>
            <param name="parameterNameComparer"> A string comparer used to distinguish parameter names or null if the default string comparer should be used (see <see cref="M:RI.Framework.Utilities.Text.CommandLine.Parse(System.String,System.Boolean)" />). </param>
            <returns>
                The <see cref="T:RI.Framework.Utilities.Text.CommandLine" /> created by parsing the command line string.
            </returns>
            <remarks>
                <para>
                    No deep error checking is performed on the parsed command line string so any string can be parsed and is considered a valid command line.
                    Invalid command lines will result in strange content of the <see cref="T:RI.Framework.Utilities.Text.CommandLine" />.
                </para>
                <para>
                    Because an executable cannot be distinguished from a literal, it must be specified whether the command line string starts with an executable.
                    For example, on Windows, a full process command line (e.g. as retrieved using <see cref="P:System.Environment.CommandLine" />) usually starts with the executable of the process.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="commandLine" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.Text.CommandLine.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Text.CommandLine" />.
            </summary>
            <remarks>
                <para>
                    <see cref="T:System.StringComparer" />.<see cref="P:System.StringComparer.InvariantCultureIgnoreCase" /> is used to distinguish parameter names.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Utilities.Text.CommandLine.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Text.CommandLine" />.
            </summary>
            <param name="parameterNameComparer"> A string comparer used to distinguish parameter names or null if the default string comparer should be used (see <see cref="M:RI.Framework.Utilities.Text.CommandLine.#ctor" />). </param>
        </member>
        <member name="P:RI.Framework.Utilities.Text.CommandLine.Executable">
            <summary>
                Gets or sets the executable of the command line.
            </summary>
            <value>
                The executable of the command line.
            </value>
        </member>
        <member name="P:RI.Framework.Utilities.Text.CommandLine.Literals">
            <summary>
                Gets the list of literals of the command line.
            </summary>
            <value>
                The list of literals of the command line.
            </value>
        </member>
        <member name="P:RI.Framework.Utilities.Text.CommandLine.ParameterNameComparer">
            <summary>
                Gets the used string comparer used to distinguish parameter names.
            </summary>
            <value>
                The used string comparer used to distinguish parameter names.
            </value>
        </member>
        <member name="P:RI.Framework.Utilities.Text.CommandLine.Parameters">
            <summary>
                Gets the dictionary of parameters of the command line.
            </summary>
            <value>
                The dictionary of parameters of the command line.
            </value>
            <remarks>
                The dictionary keys are the parameter names.
                The dictionary values are lists of parameter values for the associated parameter name.
                Therefore, a parameter name can have multiple parameter values.
            </remarks>
        </member>
        <member name="M:RI.Framework.Utilities.Text.CommandLine.Build">
            <summary>
                Builds the command line string corresponding to the data of this command line.
            </summary>
            <returns>
                The built command line string.
            </returns>
            <remarks>
                <para>
                    If this command line is &quot;empty&quot; (means: contains no executable, parameters, or literals), the resulting command line string is an empty string of zero length.
                </para>
                <para>
                    If an executable is used, it is placed at the beginning of the command line string.
                    The executable is wrapped in quotes if it contains any whitespaces.
                    If the executable is null, a string of zero length, or contains only whitespaces, the executable is omited.
                </para>
                <para>
                    Parameters are always added after the executable, before the literals.
                    Parameter names and values are wrapped in quotes if they are of zero length, contain any whitespaces, or contain quotes.
                    Parameter values which are null are omited.
                    If a parameter has no associated values (means: the corresponding list of values in the dictionary contains no values or only null), a single parameter of the corresponding name but without a value is created.
                </para>
                <para>
                    Literals are always added after the parameters.
                    Literals are wrapped in quotes if they are of zero length, contain any whitespaces, or contain quotes.
                    Literals which are null are omited.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Utilities.Text.CommandLine.ToString">
            <summary>
                Converts this instance of <see cref="T:RI.Framework.Utilities.Text.CommandLine" /> into a string.
            </summary>
            <returns>
                The string representation of this <see cref="T:RI.Framework.Utilities.Text.CommandLine" /> (same as returned by <see cref="M:RI.Framework.Utilities.Text.CommandLine.Build" />).
            </returns>
        </member>
        <member name="M:RI.Framework.Utilities.Text.CommandLine.Clone">
            <summary>
                Creates a clone of this command line.
            </summary>
            <returns>
                The clone of this command line.
            </returns>
            <remarks>
                <para>
                    The clone will be a full clone of the executable (if available) and all parameters and literals.
                    The resulting clones parameter dictionary and literal list are new instances.
                </para>
                <para>
                    The <see cref="P:RI.Framework.Utilities.Text.CommandLine.ParameterNameComparer" /> of the cloned command line is also cloned if it implements <see cref="T:RI.Framework.Utilities.ObjectModel.ICloneable`1" /> or <see cref="T:System.ICloneable" />.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Framework.Utilities.Text.CommandLine.System#ICloneable#Clone">
            <inheritdoc cref="M:RI.Framework.Utilities.Text.CommandLine.Clone" />
        </member>
        <member name="T:RI.Framework.Utilities.Text.IndentedTextWriter">
            <summary>
                A <see cref="T:System.IO.TextWriter" /> which encapsulates another <see cref="T:System.IO.TextWriter" /> so that it can be used with auto-indentation.
            </summary>
            <remarks>
                <para>
                    Auto-indentation means that each line written to the encapsulated <see cref="T:System.IO.TextWriter" /> starts with a defined indentation.
                </para>
                <note type="important">
                    <see cref="T:RI.Framework.Utilities.Text.IndentedTextWriter" /> only works reliable with new line strings of LF or CRLF (see <see cref="P:System.IO.TextWriter.NewLine" />).
                </note>
            </remarks>
            TODO: Example
        </member>
        <member name="M:RI.Framework.Utilities.Text.IndentedTextWriter.#ctor(System.IO.TextWriter,System.Boolean)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Text.IndentedTextWriter" />.
            </summary>
            <param name="writer"> The <see cref="T:System.IO.TextWriter" /> to encapsulate. </param>
            <param name="doNotOwnWriter"> Specifies whether the encapsulated <see cref="T:System.IO.TextWriter" /> is closed when this <see cref="T:RI.Framework.Utilities.Text.IndentedTextWriter" /> is closed (false) or not (true). </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="writer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.Text.IndentedTextWriter.#ctor(System.IO.TextWriter)">
            <summary>
                Creates a new instance of <see cref="T:RI.Framework.Utilities.Text.IndentedTextWriter" />.
            </summary>
            <param name="writer"> The <see cref="T:System.IO.TextWriter" /> to encapsulate. </param>
            <remarks>
                <para>
                    The encapsulated <see cref="T:System.IO.TextWriter" /> is closed when this <see cref="T:RI.Framework.Utilities.Text.IndentedTextWriter" /> is closed.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="writer" /> is null. </exception>
        </member>
        <member name="M:RI.Framework.Utilities.Text.IndentedTextWriter.Finalize">
            <summary>
                Garbage collects this instance of <see cref="T:RI.Framework.Utilities.Text.IndentedTextWriter" />.
            </summary>
        </member>
        <member name="P:RI.Framework.Utilities.Text.IndentedTextWriter.BaseWriter">
            <summary>
                Gets the <see cref="T:System.IO.TextWriter" /> which is encapsulated by this <see cref="T:RI.Framework.Utilities.Text.IndentedTextWriter" />.
            </summary>
            <value>
                The <see cref="T:System.IO.TextWriter" /> which is encapsulated by this <see cref="T:RI.Framework.Utilities.Text.IndentedTextWriter" />.
            </value>
        </member>
        <member name="P:RI.Framework.Utilities.Text.IndentedTextWriter.IndentEmptyLines">
            <summary>
                Gets or sets whether empty lines are indented or not.
            </summary>
            <value>
                true if empty lines are to be indented, false if not.
            </value>
            <remarks>
                <para>
                    Empty lines are either strings of zero length or which only contain whitespaces.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Framework.Utilities.Text.IndentedTextWriter.IndentLevel">
            <summary>
                Gets or sets the current indentation level.
            </summary>
            <value>
                The current indentation level.
            </value>
            <remarks>
                <para>
                    If a value less than zero is set as indentation level, zero is used instead.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Framework.Utilities.Text.IndentedTextWriter.IndentString">
            <summary>
                Gets or sets the indentation string.
            </summary>
            <value>
                The indentation string.
            </value>
            <remarks>
                <para>
                    The indentation string is added to the start of each line x times, where x is <see cref="P:RI.Framework.Utilities.Text.IndentedTextWriter.IndentLevel" />.
                </para>
                <para>
                    If null is set as indentation string, <see cref="F:System.String.Empty" /> is used instead.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Framework.Utilities.Text.IndentedTextWriter.Encoding">
            <inheritdoc />
        </member>
        <member name="P:RI.Framework.Utilities.Text.IndentedTextWriter.FormatProvider">
            <inheritdoc />
        </member>
        <member name="P:RI.Framework.Utilities.Text.IndentedTextWriter.NewLine">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Utilities.Text.IndentedTextWriter.Close">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Utilities.Text.IndentedTextWriter.Flush">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Utilities.Text.IndentedTextWriter.Write(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Utilities.Text.IndentedTextWriter.Write(System.Char)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Utilities.Text.IndentedTextWriter.Write(System.Char[])">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Utilities.Text.IndentedTextWriter.Write(System.Char[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Utilities.Text.IndentedTextWriter.Write(System.Decimal)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Utilities.Text.IndentedTextWriter.Write(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Utilities.Text.IndentedTextWriter.Write(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Utilities.Text.IndentedTextWriter.Write(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Utilities.Text.IndentedTextWriter.Write(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Utilities.Text.IndentedTextWriter.Write(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Utilities.Text.IndentedTextWriter.Write(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Utilities.Text.IndentedTextWriter.Write(System.String,System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Utilities.Text.IndentedTextWriter.Write(System.String,System.Object,System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Utilities.Text.IndentedTextWriter.Write(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Utilities.Text.IndentedTextWriter.Write(System.String)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Utilities.Text.IndentedTextWriter.Write(System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Utilities.Text.IndentedTextWriter.Write(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Utilities.Text.IndentedTextWriter.WriteLine">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Utilities.Text.IndentedTextWriter.WriteLine(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Utilities.Text.IndentedTextWriter.WriteLine(System.Char)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Utilities.Text.IndentedTextWriter.WriteLine(System.Char[])">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Utilities.Text.IndentedTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Utilities.Text.IndentedTextWriter.WriteLine(System.Decimal)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Utilities.Text.IndentedTextWriter.WriteLine(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Utilities.Text.IndentedTextWriter.WriteLine(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Utilities.Text.IndentedTextWriter.WriteLine(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Utilities.Text.IndentedTextWriter.WriteLine(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Utilities.Text.IndentedTextWriter.WriteLine(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Utilities.Text.IndentedTextWriter.WriteLine(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Utilities.Text.IndentedTextWriter.WriteLine(System.String,System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Utilities.Text.IndentedTextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Utilities.Text.IndentedTextWriter.WriteLine(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Utilities.Text.IndentedTextWriter.WriteLine(System.String)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Utilities.Text.IndentedTextWriter.WriteLine(System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Utilities.Text.IndentedTextWriter.WriteLine(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:RI.Framework.Utilities.Text.IndentedTextWriter.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:RI.Framework.Utilities.Text.NamespaceDoc">
            <summary>
                Contains utilities for string and text processing.
            </summary>
        </member>
        <member name="T:RI.Framework.Utilities.TimeSpanExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.TimeSpan" /> type.
            </summary>
        </member>
        <member name="M:RI.Framework.Utilities.TimeSpanExtensions.ToSortableString(System.TimeSpan)">
            <summary>
                Converts a time span into a sortable string.
            </summary>
            <param name="timeSpan"> The time span. </param>
            <returns>
                The time span as a sortable string in the following format %dhhmmssfff with no separator between the units.
                Example: <c> 1143050333 </c>
            </returns>
        </member>
        <member name="M:RI.Framework.Utilities.TimeSpanExtensions.ToSortableString(System.TimeSpan,System.Char)">
            <summary>
                Converts a time span into a sortable string.
            </summary>
            <param name="timeSpan"> The time span. </param>
            <param name="separator"> The separator between each unit of the time span. </param>
            <returns>
                The time span as a sortable string in the following format %d-hh-mm-ss-fff where the dash is the used separator.
                Example: <c> 1_14_30_50_333 </c> when used with the underscore as a separator.
            </returns>
        </member>
        <member name="M:RI.Framework.Utilities.TimeSpanExtensions.ToSortableString(System.TimeSpan,System.String)">
            <summary>
                Converts a time span into a sortable string.
            </summary>
            <param name="timeSpan"> The time span. </param>
            <param name="separator"> The separator between each unit of the time span. Can be null to use no separator. </param>
            <returns>
                The time span as a sortable string in the following format %d-hh-mm-ss-fff where the dash is the used separator.
                Example: <c> 1_14_30_50_333 </c> when used with the underscore as a separator.
            </returns>
        </member>
        <member name="T:RI.Framework.Utilities.NamespaceDoc">
            <summary>
                Contains utilities for working with common data types and objects (like string, double, etc.).
            </summary>
        </member>
    </members>
</doc>
