<?xml version="1.0" encoding="utf-8"?>

<topic id="b1c2cd1c-1022-42ba-840e-aff488a4f498"
       revisionNumber="1">
    <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
                                 xmlns:xlink="http://www.w3.org/1999/xlink">

        <introduction>
            <autoOutline />
        </introduction>

        <section address="Purpose">
            <title>Purpose</title>
            <content>
                <para>
                    A
                    <codeEntityReference qualifyHint="false">T:RI.Framework.Services.Bootstrapper</codeEntityReference>
                    is used to load all the actual decoupling services during scene load (using Unitys
                    <legacyItalic>Awake()</legacyItalic> ).
                </para>
            </content>
        </section>

        <section address="Usage">
            <title>Usage</title>
            <content>
                <para>
                    Note that the bootstrapper is only required once as it is persistent over all scenes (using Unitys
                    <legacyItalic>DontDestroyOnLoad()</legacyItalic> ).
                </para>
                <para>
                    The bootstrapper is added to a <legacyItalic>GameObject</legacyItalic> in a scene using drag-and-drop from
                    <legacyItalic>RI.Framework.Unity.dll</legacyItalic>:
                </para>
                <mediaLink>
                    <image xlink:href="BootstrapperDragDrop" />
                </mediaLink>
                <para>
                    Alternatively, it can also be done in code by adding
                    <codeEntityReference qualifyHint="false">T:RI.Framework.Services.Bootstrapper</codeEntityReference>
                    as a component to a <legacyItalic>GameObject</legacyItalic>:
                </para>
                <code language="cs">
                    <![CDATA[
GameObject go = new GameObject();
go.AddComponent<Bootstrapper>();
          ]]>
                </code>
                <para>
                    After the scene load, the bootstrapper can be seen in the list of objects:
                </para>
                <mediaLink>
                    <image xlink:href="BootstrapperObject" />
                </mediaLink>
            </content>
        </section>

        <section address="Omit">
            <title>Omit</title>
            <content>
                <para>
                    You do not need the bootstrapper.
                    You can use each decoupling service as its own independent standalone service (e.g. if you only want/need one of them).
                    However, you would have to do all the setup and wiring yourself.
                    The other decoupling service descriptions explain how to use them as independent standalone services.
                </para>
            </content>
        </section>

        <section address="Inherit">
            <title>Inherit</title>
            <content>
                <para>
                    You can inherit from Bootstrapper to create a customized bootstrapper which overrides most of its default behaviour.
                    See the documentation of <codeEntityReference qualifyHint="false">T:RI.Framework.Services.Bootstrapper</codeEntityReference> for more information about its default behaviour.
                </para>
                <para>
                    For example, you could override <codeEntityReference qualifyHint="false">M:RI.Framework.Services.Bootstrapper.ConfigureContainer()</codeEntityReference> to add custom catalogs to the CompositionContainer:
                </para>
                <code language="cs">
                    <![CDATA[
protected override void ConfigureContainer ()
{
    base.ConfigureContainer();
    this.Container.AddCatalog(new TypeCatalog(typeof(SomeType), typeof(AnotherType)));
}
          ]]>
                </code>
            </content>
        </section>

        <section address="Options">
            <title>Options</title>
            <content>
                <para>
                    The
                    <codeEntityReference qualifyHint="false">T:RI.Framework.Services.Bootstrapper</codeEntityReference>
                    provides a few options:
                </para>
                <mediaLink>
                    <image xlink:href="BootstrapperOptions" />
                </mediaLink>
                <para>
                    These options can be helpful if you do want to use the bootstrapper but not all of the decoupling services or if you want to use your own implementation of a service.
                    The only decoupling service always required and created by the bootstrapper is the
                    <codeEntityReference qualifyHint="false">T:RI.Framework.Composition.CompositionContainer</codeEntityReference>
                    .
                </para>
                <para>
                    The available options are:
                </para>
                <list class="bullet">
                    <listItem>
                        <para>
                            <legacyBold>Logging Service</legacyBold>:
                            Disabled by default.
                            Creates the logging service (
                            <codeEntityReference qualifyHint="false">T:RI.Framework.Services.Logging.LogService</codeEntityReference>
                            ) if enabled.
                            It is used internally by the framework for logging and therefore can be used to enable/disable all log output generated by the framework.
                            It is disabled by default to not spam your logs as especially the
                            <codeEntityReference qualifyHint="false">T:RI.Framework.Composition.CompositionContainer</codeEntityReference>
                            can generate an excessive amount of log entries.
                        </para>
                    </listItem>
                    <listItem>
                        <para>
                            <legacyBold>Module Service</legacyBold>:
                            Enabled by default.
                            Creates the modularization service (
                            <codeEntityReference qualifyHint="false">T:RI.Framework.Services.Modularization.ModuleService</codeEntityReference>
                            ) if enabled.
                        </para>
                    </listItem>
                    <listItem>
                        <para>
                            <legacyBold>Module Initialization</legacyBold>:
                            Enabled by default.
                            If enabled, the bootstrapper will automatically initialize the modules during the start if a
                            <codeEntityReference qualifyHint="false">T:RI.Framework.Services.Modularization.ModuleService</codeEntityReference>
                            is available.
                            <codeEntityReference qualifyHint="false">M:RI.Framework.Services.Modularization.ModuleService.Initialize</codeEntityReference>
                            will be called.
                        </para>
                    </listItem>
                    <listItem>
                        <para>
                            <legacyBold>Module Unloading</legacyBold>:
                            Enabled by default.
                            If enabled, the bootstrapper will automatically unload the modules during the shutdown if a
                            <codeEntityReference qualifyHint="false">T:RI.Framework.Services.Modularization.ModuleService</codeEntityReference>
                            is available.
                            <codeEntityReference qualifyHint="false">M:RI.Framework.Services.Modularization.ModuleService.Unload</codeEntityReference>
                            will be called.
                        </para>
                    </listItem>
                    <listItem>
                        <para>
                            <legacyBold>Dispatcher Service</legacyBold>:
                            Enabled by default.
                            Creates the dispatcher service (
                            <codeEntityReference qualifyHint="false">T:RI.Framework.Services.Dispatcher.DispatcherService</codeEntityReference>
                            ) if enabled.
                        </para>
                    </listItem>
                    <listItem>
                        <para>
                            <legacyBold>Scripting Catalog</legacyBold>:
                            Enabled by default.
                            Adds a
                            <codeEntityReference qualifyHint="false">T:RI.Framework.Composition.Catalogs.ScriptingCatalog</codeEntityReference>
                            to the
                            <codeEntityReference qualifyHint="false">T:RI.Framework.Composition.CompositionContainer</codeEntityReference>
                            if enabled.
                            The purpose and use of catalogs is described below.
                        </para>
                    </listItem>
                    <listItem>
                        <para>
                            <legacyBold>Service Locator Binding</legacyBold>:
                            Enabled by default.
                            Binds the
                            <codeEntityReference qualifyHint="false">T:RI.Framework.Services.ServiceLocator</codeEntityReference>
                            to
                            <codeEntityReference qualifyHint="false">T:RI.Framework.Composition.CompositionContainer</codeEntityReference>
                            if enabled.
                        </para>
                    </listItem>
                </list>
            </content>
        </section>

        <relatedTopics />

    </developerConceptualDocument>
</topic>